
star_quickstart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000864  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000864  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020004  2**0
                  CONTENTS
  3 .bss          0000003c  20000004  00000868  00020004  2**2
                  ALLOC
  4 .stack        00002000  20000040  000008a4  00020004  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007f39  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011fa  00000000  00000000  00027fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001729  00000000  00000000  000291b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000220  00000000  00000000  0002a8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  0002ab01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019937  00000000  00000000  0002ad39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006154  00000000  00000000  00044670  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009494c  00000000  00000000  0004a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004d0  00000000  00000000  000df110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002040 	.word	0x20002040
   4:	000005d9 	.word	0x000005d9
   8:	000005d5 	.word	0x000005d5
   c:	000005d5 	.word	0x000005d5
	...
  2c:	000005d5 	.word	0x000005d5
	...
  38:	000005d5 	.word	0x000005d5
  3c:	000005d5 	.word	0x000005d5
  40:	000005d5 	.word	0x000005d5
  44:	000005d5 	.word	0x000005d5
  48:	000005d5 	.word	0x000005d5
  4c:	000005d5 	.word	0x000005d5
  50:	000005d5 	.word	0x000005d5
  54:	000005d5 	.word	0x000005d5
  58:	000005d5 	.word	0x000005d5
  5c:	000005d5 	.word	0x000005d5
  60:	000005d5 	.word	0x000005d5
  64:	000005d5 	.word	0x000005d5
  68:	000005d5 	.word	0x000005d5
  6c:	000005d5 	.word	0x000005d5
  70:	000005d5 	.word	0x000005d5
  74:	000005d5 	.word	0x000005d5
  78:	000005d5 	.word	0x000005d5
  7c:	000005d5 	.word	0x000005d5
  80:	000005d5 	.word	0x000005d5
  84:	000005d5 	.word	0x000005d5
  88:	000005d5 	.word	0x000005d5
  8c:	000005d5 	.word	0x000005d5
  90:	000005d5 	.word	0x000005d5
  94:	000005d5 	.word	0x000005d5
  98:	000005d5 	.word	0x000005d5
  9c:	000005d5 	.word	0x000005d5
  a0:	000005d5 	.word	0x000005d5
  a4:	000005d5 	.word	0x000005d5
  a8:	000005d5 	.word	0x000005d5
  ac:	000005d5 	.word	0x000005d5
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000864 	.word	0x00000864

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000864 	.word	0x00000864
 10c:	00000864 	.word	0x00000864
 110:	00000000 	.word	0x00000000

00000114 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 114:	b500      	push	{lr}
 116:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 118:	ab01      	add	r3, sp, #4
 11a:	2280      	movs	r2, #128	; 0x80
 11c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 11e:	780a      	ldrb	r2, [r1, #0]
 120:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 122:	784a      	ldrb	r2, [r1, #1]
 124:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 126:	788a      	ldrb	r2, [r1, #2]
 128:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 12a:	0019      	movs	r1, r3
 12c:	4b01      	ldr	r3, [pc, #4]	; (134 <port_pin_set_config+0x20>)
 12e:	4798      	blx	r3
}
 130:	b003      	add	sp, #12
 132:	bd00      	pop	{pc}
 134:	00000575 	.word	0x00000575

00000138 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 138:	4770      	bx	lr
 13a:	46c0      	nop			; (mov r8, r8)

0000013c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 13c:	4b0c      	ldr	r3, [pc, #48]	; (170 <cpu_irq_enter_critical+0x34>)
 13e:	681b      	ldr	r3, [r3, #0]
 140:	2b00      	cmp	r3, #0
 142:	d110      	bne.n	166 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 144:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 148:	2b00      	cmp	r3, #0
 14a:	d109      	bne.n	160 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 14c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 14e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 152:	2200      	movs	r2, #0
 154:	4b07      	ldr	r3, [pc, #28]	; (174 <cpu_irq_enter_critical+0x38>)
 156:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 158:	3201      	adds	r2, #1
 15a:	4b07      	ldr	r3, [pc, #28]	; (178 <cpu_irq_enter_critical+0x3c>)
 15c:	701a      	strb	r2, [r3, #0]
 15e:	e002      	b.n	166 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 160:	2200      	movs	r2, #0
 162:	4b05      	ldr	r3, [pc, #20]	; (178 <cpu_irq_enter_critical+0x3c>)
 164:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 166:	4a02      	ldr	r2, [pc, #8]	; (170 <cpu_irq_enter_critical+0x34>)
 168:	6813      	ldr	r3, [r2, #0]
 16a:	3301      	adds	r3, #1
 16c:	6013      	str	r3, [r2, #0]
}
 16e:	4770      	bx	lr
 170:	20000020 	.word	0x20000020
 174:	20000000 	.word	0x20000000
 178:	20000024 	.word	0x20000024

0000017c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 17c:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x24>)
 17e:	681a      	ldr	r2, [r3, #0]
 180:	3a01      	subs	r2, #1
 182:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 184:	681b      	ldr	r3, [r3, #0]
 186:	2b00      	cmp	r3, #0
 188:	d109      	bne.n	19e <cpu_irq_leave_critical+0x22>
 18a:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x28>)
 18c:	781b      	ldrb	r3, [r3, #0]
 18e:	2b00      	cmp	r3, #0
 190:	d005      	beq.n	19e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 192:	2201      	movs	r2, #1
 194:	4b04      	ldr	r3, [pc, #16]	; (1a8 <cpu_irq_leave_critical+0x2c>)
 196:	701a      	strb	r2, [r3, #0]
 198:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 19c:	b662      	cpsie	i
	}
}
 19e:	4770      	bx	lr
 1a0:	20000020 	.word	0x20000020
 1a4:	20000024 	.word	0x20000024
 1a8:	20000000 	.word	0x20000000

000001ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 1ac:	b510      	push	{r4, lr}
	switch (clock_source) {
 1ae:	2808      	cmp	r0, #8
 1b0:	d803      	bhi.n	1ba <system_clock_source_get_hz+0xe>
 1b2:	0080      	lsls	r0, r0, #2
 1b4:	4b1c      	ldr	r3, [pc, #112]	; (228 <system_clock_source_get_hz+0x7c>)
 1b6:	581b      	ldr	r3, [r3, r0]
 1b8:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
 1ba:	2000      	movs	r0, #0
 1bc:	e032      	b.n	224 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
 1be:	4b1b      	ldr	r3, [pc, #108]	; (22c <system_clock_source_get_hz+0x80>)
 1c0:	6918      	ldr	r0, [r3, #16]
 1c2:	e02f      	b.n	224 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
 1c4:	4b1a      	ldr	r3, [pc, #104]	; (230 <system_clock_source_get_hz+0x84>)
 1c6:	7d18      	ldrb	r0, [r3, #20]
 1c8:	0700      	lsls	r0, r0, #28
 1ca:	0f80      	lsrs	r0, r0, #30
 1cc:	3001      	adds	r0, #1
 1ce:	4b19      	ldr	r3, [pc, #100]	; (234 <system_clock_source_get_hz+0x88>)
 1d0:	4358      	muls	r0, r3
 1d2:	e027      	b.n	224 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
 1d4:	4b15      	ldr	r3, [pc, #84]	; (22c <system_clock_source_get_hz+0x80>)
 1d6:	6958      	ldr	r0, [r3, #20]
 1d8:	e024      	b.n	224 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
 1da:	4b14      	ldr	r3, [pc, #80]	; (22c <system_clock_source_get_hz+0x80>)
 1dc:	681b      	ldr	r3, [r3, #0]
 1de:	2002      	movs	r0, #2
 1e0:	4018      	ands	r0, r3
 1e2:	d01f      	beq.n	224 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
 1e4:	4912      	ldr	r1, [pc, #72]	; (230 <system_clock_source_get_hz+0x84>)
 1e6:	2280      	movs	r2, #128	; 0x80
 1e8:	0052      	lsls	r2, r2, #1
 1ea:	68cb      	ldr	r3, [r1, #12]
 1ec:	4213      	tst	r3, r2
 1ee:	d0fc      	beq.n	1ea <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
 1f0:	4b0e      	ldr	r3, [pc, #56]	; (22c <system_clock_source_get_hz+0x80>)
 1f2:	681b      	ldr	r3, [r3, #0]
 1f4:	075b      	lsls	r3, r3, #29
 1f6:	d514      	bpl.n	222 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
 1f8:	2000      	movs	r0, #0
 1fa:	4b0f      	ldr	r3, [pc, #60]	; (238 <system_clock_source_get_hz+0x8c>)
 1fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 1fe:	4b0b      	ldr	r3, [pc, #44]	; (22c <system_clock_source_get_hz+0x80>)
 200:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
 202:	041b      	lsls	r3, r3, #16
 204:	0c1b      	lsrs	r3, r3, #16
 206:	4358      	muls	r0, r3
 208:	e00c      	b.n	224 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 20a:	2328      	movs	r3, #40	; 0x28
 20c:	4a08      	ldr	r2, [pc, #32]	; (230 <system_clock_source_get_hz+0x84>)
 20e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
 210:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 212:	079b      	lsls	r3, r3, #30
 214:	d506      	bpl.n	224 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
 216:	4b05      	ldr	r3, [pc, #20]	; (22c <system_clock_source_get_hz+0x80>)
 218:	68d8      	ldr	r0, [r3, #12]
 21a:	e003      	b.n	224 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
 21c:	2080      	movs	r0, #128	; 0x80
 21e:	0200      	lsls	r0, r0, #8
 220:	e000      	b.n	224 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
 222:	4806      	ldr	r0, [pc, #24]	; (23c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
 224:	bd10      	pop	{r4, pc}
 226:	46c0      	nop			; (mov r8, r8)
 228:	00000820 	.word	0x00000820
 22c:	20000028 	.word	0x20000028
 230:	40000c00 	.word	0x40000c00
 234:	003d0900 	.word	0x003d0900
 238:	0000049d 	.word	0x0000049d
 23c:	02dc6c00 	.word	0x02dc6c00

00000240 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 240:	b510      	push	{r4, lr}
 242:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
 244:	2280      	movs	r2, #128	; 0x80
 246:	0052      	lsls	r2, r2, #1
 248:	4b2b      	ldr	r3, [pc, #172]	; (2f8 <system_clock_init+0xb8>)
 24a:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
 24c:	3afd      	subs	r2, #253	; 0xfd
 24e:	4b2b      	ldr	r3, [pc, #172]	; (2fc <system_clock_init+0xbc>)
 250:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 252:	4a2b      	ldr	r2, [pc, #172]	; (300 <system_clock_init+0xc0>)
 254:	6853      	ldr	r3, [r2, #4]
 256:	211e      	movs	r1, #30
 258:	438b      	bics	r3, r1
 25a:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
 25c:	2380      	movs	r3, #128	; 0x80
 25e:	05db      	lsls	r3, r3, #23
 260:	789b      	ldrb	r3, [r3, #2]
 262:	2b02      	cmp	r3, #2
 264:	d009      	beq.n	27a <system_clock_init+0x3a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
 266:	2380      	movs	r3, #128	; 0x80
 268:	05db      	lsls	r3, r3, #23
 26a:	2201      	movs	r2, #1
 26c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
 26e:	3201      	adds	r2, #1
 270:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
 272:	001a      	movs	r2, r3
 274:	7993      	ldrb	r3, [r2, #6]
 276:	2b00      	cmp	r3, #0
 278:	d0fc      	beq.n	274 <system_clock_init+0x34>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
 27a:	4b1f      	ldr	r3, [pc, #124]	; (2f8 <system_clock_init+0xb8>)
 27c:	7d1a      	ldrb	r2, [r3, #20]
 27e:	2180      	movs	r1, #128	; 0x80
 280:	4249      	negs	r1, r1
 282:	430a      	orrs	r2, r1
 284:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
 286:	7d1a      	ldrb	r2, [r3, #20]
 288:	31c0      	adds	r1, #192	; 0xc0
 28a:	438a      	bics	r2, r1
 28c:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 28e:	4b1d      	ldr	r3, [pc, #116]	; (304 <system_clock_init+0xc4>)
 290:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
 292:	4c1d      	ldr	r4, [pc, #116]	; (308 <system_clock_init+0xc8>)
 294:	2301      	movs	r3, #1
 296:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
 298:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
 29a:	7123      	strb	r3, [r4, #4]
{
#ifdef  MCLK_CTRLA_CFDEN
	if (enable) {
		MCLK->CTRLA.reg |=  MCLK_CTRLA_CFDEN;
	} else {
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
 29c:	7822      	ldrb	r2, [r4, #0]
 29e:	2104      	movs	r1, #4
 2a0:	438a      	bics	r2, r1
 2a2:	7022      	strb	r2, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 2a4:	a901      	add	r1, sp, #4
 2a6:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
 2a8:	2300      	movs	r3, #0
 2aa:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
 2ac:	2206      	movs	r2, #6
 2ae:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 2b0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
 2b2:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 2b4:	2000      	movs	r0, #0
 2b6:	4b15      	ldr	r3, [pc, #84]	; (30c <system_clock_init+0xcc>)
 2b8:	4798      	blx	r3
 2ba:	2000      	movs	r0, #0
 2bc:	4b14      	ldr	r3, [pc, #80]	; (310 <system_clock_init+0xd0>)
 2be:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
 2c0:	2000      	movs	r0, #0
 2c2:	4b14      	ldr	r3, [pc, #80]	; (314 <system_clock_init+0xd4>)
 2c4:	4798      	blx	r3
 2c6:	7921      	ldrb	r1, [r4, #4]
 2c8:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
 2ca:	4b13      	ldr	r3, [pc, #76]	; (318 <system_clock_init+0xd8>)
 2cc:	4798      	blx	r3
 2ce:	4b13      	ldr	r3, [pc, #76]	; (31c <system_clock_init+0xdc>)
 2d0:	4298      	cmp	r0, r3
 2d2:	d80e      	bhi.n	2f2 <system_clock_init+0xb2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
 2d4:	2380      	movs	r3, #128	; 0x80
 2d6:	05db      	lsls	r3, r3, #23
 2d8:	789b      	ldrb	r3, [r3, #2]
 2da:	2b00      	cmp	r3, #0
 2dc:	d009      	beq.n	2f2 <system_clock_init+0xb2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
 2de:	2380      	movs	r3, #128	; 0x80
 2e0:	05db      	lsls	r3, r3, #23
 2e2:	2201      	movs	r2, #1
 2e4:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
 2e6:	2200      	movs	r2, #0
 2e8:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
 2ea:	001a      	movs	r2, r3
 2ec:	7993      	ldrb	r3, [r2, #6]
 2ee:	2b00      	cmp	r3, #0
 2f0:	d0fc      	beq.n	2ec <system_clock_init+0xac>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
 2f2:	b004      	add	sp, #16
 2f4:	bd10      	pop	{r4, pc}
 2f6:	46c0      	nop			; (mov r8, r8)
 2f8:	40000c00 	.word	0x40000c00
 2fc:	40001400 	.word	0x40001400
 300:	41004000 	.word	0x41004000
 304:	00000321 	.word	0x00000321
 308:	40000400 	.word	0x40000400
 30c:	00000345 	.word	0x00000345
 310:	000003f1 	.word	0x000003f1
 314:	00000431 	.word	0x00000431
 318:	000006bd 	.word	0x000006bd
 31c:	00b71b00 	.word	0x00b71b00

00000320 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
 320:	4a06      	ldr	r2, [pc, #24]	; (33c <system_gclk_init+0x1c>)
 322:	6951      	ldr	r1, [r2, #20]
 324:	2340      	movs	r3, #64	; 0x40
 326:	430b      	orrs	r3, r1
 328:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
 32a:	2201      	movs	r2, #1
 32c:	4b04      	ldr	r3, [pc, #16]	; (340 <system_gclk_init+0x20>)
 32e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
 330:	0019      	movs	r1, r3
 332:	780b      	ldrb	r3, [r1, #0]
 334:	4213      	tst	r3, r2
 336:	d1fc      	bne.n	332 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 338:	4770      	bx	lr
 33a:	46c0      	nop			; (mov r8, r8)
 33c:	40000400 	.word	0x40000400
 340:	40001800 	.word	0x40001800

00000344 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 344:	b570      	push	{r4, r5, r6, lr}
 346:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
 348:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 34a:	784b      	ldrb	r3, [r1, #1]
 34c:	2b00      	cmp	r3, #0
 34e:	d002      	beq.n	356 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 350:	2380      	movs	r3, #128	; 0x80
 352:	00db      	lsls	r3, r3, #3
 354:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 356:	7a4b      	ldrb	r3, [r1, #9]
 358:	2b00      	cmp	r3, #0
 35a:	d002      	beq.n	362 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 35c:	2380      	movs	r3, #128	; 0x80
 35e:	011b      	lsls	r3, r3, #4
 360:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 362:	684a      	ldr	r2, [r1, #4]
 364:	2a01      	cmp	r2, #1
 366:	d917      	bls.n	398 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 368:	1e53      	subs	r3, r2, #1
 36a:	421a      	tst	r2, r3
 36c:	d10f      	bne.n	38e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 36e:	2a02      	cmp	r2, #2
 370:	d906      	bls.n	380 <system_gclk_gen_set_config+0x3c>
 372:	2302      	movs	r3, #2
 374:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
 376:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 378:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 37a:	429a      	cmp	r2, r3
 37c:	d8fb      	bhi.n	376 <system_gclk_gen_set_config+0x32>
 37e:	e000      	b.n	382 <system_gclk_gen_set_config+0x3e>
 380:	2000      	movs	r0, #0
 382:	2380      	movs	r3, #128	; 0x80
 384:	015b      	lsls	r3, r3, #5
 386:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 388:	0400      	lsls	r0, r0, #16
 38a:	4304      	orrs	r4, r0
 38c:	e004      	b.n	398 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 38e:	0412      	lsls	r2, r2, #16
 390:	2380      	movs	r3, #128	; 0x80
 392:	009b      	lsls	r3, r3, #2
 394:	431a      	orrs	r2, r3
 396:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 398:	7a0b      	ldrb	r3, [r1, #8]
 39a:	2b00      	cmp	r3, #0
 39c:	d002      	beq.n	3a4 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 39e:	2380      	movs	r3, #128	; 0x80
 3a0:	019b      	lsls	r3, r3, #6
 3a2:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3a4:	2604      	movs	r6, #4
 3a6:	40ae      	lsls	r6, r5
 3a8:	490d      	ldr	r1, [pc, #52]	; (3e0 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 3aa:	4a0e      	ldr	r2, [pc, #56]	; (3e4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3ac:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 3ae:	4013      	ands	r3, r2
 3b0:	421e      	tst	r6, r3
 3b2:	d1fb      	bne.n	3ac <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3b4:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <system_gclk_gen_set_config+0xa4>)
 3b6:	4798      	blx	r3
 3b8:	00ad      	lsls	r5, r5, #2
 3ba:	4b09      	ldr	r3, [pc, #36]	; (3e0 <system_gclk_gen_set_config+0x9c>)
 3bc:	469c      	mov	ip, r3
 3be:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
 3c0:	6a28      	ldr	r0, [r5, #32]
 3c2:	2380      	movs	r3, #128	; 0x80
 3c4:	005b      	lsls	r3, r3, #1
 3c6:	4018      	ands	r0, r3
 3c8:	4320      	orrs	r0, r4
 3ca:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3cc:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 3ce:	4a05      	ldr	r2, [pc, #20]	; (3e4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3d0:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 3d2:	4013      	ands	r3, r2
 3d4:	421e      	tst	r6, r3
 3d6:	d1fb      	bne.n	3d0 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 3d8:	4b04      	ldr	r3, [pc, #16]	; (3ec <system_gclk_gen_set_config+0xa8>)
 3da:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
 3dc:	bd70      	pop	{r4, r5, r6, pc}
 3de:	46c0      	nop			; (mov r8, r8)
 3e0:	40001800 	.word	0x40001800
 3e4:	000007fc 	.word	0x000007fc
 3e8:	0000013d 	.word	0x0000013d
 3ec:	0000017d 	.word	0x0000017d

000003f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 3f0:	b510      	push	{r4, lr}
 3f2:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3f4:	2204      	movs	r2, #4
 3f6:	4082      	lsls	r2, r0
 3f8:	4809      	ldr	r0, [pc, #36]	; (420 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 3fa:	490a      	ldr	r1, [pc, #40]	; (424 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 3fc:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 3fe:	400b      	ands	r3, r1
 400:	421a      	tst	r2, r3
 402:	d1fb      	bne.n	3fc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 404:	4b08      	ldr	r3, [pc, #32]	; (428 <system_gclk_gen_enable+0x38>)
 406:	4798      	blx	r3
 408:	00a4      	lsls	r4, r4, #2
 40a:	4b05      	ldr	r3, [pc, #20]	; (420 <system_gclk_gen_enable+0x30>)
 40c:	469c      	mov	ip, r3
 40e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
 410:	6a23      	ldr	r3, [r4, #32]
 412:	2280      	movs	r2, #128	; 0x80
 414:	0052      	lsls	r2, r2, #1
 416:	4313      	orrs	r3, r2
 418:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 41a:	4b04      	ldr	r3, [pc, #16]	; (42c <system_gclk_gen_enable+0x3c>)
 41c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 41e:	bd10      	pop	{r4, pc}
 420:	40001800 	.word	0x40001800
 424:	000007fc 	.word	0x000007fc
 428:	0000013d 	.word	0x0000013d
 42c:	0000017d 	.word	0x0000017d

00000430 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 432:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 434:	2204      	movs	r2, #4
 436:	4082      	lsls	r2, r0
 438:	4812      	ldr	r0, [pc, #72]	; (484 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 43a:	4913      	ldr	r1, [pc, #76]	; (488 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 43c:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 43e:	400b      	ands	r3, r1
 440:	421a      	tst	r2, r3
 442:	d1fb      	bne.n	43c <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 444:	4b11      	ldr	r3, [pc, #68]	; (48c <system_gclk_gen_get_hz+0x5c>)
 446:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
 448:	4f0e      	ldr	r7, [pc, #56]	; (484 <system_gclk_gen_get_hz+0x54>)
 44a:	3408      	adds	r4, #8
 44c:	00a4      	lsls	r4, r4, #2
 44e:	59e0      	ldr	r0, [r4, r7]
 450:	06c0      	lsls	r0, r0, #27
 452:	0ec0      	lsrs	r0, r0, #27
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
 454:	4b0e      	ldr	r3, [pc, #56]	; (490 <system_gclk_gen_get_hz+0x60>)
 456:	4798      	blx	r3
 458:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
 45a:	59e5      	ldr	r5, [r4, r7]
 45c:	04ed      	lsls	r5, r5, #19
 45e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
 460:	59e4      	ldr	r4, [r4, r7]
 462:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 464:	4b0b      	ldr	r3, [pc, #44]	; (494 <system_gclk_gen_get_hz+0x64>)
 466:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 468:	2d00      	cmp	r5, #0
 46a:	d107      	bne.n	47c <system_gclk_gen_get_hz+0x4c>
 46c:	2c01      	cmp	r4, #1
 46e:	d907      	bls.n	480 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
 470:	0021      	movs	r1, r4
 472:	0030      	movs	r0, r6
 474:	4b08      	ldr	r3, [pc, #32]	; (498 <system_gclk_gen_get_hz+0x68>)
 476:	4798      	blx	r3
 478:	0006      	movs	r6, r0
 47a:	e001      	b.n	480 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 47c:	3401      	adds	r4, #1
 47e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
 480:	0030      	movs	r0, r6
 482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 484:	40001800 	.word	0x40001800
 488:	000007fc 	.word	0x000007fc
 48c:	0000013d 	.word	0x0000013d
 490:	000001ad 	.word	0x000001ad
 494:	0000017d 	.word	0x0000017d
 498:	000006bd 	.word	0x000006bd

0000049c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 49c:	b510      	push	{r4, lr}
 49e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4a0:	4b06      	ldr	r3, [pc, #24]	; (4bc <system_gclk_chan_get_hz+0x20>)
 4a2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
 4a4:	3420      	adds	r4, #32
 4a6:	00a4      	lsls	r4, r4, #2
 4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <system_gclk_chan_get_hz+0x24>)
 4aa:	58e4      	ldr	r4, [r4, r3]
 4ac:	0724      	lsls	r4, r4, #28
 4ae:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4b0:	4b04      	ldr	r3, [pc, #16]	; (4c4 <system_gclk_chan_get_hz+0x28>)
 4b2:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 4b4:	0020      	movs	r0, r4
 4b6:	4b04      	ldr	r3, [pc, #16]	; (4c8 <system_gclk_chan_get_hz+0x2c>)
 4b8:	4798      	blx	r3
}
 4ba:	bd10      	pop	{r4, pc}
 4bc:	0000013d 	.word	0x0000013d
 4c0:	40001800 	.word	0x40001800
 4c4:	0000017d 	.word	0x0000017d
 4c8:	00000431 	.word	0x00000431

000004cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 4cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 4ce:	78d3      	ldrb	r3, [r2, #3]
 4d0:	2b00      	cmp	r3, #0
 4d2:	d11e      	bne.n	512 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 4d4:	7813      	ldrb	r3, [r2, #0]
 4d6:	2b80      	cmp	r3, #128	; 0x80
 4d8:	d004      	beq.n	4e4 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 4da:	061b      	lsls	r3, r3, #24
 4dc:	2480      	movs	r4, #128	; 0x80
 4de:	0264      	lsls	r4, r4, #9
 4e0:	4323      	orrs	r3, r4
 4e2:	e000      	b.n	4e6 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 4e4:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 4e6:	7854      	ldrb	r4, [r2, #1]
 4e8:	2502      	movs	r5, #2
 4ea:	43ac      	bics	r4, r5
 4ec:	d10a      	bne.n	504 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 4ee:	7894      	ldrb	r4, [r2, #2]
 4f0:	2c00      	cmp	r4, #0
 4f2:	d103      	bne.n	4fc <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 4f4:	2480      	movs	r4, #128	; 0x80
 4f6:	02a4      	lsls	r4, r4, #10
 4f8:	4323      	orrs	r3, r4
 4fa:	e002      	b.n	502 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 4fc:	24c0      	movs	r4, #192	; 0xc0
 4fe:	02e4      	lsls	r4, r4, #11
 500:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 502:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 504:	7854      	ldrb	r4, [r2, #1]
 506:	3c01      	subs	r4, #1
 508:	2c01      	cmp	r4, #1
 50a:	d812      	bhi.n	532 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 50c:	4c18      	ldr	r4, [pc, #96]	; (570 <_system_pinmux_config+0xa4>)
 50e:	4023      	ands	r3, r4
 510:	e00f      	b.n	532 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 512:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 514:	040b      	lsls	r3, r1, #16
 516:	0c1b      	lsrs	r3, r3, #16
 518:	24a0      	movs	r4, #160	; 0xa0
 51a:	05e4      	lsls	r4, r4, #23
 51c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 51e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 520:	0c0b      	lsrs	r3, r1, #16
 522:	24d0      	movs	r4, #208	; 0xd0
 524:	0624      	lsls	r4, r4, #24
 526:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 528:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 52a:	78d3      	ldrb	r3, [r2, #3]
 52c:	2b00      	cmp	r3, #0
 52e:	d018      	beq.n	562 <_system_pinmux_config+0x96>
 530:	e01c      	b.n	56c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 532:	040c      	lsls	r4, r1, #16
 534:	0c24      	lsrs	r4, r4, #16
 536:	25a0      	movs	r5, #160	; 0xa0
 538:	05ed      	lsls	r5, r5, #23
 53a:	432c      	orrs	r4, r5
 53c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 53e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 540:	0c0c      	lsrs	r4, r1, #16
 542:	25d0      	movs	r5, #208	; 0xd0
 544:	062d      	lsls	r5, r5, #24
 546:	432c      	orrs	r4, r5
 548:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 54a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 54c:	78d4      	ldrb	r4, [r2, #3]
 54e:	2c00      	cmp	r4, #0
 550:	d10c      	bne.n	56c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 552:	035b      	lsls	r3, r3, #13
 554:	d505      	bpl.n	562 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 556:	7893      	ldrb	r3, [r2, #2]
 558:	2b01      	cmp	r3, #1
 55a:	d101      	bne.n	560 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 55c:	6181      	str	r1, [r0, #24]
 55e:	e000      	b.n	562 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 560:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 562:	7853      	ldrb	r3, [r2, #1]
 564:	3b01      	subs	r3, #1
 566:	2b01      	cmp	r3, #1
 568:	d800      	bhi.n	56c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 56a:	6081      	str	r1, [r0, #8]
		}
	}
}
 56c:	bd30      	pop	{r4, r5, pc}
 56e:	46c0      	nop			; (mov r8, r8)
 570:	fffbffff 	.word	0xfffbffff

00000574 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 574:	b510      	push	{r4, lr}
 576:	0003      	movs	r3, r0
 578:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 57a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 57c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 57e:	2900      	cmp	r1, #0
 580:	d104      	bne.n	58c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 582:	0958      	lsrs	r0, r3, #5
 584:	01c0      	lsls	r0, r0, #7
 586:	4905      	ldr	r1, [pc, #20]	; (59c <system_pinmux_pin_set_config+0x28>)
 588:	468c      	mov	ip, r1
 58a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 58c:	211f      	movs	r1, #31
 58e:	400b      	ands	r3, r1
 590:	391e      	subs	r1, #30
 592:	4099      	lsls	r1, r3
 594:	4b02      	ldr	r3, [pc, #8]	; (5a0 <system_pinmux_pin_set_config+0x2c>)
 596:	4798      	blx	r3
}
 598:	bd10      	pop	{r4, pc}
 59a:	46c0      	nop			; (mov r8, r8)
 59c:	40002800 	.word	0x40002800
 5a0:	000004cd 	.word	0x000004cd

000005a4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 5a4:	4770      	bx	lr
 5a6:	46c0      	nop			; (mov r8, r8)

000005a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 5a8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <system_init+0x18>)
 5ac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <system_init+0x1c>)
 5b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <system_init+0x20>)
 5b4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 5b6:	4b05      	ldr	r3, [pc, #20]	; (5cc <system_init+0x24>)
 5b8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 5ba:	4b05      	ldr	r3, [pc, #20]	; (5d0 <system_init+0x28>)
 5bc:	4798      	blx	r3
}
 5be:	bd10      	pop	{r4, pc}
 5c0:	00000241 	.word	0x00000241
 5c4:	00000139 	.word	0x00000139
 5c8:	000005a5 	.word	0x000005a5
 5cc:	000005a5 	.word	0x000005a5
 5d0:	000005a5 	.word	0x000005a5

000005d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 5d4:	e7fe      	b.n	5d4 <Dummy_Handler>
 5d6:	46c0      	nop			; (mov r8, r8)

000005d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 5d8:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 5da:	4b1d      	ldr	r3, [pc, #116]	; (650 <Reset_Handler+0x78>)
 5dc:	4a1d      	ldr	r2, [pc, #116]	; (654 <Reset_Handler+0x7c>)
 5de:	429a      	cmp	r2, r3
 5e0:	d003      	beq.n	5ea <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 5e2:	4b1d      	ldr	r3, [pc, #116]	; (658 <Reset_Handler+0x80>)
 5e4:	4a1a      	ldr	r2, [pc, #104]	; (650 <Reset_Handler+0x78>)
 5e6:	429a      	cmp	r2, r3
 5e8:	d304      	bcc.n	5f4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 5ea:	4b1c      	ldr	r3, [pc, #112]	; (65c <Reset_Handler+0x84>)
 5ec:	4a1c      	ldr	r2, [pc, #112]	; (660 <Reset_Handler+0x88>)
 5ee:	429a      	cmp	r2, r3
 5f0:	d310      	bcc.n	614 <Reset_Handler+0x3c>
 5f2:	e01e      	b.n	632 <Reset_Handler+0x5a>
 5f4:	4a1b      	ldr	r2, [pc, #108]	; (664 <Reset_Handler+0x8c>)
 5f6:	4b18      	ldr	r3, [pc, #96]	; (658 <Reset_Handler+0x80>)
 5f8:	3303      	adds	r3, #3
 5fa:	1a9b      	subs	r3, r3, r2
 5fc:	089b      	lsrs	r3, r3, #2
 5fe:	3301      	adds	r3, #1
 600:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 602:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 604:	4812      	ldr	r0, [pc, #72]	; (650 <Reset_Handler+0x78>)
 606:	4913      	ldr	r1, [pc, #76]	; (654 <Reset_Handler+0x7c>)
 608:	588c      	ldr	r4, [r1, r2]
 60a:	5084      	str	r4, [r0, r2]
 60c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 60e:	429a      	cmp	r2, r3
 610:	d1fa      	bne.n	608 <Reset_Handler+0x30>
 612:	e7ea      	b.n	5ea <Reset_Handler+0x12>
 614:	4a14      	ldr	r2, [pc, #80]	; (668 <Reset_Handler+0x90>)
 616:	4b11      	ldr	r3, [pc, #68]	; (65c <Reset_Handler+0x84>)
 618:	3303      	adds	r3, #3
 61a:	1a9b      	subs	r3, r3, r2
 61c:	089b      	lsrs	r3, r3, #2
 61e:	3301      	adds	r3, #1
 620:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 622:	2200      	movs	r2, #0
                *pDest++ = 0;
 624:	480e      	ldr	r0, [pc, #56]	; (660 <Reset_Handler+0x88>)
 626:	2100      	movs	r1, #0
 628:	1814      	adds	r4, r2, r0
 62a:	6021      	str	r1, [r4, #0]
 62c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 62e:	429a      	cmp	r2, r3
 630:	d1fa      	bne.n	628 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 632:	4a0e      	ldr	r2, [pc, #56]	; (66c <Reset_Handler+0x94>)
 634:	21ff      	movs	r1, #255	; 0xff
 636:	4b0e      	ldr	r3, [pc, #56]	; (670 <Reset_Handler+0x98>)
 638:	438b      	bics	r3, r1
 63a:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 63c:	4a0d      	ldr	r2, [pc, #52]	; (674 <Reset_Handler+0x9c>)
 63e:	6851      	ldr	r1, [r2, #4]
 640:	2380      	movs	r3, #128	; 0x80
 642:	430b      	orrs	r3, r1
 644:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 646:	4b0c      	ldr	r3, [pc, #48]	; (678 <Reset_Handler+0xa0>)
 648:	4798      	blx	r3

        /* Branch to main function */
        main();
 64a:	4b0c      	ldr	r3, [pc, #48]	; (67c <Reset_Handler+0xa4>)
 64c:	4798      	blx	r3
 64e:	e7fe      	b.n	64e <Reset_Handler+0x76>
 650:	20000000 	.word	0x20000000
 654:	00000864 	.word	0x00000864
 658:	20000004 	.word	0x20000004
 65c:	20000040 	.word	0x20000040
 660:	20000004 	.word	0x20000004
 664:	20000004 	.word	0x20000004
 668:	20000008 	.word	0x20000008
 66c:	e000ed00 	.word	0xe000ed00
 670:	00000000 	.word	0x00000000
 674:	41004000 	.word	0x41004000
 678:	000007d5 	.word	0x000007d5
 67c:	00000681 	.word	0x00000681

00000680 <main>:

const uint8_t LED_R_PIN = 0x07; // PA07
const uint8_t LED_G_PIN = 0x08; // PA08 

int main (void)
{
 680:	b530      	push	{r4, r5, lr}
 682:	b083      	sub	sp, #12
	system_init();
 684:	4b0a      	ldr	r3, [pc, #40]	; (6b0 <main+0x30>)
 686:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 688:	ac01      	add	r4, sp, #4
 68a:	2301      	movs	r3, #1
 68c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
 68e:	2200      	movs	r2, #0
 690:	70a2      	strb	r2, [r4, #2]
    
    struct port_config config_port_pin;
    port_get_config_defaults(&config_port_pin);
    config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
 692:	7023      	strb	r3, [r4, #0]
    port_pin_set_config(LED_R_PIN, &config_port_pin);
 694:	0021      	movs	r1, r4
 696:	2007      	movs	r0, #7
 698:	4d06      	ldr	r5, [pc, #24]	; (6b4 <main+0x34>)
 69a:	47a8      	blx	r5
    port_pin_set_config(LED_G_PIN, &config_port_pin);
 69c:	0021      	movs	r1, r4
 69e:	2008      	movs	r0, #8
 6a0:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <main+0x38>)
 6a4:	2180      	movs	r1, #128	; 0x80
 6a6:	2280      	movs	r2, #128	; 0x80
 6a8:	0052      	lsls	r2, r2, #1
 6aa:	6199      	str	r1, [r3, #24]
 6ac:	619a      	str	r2, [r3, #24]
 6ae:	e7fc      	b.n	6aa <main+0x2a>
 6b0:	000005a9 	.word	0x000005a9
 6b4:	00000115 	.word	0x00000115
 6b8:	40002800 	.word	0x40002800

000006bc <__aeabi_uidiv>:
 6bc:	2200      	movs	r2, #0
 6be:	0843      	lsrs	r3, r0, #1
 6c0:	428b      	cmp	r3, r1
 6c2:	d374      	bcc.n	7ae <__aeabi_uidiv+0xf2>
 6c4:	0903      	lsrs	r3, r0, #4
 6c6:	428b      	cmp	r3, r1
 6c8:	d35f      	bcc.n	78a <__aeabi_uidiv+0xce>
 6ca:	0a03      	lsrs	r3, r0, #8
 6cc:	428b      	cmp	r3, r1
 6ce:	d344      	bcc.n	75a <__aeabi_uidiv+0x9e>
 6d0:	0b03      	lsrs	r3, r0, #12
 6d2:	428b      	cmp	r3, r1
 6d4:	d328      	bcc.n	728 <__aeabi_uidiv+0x6c>
 6d6:	0c03      	lsrs	r3, r0, #16
 6d8:	428b      	cmp	r3, r1
 6da:	d30d      	bcc.n	6f8 <__aeabi_uidiv+0x3c>
 6dc:	22ff      	movs	r2, #255	; 0xff
 6de:	0209      	lsls	r1, r1, #8
 6e0:	ba12      	rev	r2, r2
 6e2:	0c03      	lsrs	r3, r0, #16
 6e4:	428b      	cmp	r3, r1
 6e6:	d302      	bcc.n	6ee <__aeabi_uidiv+0x32>
 6e8:	1212      	asrs	r2, r2, #8
 6ea:	0209      	lsls	r1, r1, #8
 6ec:	d065      	beq.n	7ba <__aeabi_uidiv+0xfe>
 6ee:	0b03      	lsrs	r3, r0, #12
 6f0:	428b      	cmp	r3, r1
 6f2:	d319      	bcc.n	728 <__aeabi_uidiv+0x6c>
 6f4:	e000      	b.n	6f8 <__aeabi_uidiv+0x3c>
 6f6:	0a09      	lsrs	r1, r1, #8
 6f8:	0bc3      	lsrs	r3, r0, #15
 6fa:	428b      	cmp	r3, r1
 6fc:	d301      	bcc.n	702 <__aeabi_uidiv+0x46>
 6fe:	03cb      	lsls	r3, r1, #15
 700:	1ac0      	subs	r0, r0, r3
 702:	4152      	adcs	r2, r2
 704:	0b83      	lsrs	r3, r0, #14
 706:	428b      	cmp	r3, r1
 708:	d301      	bcc.n	70e <__aeabi_uidiv+0x52>
 70a:	038b      	lsls	r3, r1, #14
 70c:	1ac0      	subs	r0, r0, r3
 70e:	4152      	adcs	r2, r2
 710:	0b43      	lsrs	r3, r0, #13
 712:	428b      	cmp	r3, r1
 714:	d301      	bcc.n	71a <__aeabi_uidiv+0x5e>
 716:	034b      	lsls	r3, r1, #13
 718:	1ac0      	subs	r0, r0, r3
 71a:	4152      	adcs	r2, r2
 71c:	0b03      	lsrs	r3, r0, #12
 71e:	428b      	cmp	r3, r1
 720:	d301      	bcc.n	726 <__aeabi_uidiv+0x6a>
 722:	030b      	lsls	r3, r1, #12
 724:	1ac0      	subs	r0, r0, r3
 726:	4152      	adcs	r2, r2
 728:	0ac3      	lsrs	r3, r0, #11
 72a:	428b      	cmp	r3, r1
 72c:	d301      	bcc.n	732 <__aeabi_uidiv+0x76>
 72e:	02cb      	lsls	r3, r1, #11
 730:	1ac0      	subs	r0, r0, r3
 732:	4152      	adcs	r2, r2
 734:	0a83      	lsrs	r3, r0, #10
 736:	428b      	cmp	r3, r1
 738:	d301      	bcc.n	73e <__aeabi_uidiv+0x82>
 73a:	028b      	lsls	r3, r1, #10
 73c:	1ac0      	subs	r0, r0, r3
 73e:	4152      	adcs	r2, r2
 740:	0a43      	lsrs	r3, r0, #9
 742:	428b      	cmp	r3, r1
 744:	d301      	bcc.n	74a <__aeabi_uidiv+0x8e>
 746:	024b      	lsls	r3, r1, #9
 748:	1ac0      	subs	r0, r0, r3
 74a:	4152      	adcs	r2, r2
 74c:	0a03      	lsrs	r3, r0, #8
 74e:	428b      	cmp	r3, r1
 750:	d301      	bcc.n	756 <__aeabi_uidiv+0x9a>
 752:	020b      	lsls	r3, r1, #8
 754:	1ac0      	subs	r0, r0, r3
 756:	4152      	adcs	r2, r2
 758:	d2cd      	bcs.n	6f6 <__aeabi_uidiv+0x3a>
 75a:	09c3      	lsrs	r3, r0, #7
 75c:	428b      	cmp	r3, r1
 75e:	d301      	bcc.n	764 <__aeabi_uidiv+0xa8>
 760:	01cb      	lsls	r3, r1, #7
 762:	1ac0      	subs	r0, r0, r3
 764:	4152      	adcs	r2, r2
 766:	0983      	lsrs	r3, r0, #6
 768:	428b      	cmp	r3, r1
 76a:	d301      	bcc.n	770 <__aeabi_uidiv+0xb4>
 76c:	018b      	lsls	r3, r1, #6
 76e:	1ac0      	subs	r0, r0, r3
 770:	4152      	adcs	r2, r2
 772:	0943      	lsrs	r3, r0, #5
 774:	428b      	cmp	r3, r1
 776:	d301      	bcc.n	77c <__aeabi_uidiv+0xc0>
 778:	014b      	lsls	r3, r1, #5
 77a:	1ac0      	subs	r0, r0, r3
 77c:	4152      	adcs	r2, r2
 77e:	0903      	lsrs	r3, r0, #4
 780:	428b      	cmp	r3, r1
 782:	d301      	bcc.n	788 <__aeabi_uidiv+0xcc>
 784:	010b      	lsls	r3, r1, #4
 786:	1ac0      	subs	r0, r0, r3
 788:	4152      	adcs	r2, r2
 78a:	08c3      	lsrs	r3, r0, #3
 78c:	428b      	cmp	r3, r1
 78e:	d301      	bcc.n	794 <__aeabi_uidiv+0xd8>
 790:	00cb      	lsls	r3, r1, #3
 792:	1ac0      	subs	r0, r0, r3
 794:	4152      	adcs	r2, r2
 796:	0883      	lsrs	r3, r0, #2
 798:	428b      	cmp	r3, r1
 79a:	d301      	bcc.n	7a0 <__aeabi_uidiv+0xe4>
 79c:	008b      	lsls	r3, r1, #2
 79e:	1ac0      	subs	r0, r0, r3
 7a0:	4152      	adcs	r2, r2
 7a2:	0843      	lsrs	r3, r0, #1
 7a4:	428b      	cmp	r3, r1
 7a6:	d301      	bcc.n	7ac <__aeabi_uidiv+0xf0>
 7a8:	004b      	lsls	r3, r1, #1
 7aa:	1ac0      	subs	r0, r0, r3
 7ac:	4152      	adcs	r2, r2
 7ae:	1a41      	subs	r1, r0, r1
 7b0:	d200      	bcs.n	7b4 <__aeabi_uidiv+0xf8>
 7b2:	4601      	mov	r1, r0
 7b4:	4152      	adcs	r2, r2
 7b6:	4610      	mov	r0, r2
 7b8:	4770      	bx	lr
 7ba:	e7ff      	b.n	7bc <__aeabi_uidiv+0x100>
 7bc:	b501      	push	{r0, lr}
 7be:	2000      	movs	r0, #0
 7c0:	f000 f806 	bl	7d0 <__aeabi_idiv0>
 7c4:	bd02      	pop	{r1, pc}
 7c6:	46c0      	nop			; (mov r8, r8)

000007c8 <__aeabi_uidivmod>:
 7c8:	2900      	cmp	r1, #0
 7ca:	d0f7      	beq.n	7bc <__aeabi_uidiv+0x100>
 7cc:	e776      	b.n	6bc <__aeabi_uidiv>
 7ce:	4770      	bx	lr

000007d0 <__aeabi_idiv0>:
 7d0:	4770      	bx	lr
 7d2:	46c0      	nop			; (mov r8, r8)

000007d4 <__libc_init_array>:
 7d4:	4b0e      	ldr	r3, [pc, #56]	; (810 <__libc_init_array+0x3c>)
 7d6:	b570      	push	{r4, r5, r6, lr}
 7d8:	2500      	movs	r5, #0
 7da:	001e      	movs	r6, r3
 7dc:	4c0d      	ldr	r4, [pc, #52]	; (814 <__libc_init_array+0x40>)
 7de:	1ae4      	subs	r4, r4, r3
 7e0:	10a4      	asrs	r4, r4, #2
 7e2:	42a5      	cmp	r5, r4
 7e4:	d004      	beq.n	7f0 <__libc_init_array+0x1c>
 7e6:	00ab      	lsls	r3, r5, #2
 7e8:	58f3      	ldr	r3, [r6, r3]
 7ea:	4798      	blx	r3
 7ec:	3501      	adds	r5, #1
 7ee:	e7f8      	b.n	7e2 <__libc_init_array+0xe>
 7f0:	f000 f828 	bl	844 <_init>
 7f4:	4b08      	ldr	r3, [pc, #32]	; (818 <__libc_init_array+0x44>)
 7f6:	2500      	movs	r5, #0
 7f8:	001e      	movs	r6, r3
 7fa:	4c08      	ldr	r4, [pc, #32]	; (81c <__libc_init_array+0x48>)
 7fc:	1ae4      	subs	r4, r4, r3
 7fe:	10a4      	asrs	r4, r4, #2
 800:	42a5      	cmp	r5, r4
 802:	d004      	beq.n	80e <__libc_init_array+0x3a>
 804:	00ab      	lsls	r3, r5, #2
 806:	58f3      	ldr	r3, [r6, r3]
 808:	4798      	blx	r3
 80a:	3501      	adds	r5, #1
 80c:	e7f8      	b.n	800 <__libc_init_array+0x2c>
 80e:	bd70      	pop	{r4, r5, r6, pc}
 810:	00000850 	.word	0x00000850
 814:	00000850 	.word	0x00000850
 818:	00000850 	.word	0x00000850
 81c:	00000854 	.word	0x00000854
 820:	000001be 	.word	0x000001be
 824:	000001ba 	.word	0x000001ba
 828:	000001ba 	.word	0x000001ba
 82c:	0000021c 	.word	0x0000021c
 830:	0000021c 	.word	0x0000021c
 834:	000001d4 	.word	0x000001d4
 838:	000001c4 	.word	0x000001c4
 83c:	000001da 	.word	0x000001da
 840:	0000020a 	.word	0x0000020a

00000844 <_init>:
 844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 846:	46c0      	nop			; (mov r8, r8)
 848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 84a:	bc08      	pop	{r3}
 84c:	469e      	mov	lr, r3
 84e:	4770      	bx	lr

00000850 <__init_array_start>:
 850:	000000dd 	.word	0x000000dd

00000854 <_fini>:
 854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 856:	46c0      	nop			; (mov r8, r8)
 858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 85a:	bc08      	pop	{r3}
 85c:	469e      	mov	lr, r3
 85e:	4770      	bx	lr

00000860 <__fini_array_start>:
 860:	000000b5 	.word	0x000000b5
