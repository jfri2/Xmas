
Snowflake_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000388c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f8  20000000  0000388c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000200f8  2**0
                  CONTENTS
  3 .bss          000005f8  200000f8  00003984  000200f8  2**2
                  ALLOC
  4 .stack        00002000  200006f0  00003f7c  000200f8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a0ba  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003402  00000000  00000000  0003a233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007f8  00000000  00000000  0003d635  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000aa9f  00000000  00000000  0003de2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00011351  00000000  00000000  000488cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009f89d  00000000  00000000  00059c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006246  00000000  00000000  000f94ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000838  00000000  00000000  000ff700  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001400  00000000  00000000  000fff38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200026f0 	.word	0x200026f0
       4:	0000333d 	.word	0x0000333d
       8:	00003339 	.word	0x00003339
       c:	00003339 	.word	0x00003339
	...
      2c:	00003339 	.word	0x00003339
	...
      38:	00003339 	.word	0x00003339
      3c:	00003339 	.word	0x00003339
      40:	00003339 	.word	0x00003339
      44:	00003339 	.word	0x00003339
      48:	00003339 	.word	0x00003339
      4c:	00000d79 	.word	0x00000d79
      50:	00003339 	.word	0x00003339
      54:	00003339 	.word	0x00003339
      58:	00002205 	.word	0x00002205
      5c:	00003339 	.word	0x00003339
      60:	00003339 	.word	0x00003339
      64:	00003339 	.word	0x00003339
      68:	00003339 	.word	0x00003339
      6c:	00003339 	.word	0x00003339
      70:	00003339 	.word	0x00003339
      74:	00003339 	.word	0x00003339
      78:	00003339 	.word	0x00003339
      7c:	00003339 	.word	0x00003339
      80:	00003339 	.word	0x00003339
      84:	00003339 	.word	0x00003339
      88:	00003339 	.word	0x00003339
      8c:	00003339 	.word	0x00003339
      90:	00003339 	.word	0x00003339
      94:	00003339 	.word	0x00003339
      98:	00003339 	.word	0x00003339
      9c:	00003339 	.word	0x00003339
      a0:	00003339 	.word	0x00003339
      a4:	00003339 	.word	0x00003339
      a8:	00003339 	.word	0x00003339
      ac:	00003339 	.word	0x00003339
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000f8 	.word	0x200000f8
      d4:	00000000 	.word	0x00000000
      d8:	0000388c 	.word	0x0000388c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000fc 	.word	0x200000fc
     108:	0000388c 	.word	0x0000388c
     10c:	0000388c 	.word	0x0000388c
     110:	00000000 	.word	0x00000000

00000114 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
     114:	b510      	push	{r4, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
     116:	490f      	ldr	r1, [pc, #60]	; (154 <udi_cdc_comm_enable+0x40>)
     118:	2200      	movs	r2, #0
     11a:	700a      	strb	r2, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
     11c:	2000      	movs	r0, #0
     11e:	4b0e      	ldr	r3, [pc, #56]	; (158 <udi_cdc_comm_enable+0x44>)
     120:	801a      	strh	r2, [r3, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
     122:	4b0e      	ldr	r3, [pc, #56]	; (15c <udi_cdc_comm_enable+0x48>)
     124:	24a1      	movs	r4, #161	; 0xa1
     126:	701c      	strb	r4, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     128:	3c81      	subs	r4, #129	; 0x81
     12a:	705c      	strb	r4, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     12c:	805a      	strh	r2, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     12e:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     130:	3c1e      	subs	r4, #30
     132:	80dc      	strh	r4, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     134:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     136:	4b0a      	ldr	r3, [pc, #40]	; (160 <udi_cdc_comm_enable+0x4c>)
     138:	22e1      	movs	r2, #225	; 0xe1
     13a:	0252      	lsls	r2, r2, #9
     13c:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     13e:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     140:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     142:	2208      	movs	r2, #8
     144:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
     146:	780b      	ldrb	r3, [r1, #0]
     148:	3301      	adds	r3, #1
     14a:	b2db      	uxtb	r3, r3
     14c:	700b      	strb	r3, [r1, #0]
	return true;
}
     14e:	2001      	movs	r0, #1
     150:	bd10      	pop	{r4, pc}
     152:	46c0      	nop			; (mov r8, r8)
     154:	200001a8 	.word	0x200001a8
     158:	20000254 	.word	0x20000254
     15c:	200001c0 	.word	0x200001c0
     160:	20000114 	.word	0x20000114

00000164 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     164:	4a02      	ldr	r2, [pc, #8]	; (170 <udi_cdc_comm_disable+0xc>)
     166:	7813      	ldrb	r3, [r2, #0]
     168:	3b01      	subs	r3, #1
     16a:	b2db      	uxtb	r3, r3
     16c:	7013      	strb	r3, [r2, #0]
}
     16e:	4770      	bx	lr
     170:	200001a8 	.word	0x200001a8

00000174 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
     174:	4a04      	ldr	r2, [pc, #16]	; (188 <udi_cdc_data_disable+0x14>)
     176:	7813      	ldrb	r3, [r2, #0]
     178:	3b01      	subs	r3, #1
     17a:	b2db      	uxtb	r3, r3
     17c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     17e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
     180:	2200      	movs	r2, #0
     182:	4b02      	ldr	r3, [pc, #8]	; (18c <udi_cdc_data_disable+0x18>)
     184:	701a      	strb	r2, [r3, #0]
}
     186:	4770      	bx	lr
     188:	2000011b 	.word	0x2000011b
     18c:	200001b4 	.word	0x200001b4

00000190 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     190:	2000      	movs	r0, #0
     192:	4770      	bx	lr

00000194 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     194:	2000      	movs	r0, #0
     196:	4770      	bx	lr

00000198 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
     198:	4b1a      	ldr	r3, [pc, #104]	; (204 <udi_cdc_comm_setup+0x6c>)
     19a:	781b      	ldrb	r3, [r3, #0]
     19c:	b25a      	sxtb	r2, r3
     19e:	2a00      	cmp	r2, #0
     1a0:	da13      	bge.n	1ca <udi_cdc_comm_setup+0x32>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     1a2:	2260      	movs	r2, #96	; 0x60
     1a4:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     1a6:	2000      	movs	r0, #0
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     1a8:	2b20      	cmp	r3, #32
     1aa:	d12a      	bne.n	202 <udi_cdc_comm_setup+0x6a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     1ac:	4b15      	ldr	r3, [pc, #84]	; (204 <udi_cdc_comm_setup+0x6c>)
     1ae:	785b      	ldrb	r3, [r3, #1]
     1b0:	2b21      	cmp	r3, #33	; 0x21
     1b2:	d125      	bne.n	200 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     1b4:	4b13      	ldr	r3, [pc, #76]	; (204 <udi_cdc_comm_setup+0x6c>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     1b6:	88db      	ldrh	r3, [r3, #6]
     1b8:	2b07      	cmp	r3, #7
     1ba:	d122      	bne.n	202 <udi_cdc_comm_setup+0x6a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
     1bc:	4b11      	ldr	r3, [pc, #68]	; (204 <udi_cdc_comm_setup+0x6c>)
     1be:	4a12      	ldr	r2, [pc, #72]	; (208 <udi_cdc_comm_setup+0x70>)
     1c0:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     1c2:	2207      	movs	r2, #7
     1c4:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     1c6:	3001      	adds	r0, #1
     1c8:	e01b      	b.n	202 <udi_cdc_comm_setup+0x6a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     1ca:	2260      	movs	r2, #96	; 0x60
     1cc:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     1ce:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     1d0:	2b20      	cmp	r3, #32
     1d2:	d116      	bne.n	202 <udi_cdc_comm_setup+0x6a>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     1d4:	4b0b      	ldr	r3, [pc, #44]	; (204 <udi_cdc_comm_setup+0x6c>)
     1d6:	7858      	ldrb	r0, [r3, #1]
     1d8:	2820      	cmp	r0, #32
     1da:	d003      	beq.n	1e4 <udi_cdc_comm_setup+0x4c>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     1dc:	3822      	subs	r0, #34	; 0x22
     1de:	4243      	negs	r3, r0
     1e0:	4158      	adcs	r0, r3
     1e2:	e00e      	b.n	202 <udi_cdc_comm_setup+0x6a>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     1e4:	4b07      	ldr	r3, [pc, #28]	; (204 <udi_cdc_comm_setup+0x6c>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     1e6:	88db      	ldrh	r3, [r3, #6]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     1e8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     1ea:	2b07      	cmp	r3, #7
     1ec:	d109      	bne.n	202 <udi_cdc_comm_setup+0x6a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
     1ee:	4b05      	ldr	r3, [pc, #20]	; (204 <udi_cdc_comm_setup+0x6c>)
     1f0:	4a06      	ldr	r2, [pc, #24]	; (20c <udi_cdc_comm_setup+0x74>)
     1f2:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
     1f4:	4a04      	ldr	r2, [pc, #16]	; (208 <udi_cdc_comm_setup+0x70>)
     1f6:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     1f8:	2207      	movs	r2, #7
     1fa:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     1fc:	3001      	adds	r0, #1
     1fe:	e000      	b.n	202 <udi_cdc_comm_setup+0x6a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     200:	2000      	movs	r0, #0
}
     202:	4770      	bx	lr
     204:	20000598 	.word	0x20000598
     208:	20000114 	.word	0x20000114
     20c:	00000211 	.word	0x00000211

00000210 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
     210:	4770      	bx	lr
     212:	46c0      	nop			; (mov r8, r8)

00000214 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     214:	b530      	push	{r4, r5, lr}
     216:	b085      	sub	sp, #20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     218:	4b45      	ldr	r3, [pc, #276]	; (330 <udi_cdc_tx_send+0x11c>)
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	2b00      	cmp	r3, #0
     21e:	d000      	beq.n	222 <udi_cdc_tx_send+0xe>
     220:	e084      	b.n	32c <udi_cdc_tx_send+0x118>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
     222:	4b44      	ldr	r3, [pc, #272]	; (334 <udi_cdc_tx_send+0x120>)
     224:	4798      	blx	r3
     226:	2800      	cmp	r0, #0
     228:	d006      	beq.n	238 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     22a:	4b43      	ldr	r3, [pc, #268]	; (338 <udi_cdc_tx_send+0x124>)
     22c:	881c      	ldrh	r4, [r3, #0]
     22e:	4b43      	ldr	r3, [pc, #268]	; (33c <udi_cdc_tx_send+0x128>)
     230:	4798      	blx	r3
     232:	4284      	cmp	r4, r0
     234:	d106      	bne.n	244 <udi_cdc_tx_send+0x30>
     236:	e079      	b.n	32c <udi_cdc_tx_send+0x118>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     238:	4b3f      	ldr	r3, [pc, #252]	; (338 <udi_cdc_tx_send+0x124>)
     23a:	881c      	ldrh	r4, [r3, #0]
     23c:	4b40      	ldr	r3, [pc, #256]	; (340 <udi_cdc_tx_send+0x12c>)
     23e:	4798      	blx	r3
     240:	4284      	cmp	r4, r0
     242:	d073      	beq.n	32c <udi_cdc_tx_send+0x118>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     244:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     248:	425a      	negs	r2, r3
     24a:	4153      	adcs	r3, r2
     24c:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     24e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     254:	2200      	movs	r2, #0
     256:	4b3b      	ldr	r3, [pc, #236]	; (344 <udi_cdc_tx_send+0x130>)
     258:	701a      	strb	r2, [r3, #0]
	return flags;
     25a:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     25c:	4b3a      	ldr	r3, [pc, #232]	; (348 <udi_cdc_tx_send+0x134>)
     25e:	781c      	ldrb	r4, [r3, #0]
     260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     262:	0062      	lsls	r2, r4, #1
     264:	4b39      	ldr	r3, [pc, #228]	; (34c <udi_cdc_tx_send+0x138>)
     266:	5ad3      	ldrh	r3, [r2, r3]
     268:	2b00      	cmp	r3, #0
     26a:	d11d      	bne.n	2a8 <udi_cdc_tx_send+0x94>
		sof_zlp_counter++;
     26c:	4a38      	ldr	r2, [pc, #224]	; (350 <udi_cdc_tx_send+0x13c>)
     26e:	8813      	ldrh	r3, [r2, #0]
     270:	3301      	adds	r3, #1
     272:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     274:	4b2f      	ldr	r3, [pc, #188]	; (334 <udi_cdc_tx_send+0x120>)
     276:	4798      	blx	r3
     278:	2800      	cmp	r0, #0
     27a:	d103      	bne.n	284 <udi_cdc_tx_send+0x70>
     27c:	4b34      	ldr	r3, [pc, #208]	; (350 <udi_cdc_tx_send+0x13c>)
     27e:	881b      	ldrh	r3, [r3, #0]
     280:	2b63      	cmp	r3, #99	; 0x63
     282:	d908      	bls.n	296 <udi_cdc_tx_send+0x82>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     284:	4b2b      	ldr	r3, [pc, #172]	; (334 <udi_cdc_tx_send+0x120>)
     286:	4798      	blx	r3
     288:	2800      	cmp	r0, #0
     28a:	d00d      	beq.n	2a8 <udi_cdc_tx_send+0x94>
     28c:	4b30      	ldr	r3, [pc, #192]	; (350 <udi_cdc_tx_send+0x13c>)
     28e:	881a      	ldrh	r2, [r3, #0]
     290:	4b30      	ldr	r3, [pc, #192]	; (354 <udi_cdc_tx_send+0x140>)
     292:	429a      	cmp	r2, r3
     294:	d808      	bhi.n	2a8 <udi_cdc_tx_send+0x94>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     296:	2d00      	cmp	r5, #0
     298:	d048      	beq.n	32c <udi_cdc_tx_send+0x118>
		cpu_irq_enable();
     29a:	2201      	movs	r2, #1
     29c:	4b29      	ldr	r3, [pc, #164]	; (344 <udi_cdc_tx_send+0x130>)
     29e:	701a      	strb	r2, [r3, #0]
     2a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2a4:	b662      	cpsie	i
     2a6:	e041      	b.n	32c <udi_cdc_tx_send+0x118>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
     2a8:	2200      	movs	r2, #0
     2aa:	4b29      	ldr	r3, [pc, #164]	; (350 <udi_cdc_tx_send+0x13c>)
     2ac:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
     2ae:	4b2a      	ldr	r3, [pc, #168]	; (358 <udi_cdc_tx_send+0x144>)
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d105      	bne.n	2c2 <udi_cdc_tx_send+0xae>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     2b6:	4263      	negs	r3, r4
     2b8:	4163      	adcs	r3, r4
     2ba:	b2db      	uxtb	r3, r3
     2bc:	4a22      	ldr	r2, [pc, #136]	; (348 <udi_cdc_tx_send+0x134>)
     2be:	7013      	strb	r3, [r2, #0]
     2c0:	e002      	b.n	2c8 <udi_cdc_tx_send+0xb4>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     2c2:	4263      	negs	r3, r4
     2c4:	415c      	adcs	r4, r3
     2c6:	b2e4      	uxtb	r4, r4
	}
	udi_cdc_tx_trans_ongoing[port] = true;
     2c8:	2201      	movs	r2, #1
     2ca:	4b19      	ldr	r3, [pc, #100]	; (330 <udi_cdc_tx_send+0x11c>)
     2cc:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     2ce:	2d00      	cmp	r5, #0
     2d0:	d004      	beq.n	2dc <udi_cdc_tx_send+0xc8>
		cpu_irq_enable();
     2d2:	4b1c      	ldr	r3, [pc, #112]	; (344 <udi_cdc_tx_send+0x130>)
     2d4:	701a      	strb	r2, [r3, #0]
     2d6:	f3bf 8f5f 	dmb	sy
     2da:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     2dc:	0025      	movs	r5, r4
     2de:	0064      	lsls	r4, r4, #1
     2e0:	4b1a      	ldr	r3, [pc, #104]	; (34c <udi_cdc_tx_send+0x138>)
     2e2:	5ae3      	ldrh	r3, [r4, r3]
     2e4:	0019      	movs	r1, r3
     2e6:	3940      	subs	r1, #64	; 0x40
     2e8:	1e4a      	subs	r2, r1, #1
     2ea:	4191      	sbcs	r1, r2
     2ec:	b2cc      	uxtb	r4, r1
	if (b_short_packet) {
     2ee:	2b40      	cmp	r3, #64	; 0x40
     2f0:	d00d      	beq.n	30e <udi_cdc_tx_send+0xfa>
		if (udd_is_high_speed()) {
     2f2:	4b10      	ldr	r3, [pc, #64]	; (334 <udi_cdc_tx_send+0x120>)
     2f4:	4798      	blx	r3
     2f6:	2800      	cmp	r0, #0
     2f8:	d004      	beq.n	304 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     2fa:	4b10      	ldr	r3, [pc, #64]	; (33c <udi_cdc_tx_send+0x128>)
     2fc:	4798      	blx	r3
     2fe:	4b0e      	ldr	r3, [pc, #56]	; (338 <udi_cdc_tx_send+0x124>)
     300:	8018      	strh	r0, [r3, #0]
     302:	e007      	b.n	314 <udi_cdc_tx_send+0x100>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     304:	4b0e      	ldr	r3, [pc, #56]	; (340 <udi_cdc_tx_send+0x12c>)
     306:	4798      	blx	r3
     308:	4b0b      	ldr	r3, [pc, #44]	; (338 <udi_cdc_tx_send+0x124>)
     30a:	8018      	strh	r0, [r3, #0]
     30c:	e002      	b.n	314 <udi_cdc_tx_send+0x100>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     30e:	2200      	movs	r2, #0
     310:	4b09      	ldr	r3, [pc, #36]	; (338 <udi_cdc_tx_send+0x124>)
     312:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     314:	006a      	lsls	r2, r5, #1
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
     316:	4b0d      	ldr	r3, [pc, #52]	; (34c <udi_cdc_tx_send+0x138>)
     318:	5ad3      	ldrh	r3, [r2, r3]
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
     31a:	01aa      	lsls	r2, r5, #6
     31c:	490f      	ldr	r1, [pc, #60]	; (35c <udi_cdc_tx_send+0x148>)
     31e:	188a      	adds	r2, r1, r2
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
     320:	490f      	ldr	r1, [pc, #60]	; (360 <udi_cdc_tx_send+0x14c>)
     322:	9100      	str	r1, [sp, #0]
     324:	0021      	movs	r1, r4
     326:	2081      	movs	r0, #129	; 0x81
     328:	4c0e      	ldr	r4, [pc, #56]	; (364 <udi_cdc_tx_send+0x150>)
     32a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     32c:	b005      	add	sp, #20
     32e:	bd30      	pop	{r4, r5, pc}
     330:	200001bc 	.word	0x200001bc
     334:	00001511 	.word	0x00001511
     338:	200001b0 	.word	0x200001b0
     33c:	00001525 	.word	0x00001525
     340:	00001515 	.word	0x00001515
     344:	200000f4 	.word	0x200000f4
     348:	2000011c 	.word	0x2000011c
     34c:	20000120 	.word	0x20000120
     350:	200001b2 	.word	0x200001b2
     354:	0000031f 	.word	0x0000031f
     358:	20000250 	.word	0x20000250
     35c:	20000124 	.word	0x20000124
     360:	00000369 	.word	0x00000369
     364:	00001819 	.word	0x00001819

00000368 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     368:	b510      	push	{r4, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     36a:	2800      	cmp	r0, #0
     36c:	d10d      	bne.n	38a <udi_cdc_data_sent+0x22>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     36e:	4b07      	ldr	r3, [pc, #28]	; (38c <udi_cdc_data_sent+0x24>)
     370:	781b      	ldrb	r3, [r3, #0]
     372:	425a      	negs	r2, r3
     374:	4153      	adcs	r3, r2
     376:	005b      	lsls	r3, r3, #1
     378:	2200      	movs	r2, #0
     37a:	4905      	ldr	r1, [pc, #20]	; (390 <udi_cdc_data_sent+0x28>)
     37c:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <udi_cdc_data_sent+0x2c>)
     380:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     382:	4b05      	ldr	r3, [pc, #20]	; (398 <udi_cdc_data_sent+0x30>)
     384:	701a      	strb	r2, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
     386:	4b05      	ldr	r3, [pc, #20]	; (39c <udi_cdc_data_sent+0x34>)
     388:	4798      	blx	r3
}
     38a:	bd10      	pop	{r4, pc}
     38c:	2000011c 	.word	0x2000011c
     390:	20000120 	.word	0x20000120
     394:	20000250 	.word	0x20000250
     398:	200001bc 	.word	0x200001bc
     39c:	00000215 	.word	0x00000215

000003a0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
     3a0:	b510      	push	{r4, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
     3a2:	2000      	movs	r0, #0
     3a4:	4b01      	ldr	r3, [pc, #4]	; (3ac <udi_cdc_data_sof_notify+0xc>)
     3a6:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
     3a8:	bd10      	pop	{r4, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	00000215 	.word	0x00000215

000003b0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     3b0:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     3b2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     3b6:	425a      	negs	r2, r3
     3b8:	4153      	adcs	r3, r2
     3ba:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     3bc:	b672      	cpsid	i
     3be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     3c2:	2200      	movs	r2, #0
     3c4:	4b0a      	ldr	r3, [pc, #40]	; (3f0 <udi_cdc_multi_get_nb_received_data+0x40>)
     3c6:	701a      	strb	r2, [r3, #0]
	return flags;
     3c8:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     3ca:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <udi_cdc_multi_get_nb_received_data+0x44>)
     3cc:	8818      	ldrh	r0, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     3ce:	4b0a      	ldr	r3, [pc, #40]	; (3f8 <udi_cdc_multi_get_nb_received_data+0x48>)
     3d0:	781b      	ldrb	r3, [r3, #0]
     3d2:	005b      	lsls	r3, r3, #1
     3d4:	4909      	ldr	r1, [pc, #36]	; (3fc <udi_cdc_multi_get_nb_received_data+0x4c>)
     3d6:	5a5b      	ldrh	r3, [r3, r1]
     3d8:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     3da:	2a00      	cmp	r2, #0
     3dc:	d005      	beq.n	3ea <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     3de:	2201      	movs	r2, #1
     3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <udi_cdc_multi_get_nb_received_data+0x40>)
     3e2:	701a      	strb	r2, [r3, #0]
     3e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     3e8:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     3ea:	b002      	add	sp, #8
     3ec:	4770      	bx	lr
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	200000f4 	.word	0x200000f4
     3f4:	200001ac 	.word	0x200001ac
     3f8:	200001b8 	.word	0x200001b8
     3fc:	200001a4 	.word	0x200001a4

00000400 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     400:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     402:	4b03      	ldr	r3, [pc, #12]	; (410 <udi_cdc_multi_is_rx_ready+0x10>)
     404:	4798      	blx	r3
     406:	1e43      	subs	r3, r0, #1
     408:	4198      	sbcs	r0, r3
     40a:	b2c0      	uxtb	r0, r0
}
     40c:	bd10      	pop	{r4, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	000003b1 	.word	0x000003b1

00000414 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     414:	b510      	push	{r4, lr}
     416:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     418:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     41c:	425a      	negs	r2, r3
     41e:	4153      	adcs	r3, r2
     420:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     422:	b672      	cpsid	i
     424:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     428:	2200      	movs	r2, #0
     42a:	4b1f      	ldr	r3, [pc, #124]	; (4a8 <udi_cdc_rx_start+0x94>)
     42c:	701a      	strb	r2, [r3, #0]
	return flags;
     42e:	9b03      	ldr	r3, [sp, #12]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     430:	4a1e      	ldr	r2, [pc, #120]	; (4ac <udi_cdc_rx_start+0x98>)
     432:	7814      	ldrb	r4, [r2, #0]
     434:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     436:	4a1e      	ldr	r2, [pc, #120]	; (4b0 <udi_cdc_rx_start+0x9c>)
     438:	7812      	ldrb	r2, [r2, #0]
     43a:	2a00      	cmp	r2, #0
     43c:	d107      	bne.n	44e <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     43e:	4a1d      	ldr	r2, [pc, #116]	; (4b4 <udi_cdc_rx_start+0xa0>)
     440:	8812      	ldrh	r2, [r2, #0]
     442:	0061      	lsls	r1, r4, #1
     444:	481c      	ldr	r0, [pc, #112]	; (4b8 <udi_cdc_rx_start+0xa4>)
     446:	5a09      	ldrh	r1, [r1, r0]
     448:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     44a:	428a      	cmp	r2, r1
     44c:	d209      	bcs.n	462 <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     44e:	2000      	movs	r0, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     450:	2b00      	cmp	r3, #0
     452:	d026      	beq.n	4a2 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
     454:	2201      	movs	r2, #1
     456:	4b14      	ldr	r3, [pc, #80]	; (4a8 <udi_cdc_rx_start+0x94>)
     458:	701a      	strb	r2, [r3, #0]
     45a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     45e:	b662      	cpsie	i
     460:	e01f      	b.n	4a2 <udi_cdc_rx_start+0x8e>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     462:	2100      	movs	r1, #0
     464:	4a13      	ldr	r2, [pc, #76]	; (4b4 <udi_cdc_rx_start+0xa0>)
     466:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     468:	4262      	negs	r2, r4
     46a:	4162      	adcs	r2, r4
     46c:	b2d2      	uxtb	r2, r2
     46e:	490f      	ldr	r1, [pc, #60]	; (4ac <udi_cdc_rx_start+0x98>)
     470:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     472:	2101      	movs	r1, #1
     474:	4a0e      	ldr	r2, [pc, #56]	; (4b0 <udi_cdc_rx_start+0x9c>)
     476:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     478:	2b00      	cmp	r3, #0
     47a:	d005      	beq.n	488 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
     47c:	2201      	movs	r2, #1
     47e:	4b0a      	ldr	r3, [pc, #40]	; (4a8 <udi_cdc_rx_start+0x94>)
     480:	701a      	strb	r2, [r3, #0]
     482:	f3bf 8f5f 	dmb	sy
     486:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     488:	2000      	movs	r0, #0
     48a:	4b0c      	ldr	r3, [pc, #48]	; (4bc <udi_cdc_rx_start+0xa8>)
     48c:	4798      	blx	r3
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     48e:	01a4      	lsls	r4, r4, #6
     490:	4a0b      	ldr	r2, [pc, #44]	; (4c0 <udi_cdc_rx_start+0xac>)
     492:	1912      	adds	r2, r2, r4
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     494:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <udi_cdc_rx_start+0xb0>)
     496:	9300      	str	r3, [sp, #0]
     498:	2340      	movs	r3, #64	; 0x40
     49a:	2101      	movs	r1, #1
     49c:	2002      	movs	r0, #2
     49e:	4c0a      	ldr	r4, [pc, #40]	; (4c8 <udi_cdc_rx_start+0xb4>)
     4a0:	47a0      	blx	r4
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     4a2:	b004      	add	sp, #16
     4a4:	bd10      	pop	{r4, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	200000f4 	.word	0x200000f4
     4ac:	200001b8 	.word	0x200001b8
     4b0:	2000024c 	.word	0x2000024c
     4b4:	200001ac 	.word	0x200001ac
     4b8:	200001a4 	.word	0x200001a4
     4bc:	00000401 	.word	0x00000401
     4c0:	200001cc 	.word	0x200001cc
     4c4:	0000055d 	.word	0x0000055d
     4c8:	00001819 	.word	0x00001819

000004cc <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
     4cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     4ce:	2400      	movs	r4, #0
     4d0:	4b15      	ldr	r3, [pc, #84]	; (528 <udi_cdc_data_enable+0x5c>)
     4d2:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     4d4:	4b15      	ldr	r3, [pc, #84]	; (52c <udi_cdc_data_enable+0x60>)
     4d6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     4d8:	4b15      	ldr	r3, [pc, #84]	; (530 <udi_cdc_data_enable+0x64>)
     4da:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     4dc:	4b15      	ldr	r3, [pc, #84]	; (534 <udi_cdc_data_enable+0x68>)
     4de:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     4e0:	4b15      	ldr	r3, [pc, #84]	; (538 <udi_cdc_data_enable+0x6c>)
     4e2:	2500      	movs	r5, #0
     4e4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     4e6:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     4e8:	4b14      	ldr	r3, [pc, #80]	; (53c <udi_cdc_data_enable+0x70>)
     4ea:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     4ec:	2000      	movs	r0, #0
     4ee:	4b14      	ldr	r3, [pc, #80]	; (540 <udi_cdc_data_enable+0x74>)
     4f0:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     4f2:	4b14      	ldr	r3, [pc, #80]	; (544 <udi_cdc_data_enable+0x78>)
     4f4:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     4f6:	4b14      	ldr	r3, [pc, #80]	; (548 <udi_cdc_data_enable+0x7c>)
     4f8:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     4fa:	4b14      	ldr	r3, [pc, #80]	; (54c <udi_cdc_data_enable+0x80>)
     4fc:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     4fe:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     500:	4b13      	ldr	r3, [pc, #76]	; (550 <udi_cdc_data_enable+0x84>)
     502:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     504:	2000      	movs	r0, #0
     506:	4b13      	ldr	r3, [pc, #76]	; (554 <udi_cdc_data_enable+0x88>)
     508:	4798      	blx	r3
     50a:	2800      	cmp	r0, #0
     50c:	d00a      	beq.n	524 <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     50e:	4a06      	ldr	r2, [pc, #24]	; (528 <udi_cdc_data_enable+0x5c>)
     510:	7813      	ldrb	r3, [r2, #0]
     512:	3301      	adds	r3, #1
     514:	b2db      	uxtb	r3, r3
     516:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     518:	7813      	ldrb	r3, [r2, #0]
     51a:	2b01      	cmp	r3, #1
     51c:	d102      	bne.n	524 <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
     51e:	2201      	movs	r2, #1
     520:	4b0d      	ldr	r3, [pc, #52]	; (558 <udi_cdc_data_enable+0x8c>)
     522:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
     524:	bd70      	pop	{r4, r5, r6, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	2000011b 	.word	0x2000011b
     52c:	200001bc 	.word	0x200001bc
     530:	20000250 	.word	0x20000250
     534:	2000011c 	.word	0x2000011c
     538:	20000120 	.word	0x20000120
     53c:	200001b0 	.word	0x200001b0
     540:	00000215 	.word	0x00000215
     544:	2000024c 	.word	0x2000024c
     548:	200001b8 	.word	0x200001b8
     54c:	200001a4 	.word	0x200001a4
     550:	200001ac 	.word	0x200001ac
     554:	00000415 	.word	0x00000415
     558:	200001b4 	.word	0x200001b4

0000055c <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     55c:	b510      	push	{r4, lr}
     55e:	b082      	sub	sp, #8
     560:	0014      	movs	r4, r2
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     562:	2800      	cmp	r0, #0
     564:	d11b      	bne.n	59e <udi_cdc_data_received+0x42>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     566:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <udi_cdc_data_received+0x48>)
     568:	781a      	ldrb	r2, [r3, #0]
     56a:	4253      	negs	r3, r2
     56c:	415a      	adcs	r2, r3
     56e:	b2d2      	uxtb	r2, r2
	if (!n) {
     570:	2900      	cmp	r1, #0
     572:	d10a      	bne.n	58a <udi_cdc_data_received+0x2e>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     574:	0192      	lsls	r2, r2, #6
     576:	4b0c      	ldr	r3, [pc, #48]	; (5a8 <udi_cdc_data_received+0x4c>)
     578:	189a      	adds	r2, r3, r2
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     57a:	4b0c      	ldr	r3, [pc, #48]	; (5ac <udi_cdc_data_received+0x50>)
     57c:	9300      	str	r3, [sp, #0]
     57e:	2340      	movs	r3, #64	; 0x40
     580:	3101      	adds	r1, #1
     582:	0020      	movs	r0, r4
     584:	4c0a      	ldr	r4, [pc, #40]	; (5b0 <udi_cdc_data_received+0x54>)
     586:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     588:	e009      	b.n	59e <udi_cdc_data_received+0x42>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     58a:	b289      	uxth	r1, r1
     58c:	0052      	lsls	r2, r2, #1
     58e:	4b09      	ldr	r3, [pc, #36]	; (5b4 <udi_cdc_data_received+0x58>)
     590:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     592:	2200      	movs	r2, #0
     594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <udi_cdc_data_received+0x5c>)
     596:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     598:	2000      	movs	r0, #0
     59a:	4b08      	ldr	r3, [pc, #32]	; (5bc <udi_cdc_data_received+0x60>)
     59c:	4798      	blx	r3
}
     59e:	b002      	add	sp, #8
     5a0:	bd10      	pop	{r4, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	200001b8 	.word	0x200001b8
     5a8:	200001cc 	.word	0x200001cc
     5ac:	0000055d 	.word	0x0000055d
     5b0:	00001819 	.word	0x00001819
     5b4:	200001a4 	.word	0x200001a4
     5b8:	2000024c 	.word	0x2000024c
     5bc:	00000415 	.word	0x00000415

000005c0 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     5c0:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5c2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     5c6:	425a      	negs	r2, r3
     5c8:	4153      	adcs	r3, r2
     5ca:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     5cc:	b672      	cpsid	i
     5ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     5d2:	2200      	movs	r2, #0
     5d4:	4b13      	ldr	r3, [pc, #76]	; (624 <udi_cdc_multi_get_free_tx_buffer+0x64>)
     5d6:	701a      	strb	r2, [r3, #0]
	return flags;
     5d8:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     5da:	4b13      	ldr	r3, [pc, #76]	; (628 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     5dc:	781b      	ldrb	r3, [r3, #0]
     5de:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     5e0:	0058      	lsls	r0, r3, #1
     5e2:	4912      	ldr	r1, [pc, #72]	; (62c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     5e4:	5a40      	ldrh	r0, [r0, r1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     5e6:	2840      	cmp	r0, #64	; 0x40
     5e8:	d110      	bne.n	60c <udi_cdc_multi_get_free_tx_buffer+0x4c>
		if ((!udi_cdc_tx_trans_ongoing[port])
     5ea:	4911      	ldr	r1, [pc, #68]	; (630 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     5ec:	7809      	ldrb	r1, [r1, #0]
     5ee:	2900      	cmp	r1, #0
     5f0:	d10c      	bne.n	60c <udi_cdc_multi_get_free_tx_buffer+0x4c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     5f2:	4910      	ldr	r1, [pc, #64]	; (634 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     5f4:	7809      	ldrb	r1, [r1, #0]
     5f6:	2900      	cmp	r1, #0
     5f8:	d108      	bne.n	60c <udi_cdc_multi_get_free_tx_buffer+0x4c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
     5fa:	383f      	subs	r0, #63	; 0x3f
     5fc:	490d      	ldr	r1, [pc, #52]	; (634 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     5fe:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     600:	4259      	negs	r1, r3
     602:	414b      	adcs	r3, r1
     604:	b2db      	uxtb	r3, r3
     606:	4908      	ldr	r1, [pc, #32]	; (628 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     608:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
     60a:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     60c:	2340      	movs	r3, #64	; 0x40
     60e:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     610:	2a00      	cmp	r2, #0
     612:	d005      	beq.n	620 <udi_cdc_multi_get_free_tx_buffer+0x60>
		cpu_irq_enable();
     614:	2201      	movs	r2, #1
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <udi_cdc_multi_get_free_tx_buffer+0x64>)
     618:	701a      	strb	r2, [r3, #0]
     61a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     61e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     620:	b002      	add	sp, #8
     622:	4770      	bx	lr
     624:	200000f4 	.word	0x200000f4
     628:	2000011c 	.word	0x2000011c
     62c:	20000120 	.word	0x20000120
     630:	200001bc 	.word	0x200001bc
     634:	20000250 	.word	0x20000250

00000638 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     638:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     63a:	4b03      	ldr	r3, [pc, #12]	; (648 <udi_cdc_multi_is_tx_ready+0x10>)
     63c:	4798      	blx	r3
     63e:	1e43      	subs	r3, r0, #1
     640:	4198      	sbcs	r0, r3
     642:	b2c0      	uxtb	r0, r0
}
     644:	bd10      	pop	{r4, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	000005c1 	.word	0x000005c1

0000064c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     64c:	b5f0      	push	{r4, r5, r6, r7, lr}
     64e:	465f      	mov	r7, fp
     650:	4656      	mov	r6, sl
     652:	464d      	mov	r5, r9
     654:	4644      	mov	r4, r8
     656:	b4f0      	push	{r4, r5, r6, r7}
     658:	b083      	sub	sp, #12
     65a:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     65c:	4b21      	ldr	r3, [pc, #132]	; (6e4 <udi_cdc_multi_putc+0x98>)
     65e:	799d      	ldrb	r5, [r3, #6]
     660:	3d09      	subs	r5, #9
     662:	426b      	negs	r3, r5
     664:	415d      	adcs	r5, r3
     666:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     668:	4b1f      	ldr	r3, [pc, #124]	; (6e8 <udi_cdc_multi_putc+0x9c>)
     66a:	469b      	mov	fp, r3
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     66c:	4b1f      	ldr	r3, [pc, #124]	; (6ec <udi_cdc_multi_putc+0xa0>)
     66e:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     670:	4b1f      	ldr	r3, [pc, #124]	; (6f0 <udi_cdc_multi_putc+0xa4>)
     672:	469a      	mov	sl, r3

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     674:	2000      	movs	r0, #0
     676:	47d8      	blx	fp
     678:	2800      	cmp	r0, #0
     67a:	d104      	bne.n	686 <udi_cdc_multi_putc+0x3a>
		if (!udi_cdc_data_running) {
     67c:	4b1d      	ldr	r3, [pc, #116]	; (6f4 <udi_cdc_multi_putc+0xa8>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	d1f7      	bne.n	674 <udi_cdc_multi_putc+0x28>
     684:	e027      	b.n	6d6 <udi_cdc_multi_putc+0x8a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     686:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     68a:	425a      	negs	r2, r3
     68c:	4153      	adcs	r3, r2
     68e:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     690:	b672      	cpsid	i
     692:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     696:	2300      	movs	r3, #0
     698:	4642      	mov	r2, r8
     69a:	7013      	strb	r3, [r2, #0]
	return flags;
     69c:	9f01      	ldr	r7, [sp, #4]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     69e:	4653      	mov	r3, sl
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     6a4:	4a14      	ldr	r2, [pc, #80]	; (6f8 <udi_cdc_multi_putc+0xac>)
     6a6:	4694      	mov	ip, r2
     6a8:	0058      	lsls	r0, r3, #1
     6aa:	5a82      	ldrh	r2, [r0, r2]
     6ac:	1c51      	adds	r1, r2, #1
     6ae:	4666      	mov	r6, ip
     6b0:	5381      	strh	r1, [r0, r6]
     6b2:	019b      	lsls	r3, r3, #6
     6b4:	4911      	ldr	r1, [pc, #68]	; (6fc <udi_cdc_multi_putc+0xb0>)
     6b6:	18cb      	adds	r3, r1, r3
     6b8:	549c      	strb	r4, [r3, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6ba:	2f00      	cmp	r7, #0
     6bc:	d005      	beq.n	6ca <udi_cdc_multi_putc+0x7e>
		cpu_irq_enable();
     6be:	2201      	movs	r2, #1
     6c0:	4b0a      	ldr	r3, [pc, #40]	; (6ec <udi_cdc_multi_putc+0xa0>)
     6c2:	701a      	strb	r2, [r3, #0]
     6c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6c8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     6ca:	2d00      	cmp	r5, #0
     6cc:	d002      	beq.n	6d4 <udi_cdc_multi_putc+0x88>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     6ce:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     6d0:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     6d2:	e7cf      	b.n	674 <udi_cdc_multi_putc+0x28>
	}
	return true;
     6d4:	2001      	movs	r0, #1
}
     6d6:	b003      	add	sp, #12
     6d8:	bc3c      	pop	{r2, r3, r4, r5}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	46ab      	mov	fp, r5
     6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e4:	20000114 	.word	0x20000114
     6e8:	00000639 	.word	0x00000639
     6ec:	200000f4 	.word	0x200000f4
     6f0:	2000011c 	.word	0x2000011c
     6f4:	200001b4 	.word	0x200001b4
     6f8:	20000120 	.word	0x20000120
     6fc:	20000124 	.word	0x20000124

00000700 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     700:	b510      	push	{r4, lr}
     702:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     704:	2000      	movs	r0, #0
     706:	4b01      	ldr	r3, [pc, #4]	; (70c <udi_cdc_putc+0xc>)
     708:	4798      	blx	r3
}
     70a:	bd10      	pop	{r4, pc}
     70c:	0000064d 	.word	0x0000064d

00000710 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     710:	b510      	push	{r4, lr}
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     712:	4b11      	ldr	r3, [pc, #68]	; (758 <udc_next_desc_in_iface+0x48>)
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     714:	681b      	ldr	r3, [r3, #0]
     716:	681c      	ldr	r4, [r3, #0]
     718:	78a3      	ldrb	r3, [r4, #2]
     71a:	78e2      	ldrb	r2, [r4, #3]
     71c:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     71e:	431a      	orrs	r2, r3
     720:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     722:	7803      	ldrb	r3, [r0, #0]
     724:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     726:	4290      	cmp	r0, r2
     728:	d210      	bcs.n	74c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     72a:	7843      	ldrb	r3, [r0, #1]
     72c:	2b04      	cmp	r3, #4
     72e:	d00f      	beq.n	750 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     730:	428b      	cmp	r3, r1
     732:	d105      	bne.n	740 <udc_next_desc_in_iface+0x30>
     734:	e00f      	b.n	756 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     736:	7843      	ldrb	r3, [r0, #1]
     738:	2b04      	cmp	r3, #4
     73a:	d00b      	beq.n	754 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     73c:	428b      	cmp	r3, r1
     73e:	d00a      	beq.n	756 <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     740:	7803      	ldrb	r3, [r0, #0]
     742:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     744:	4290      	cmp	r0, r2
     746:	d3f6      	bcc.n	736 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     748:	2000      	movs	r0, #0
     74a:	e004      	b.n	756 <udc_next_desc_in_iface+0x46>
     74c:	2000      	movs	r0, #0
     74e:	e002      	b.n	756 <udc_next_desc_in_iface+0x46>
     750:	2000      	movs	r0, #0
     752:	e000      	b.n	756 <udc_next_desc_in_iface+0x46>
     754:	2000      	movs	r0, #0
}
     756:	bd10      	pop	{r4, pc}
     758:	20000258 	.word	0x20000258

0000075c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     75c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     75e:	4b03      	ldr	r3, [pc, #12]	; (76c <udc_valid_address+0x10>)
     760:	885b      	ldrh	r3, [r3, #2]
     762:	207f      	movs	r0, #127	; 0x7f
     764:	4018      	ands	r0, r3
     766:	4b02      	ldr	r3, [pc, #8]	; (770 <udc_valid_address+0x14>)
     768:	4798      	blx	r3
}
     76a:	bd10      	pop	{r4, pc}
     76c:	20000598 	.word	0x20000598
     770:	000019f1 	.word	0x000019f1

00000774 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     774:	b570      	push	{r4, r5, r6, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     776:	4b18      	ldr	r3, [pc, #96]	; (7d8 <udc_update_iface_desc+0x64>)
     778:	781b      	ldrb	r3, [r3, #0]
		return false;
     77a:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     77c:	2b00      	cmp	r3, #0
     77e:	d029      	beq.n	7d4 <udc_update_iface_desc+0x60>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     780:	4b16      	ldr	r3, [pc, #88]	; (7dc <udc_update_iface_desc+0x68>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	681b      	ldr	r3, [r3, #0]
     786:	791c      	ldrb	r4, [r3, #4]
     788:	4284      	cmp	r4, r0
     78a:	d923      	bls.n	7d4 <udc_update_iface_desc+0x60>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     78c:	4a14      	ldr	r2, [pc, #80]	; (7e0 <udc_update_iface_desc+0x6c>)
     78e:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     790:	789a      	ldrb	r2, [r3, #2]
     792:	78dc      	ldrb	r4, [r3, #3]
     794:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     796:	4314      	orrs	r4, r2
     798:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     79a:	42a3      	cmp	r3, r4
     79c:	d219      	bcs.n	7d2 <udc_update_iface_desc+0x5e>
     79e:	2500      	movs	r5, #0
     7a0:	2601      	movs	r6, #1
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     7a2:	785a      	ldrb	r2, [r3, #1]
     7a4:	2a04      	cmp	r2, #4
     7a6:	d10b      	bne.n	7c0 <udc_update_iface_desc+0x4c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     7a8:	789a      	ldrb	r2, [r3, #2]
     7aa:	4282      	cmp	r2, r0
     7ac:	d108      	bne.n	7c0 <udc_update_iface_desc+0x4c>
     7ae:	78da      	ldrb	r2, [r3, #3]
     7b0:	428a      	cmp	r2, r1
     7b2:	d105      	bne.n	7c0 <udc_update_iface_desc+0x4c>
     7b4:	2d00      	cmp	r5, #0
     7b6:	d001      	beq.n	7bc <udc_update_iface_desc+0x48>
     7b8:	4a09      	ldr	r2, [pc, #36]	; (7e0 <udc_update_iface_desc+0x6c>)
     7ba:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     7bc:	2201      	movs	r2, #1
     7be:	e009      	b.n	7d4 <udc_update_iface_desc+0x60>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     7c0:	781a      	ldrb	r2, [r3, #0]
     7c2:	189b      	adds	r3, r3, r2
     7c4:	0035      	movs	r5, r6
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     7c6:	42a3      	cmp	r3, r4
     7c8:	d3eb      	bcc.n	7a2 <udc_update_iface_desc+0x2e>
     7ca:	4a05      	ldr	r2, [pc, #20]	; (7e0 <udc_update_iface_desc+0x6c>)
     7cc:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     7ce:	2200      	movs	r2, #0
     7d0:	e000      	b.n	7d4 <udc_update_iface_desc+0x60>
     7d2:	2200      	movs	r2, #0
}
     7d4:	0010      	movs	r0, r2
     7d6:	bd70      	pop	{r4, r5, r6, pc}
     7d8:	20000260 	.word	0x20000260
     7dc:	20000258 	.word	0x20000258
     7e0:	20000264 	.word	0x20000264

000007e4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e6:	4647      	mov	r7, r8
     7e8:	b480      	push	{r7}
     7ea:	0004      	movs	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     7ec:	2100      	movs	r1, #0
     7ee:	4b12      	ldr	r3, [pc, #72]	; (838 <udc_iface_disable+0x54>)
     7f0:	4798      	blx	r3
     7f2:	1e05      	subs	r5, r0, #0
     7f4:	d01c      	beq.n	830 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     7f6:	4b11      	ldr	r3, [pc, #68]	; (83c <udc_iface_disable+0x58>)
     7f8:	681b      	ldr	r3, [r3, #0]
     7fa:	685b      	ldr	r3, [r3, #4]
     7fc:	00a2      	lsls	r2, r4, #2
     7fe:	58d3      	ldr	r3, [r2, r3]
     800:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     802:	68db      	ldr	r3, [r3, #12]
     804:	4798      	blx	r3
     806:	0001      	movs	r1, r0
     808:	0020      	movs	r0, r4
     80a:	4b0b      	ldr	r3, [pc, #44]	; (838 <udc_iface_disable+0x54>)
     80c:	4798      	blx	r3
     80e:	1e05      	subs	r5, r0, #0
     810:	d00e      	beq.n	830 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     812:	4b0b      	ldr	r3, [pc, #44]	; (840 <udc_iface_disable+0x5c>)
     814:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     816:	4e0b      	ldr	r6, [pc, #44]	; (844 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     818:	4f0b      	ldr	r7, [pc, #44]	; (848 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     81a:	2105      	movs	r1, #5
     81c:	0020      	movs	r0, r4
     81e:	47b0      	blx	r6
     820:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     822:	d002      	beq.n	82a <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     824:	7880      	ldrb	r0, [r0, #2]
     826:	47b8      	blx	r7
		}
     828:	e7f7      	b.n	81a <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
     82a:	4643      	mov	r3, r8
     82c:	685b      	ldr	r3, [r3, #4]
     82e:	4798      	blx	r3
	return true;
}
     830:	0028      	movs	r0, r5
     832:	bc04      	pop	{r2}
     834:	4690      	mov	r8, r2
     836:	bdf0      	pop	{r4, r5, r6, r7, pc}
     838:	00000775 	.word	0x00000775
     83c:	20000258 	.word	0x20000258
     840:	20000264 	.word	0x20000264
     844:	00000711 	.word	0x00000711
     848:	00001535 	.word	0x00001535

0000084c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     84e:	0005      	movs	r5, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     850:	4b0f      	ldr	r3, [pc, #60]	; (890 <udc_iface_enable+0x44>)
     852:	4798      	blx	r3
     854:	2800      	cmp	r0, #0
     856:	d019      	beq.n	88c <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     858:	4b0e      	ldr	r3, [pc, #56]	; (894 <udc_iface_enable+0x48>)
     85a:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     85c:	4e0e      	ldr	r6, [pc, #56]	; (898 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     85e:	4f0f      	ldr	r7, [pc, #60]	; (89c <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     860:	2105      	movs	r1, #5
     862:	0020      	movs	r0, r4
     864:	47b0      	blx	r6
     866:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     868:	d009      	beq.n	87e <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     86a:	7903      	ldrb	r3, [r0, #4]
     86c:	7942      	ldrb	r2, [r0, #5]
     86e:	0212      	lsls	r2, r2, #8
     870:	431a      	orrs	r2, r3
     872:	78c1      	ldrb	r1, [r0, #3]
     874:	7880      	ldrb	r0, [r0, #2]
     876:	47b8      	blx	r7
     878:	2800      	cmp	r0, #0
     87a:	d1f1      	bne.n	860 <udc_iface_enable+0x14>
     87c:	e006      	b.n	88c <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     87e:	4b08      	ldr	r3, [pc, #32]	; (8a0 <udc_iface_enable+0x54>)
     880:	681b      	ldr	r3, [r3, #0]
     882:	685b      	ldr	r3, [r3, #4]
     884:	00ad      	lsls	r5, r5, #2
     886:	58eb      	ldr	r3, [r5, r3]
     888:	681b      	ldr	r3, [r3, #0]
     88a:	4798      	blx	r3
}
     88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000775 	.word	0x00000775
     894:	20000264 	.word	0x20000264
     898:	00000711 	.word	0x00000711
     89c:	0000158d 	.word	0x0000158d
     8a0:	20000258 	.word	0x20000258

000008a4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     8a4:	b510      	push	{r4, lr}
	udd_enable();
     8a6:	4b01      	ldr	r3, [pc, #4]	; (8ac <udc_start+0x8>)
     8a8:	4798      	blx	r3
}
     8aa:	bd10      	pop	{r4, pc}
     8ac:	00001aa1 	.word	0x00001aa1

000008b0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     8b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     8b2:	4b0e      	ldr	r3, [pc, #56]	; (8ec <udc_reset+0x3c>)
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d011      	beq.n	8de <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8ba:	4b0d      	ldr	r3, [pc, #52]	; (8f0 <udc_reset+0x40>)
     8bc:	681b      	ldr	r3, [r3, #0]
     8be:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8c0:	791b      	ldrb	r3, [r3, #4]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d00b      	beq.n	8de <udc_reset+0x2e>
     8c6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     8c8:	4e0a      	ldr	r6, [pc, #40]	; (8f4 <udc_reset+0x44>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8ca:	4d09      	ldr	r5, [pc, #36]	; (8f0 <udc_reset+0x40>)
				iface_num++) {
			udc_iface_disable(iface_num);
     8cc:	0020      	movs	r0, r4
     8ce:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     8d0:	3401      	adds	r4, #1
     8d2:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8d4:	682b      	ldr	r3, [r5, #0]
     8d6:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8d8:	791b      	ldrb	r3, [r3, #4]
     8da:	42a3      	cmp	r3, r4
     8dc:	d8f6      	bhi.n	8cc <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     8de:	2300      	movs	r3, #0
     8e0:	4a02      	ldr	r2, [pc, #8]	; (8ec <udc_reset+0x3c>)
     8e2:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
     8e4:	4a04      	ldr	r2, [pc, #16]	; (8f8 <udc_reset+0x48>)
     8e6:	8013      	strh	r3, [r2, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     8e8:	bd70      	pop	{r4, r5, r6, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	20000260 	.word	0x20000260
     8f0:	20000258 	.word	0x20000258
     8f4:	000007e5 	.word	0x000007e5
     8f8:	2000025e 	.word	0x2000025e

000008fc <udc_sof_notify>:

void udc_sof_notify(void)
{
     8fc:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     8fe:	4b0d      	ldr	r3, [pc, #52]	; (934 <udc_sof_notify+0x38>)
     900:	781b      	ldrb	r3, [r3, #0]
     902:	2b00      	cmp	r3, #0
     904:	d015      	beq.n	932 <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     906:	4b0c      	ldr	r3, [pc, #48]	; (938 <udc_sof_notify+0x3c>)
     908:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     90a:	681a      	ldr	r2, [r3, #0]
     90c:	7912      	ldrb	r2, [r2, #4]
     90e:	2a00      	cmp	r2, #0
     910:	d00f      	beq.n	932 <udc_sof_notify+0x36>
     912:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     914:	4d08      	ldr	r5, [pc, #32]	; (938 <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     916:	685b      	ldr	r3, [r3, #4]
     918:	00a2      	lsls	r2, r4, #2
     91a:	58d3      	ldr	r3, [r2, r3]
     91c:	691b      	ldr	r3, [r3, #16]
     91e:	2b00      	cmp	r3, #0
     920:	d000      	beq.n	924 <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     922:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     924:	3401      	adds	r4, #1
     926:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     928:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     92a:	681a      	ldr	r2, [r3, #0]
     92c:	7912      	ldrb	r2, [r2, #4]
     92e:	42a2      	cmp	r2, r4
     930:	d8f1      	bhi.n	916 <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     932:	bd70      	pop	{r4, r5, r6, pc}
     934:	20000260 	.word	0x20000260
     938:	20000258 	.word	0x20000258

0000093c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     93e:	4bbe      	ldr	r3, [pc, #760]	; (c38 <udc_process_setup+0x2fc>)
     940:	2200      	movs	r2, #0
     942:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     944:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     946:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	b25a      	sxtb	r2, r3
     94c:	2a00      	cmp	r2, #0
     94e:	db00      	blt.n	952 <udc_process_setup+0x16>
     950:	e1ff      	b.n	d52 <udc_process_setup+0x416>
		if (udd_g_ctrlreq.req.wLength == 0) {
     952:	4ab9      	ldr	r2, [pc, #740]	; (c38 <udc_process_setup+0x2fc>)
     954:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     956:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
     958:	2a00      	cmp	r2, #0
     95a:	d000      	beq.n	95e <udc_process_setup+0x22>
     95c:	e1f5      	b.n	d4a <udc_process_setup+0x40e>
     95e:	e200      	b.n	d62 <udc_process_setup+0x426>
     960:	211f      	movs	r1, #31
     962:	400b      	ands	r3, r1
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     964:	d000      	beq.n	968 <udc_process_setup+0x2c>
     966:	e07e      	b.n	a66 <udc_process_setup+0x12a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     968:	49b3      	ldr	r1, [pc, #716]	; (c38 <udc_process_setup+0x2fc>)
     96a:	7849      	ldrb	r1, [r1, #1]
     96c:	2906      	cmp	r1, #6
     96e:	d00b      	beq.n	988 <udc_process_setup+0x4c>
     970:	2908      	cmp	r1, #8
     972:	d070      	beq.n	a56 <udc_process_setup+0x11a>
     974:	2900      	cmp	r1, #0
     976:	d176      	bne.n	a66 <udc_process_setup+0x12a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     978:	2a02      	cmp	r2, #2
     97a:	d000      	beq.n	97e <udc_process_setup+0x42>
     97c:	e1b9      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     97e:	3102      	adds	r1, #2
     980:	48ae      	ldr	r0, [pc, #696]	; (c3c <udc_process_setup+0x300>)
     982:	4baf      	ldr	r3, [pc, #700]	; (c40 <udc_process_setup+0x304>)
     984:	4798      	blx	r3
     986:	e1eb      	b.n	d60 <udc_process_setup+0x424>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     988:	4bab      	ldr	r3, [pc, #684]	; (c38 <udc_process_setup+0x2fc>)
     98a:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     98c:	0a1a      	lsrs	r2, r3, #8
     98e:	2a02      	cmp	r2, #2
     990:	d010      	beq.n	9b4 <udc_process_setup+0x78>
     992:	b2d1      	uxtb	r1, r2
     994:	2902      	cmp	r1, #2
     996:	d802      	bhi.n	99e <udc_process_setup+0x62>
     998:	2a01      	cmp	r2, #1
     99a:	d005      	beq.n	9a8 <udc_process_setup+0x6c>
     99c:	e17a      	b.n	c94 <udc_process_setup+0x358>
     99e:	2a03      	cmp	r2, #3
     9a0:	d02a      	beq.n	9f8 <udc_process_setup+0xbc>
     9a2:	2a0f      	cmp	r2, #15
     9a4:	d01c      	beq.n	9e0 <udc_process_setup+0xa4>
     9a6:	e175      	b.n	c94 <udc_process_setup+0x358>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     9a8:	4ba6      	ldr	r3, [pc, #664]	; (c44 <udc_process_setup+0x308>)
     9aa:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     9ac:	7801      	ldrb	r1, [r0, #0]
     9ae:	4ba4      	ldr	r3, [pc, #656]	; (c40 <udc_process_setup+0x304>)
     9b0:	4798      	blx	r3
     9b2:	e047      	b.n	a44 <udc_process_setup+0x108>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     9b4:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     9b6:	4aa3      	ldr	r2, [pc, #652]	; (c44 <udc_process_setup+0x308>)
     9b8:	6812      	ldr	r2, [r2, #0]
     9ba:	7c52      	ldrb	r2, [r2, #17]
     9bc:	429a      	cmp	r2, r3
     9be:	d800      	bhi.n	9c2 <udc_process_setup+0x86>
     9c0:	e197      	b.n	cf2 <udc_process_setup+0x3b6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     9c2:	4aa0      	ldr	r2, [pc, #640]	; (c44 <udc_process_setup+0x308>)
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     9c4:	6852      	ldr	r2, [r2, #4]
     9c6:	00db      	lsls	r3, r3, #3
     9c8:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     9ca:	7883      	ldrb	r3, [r0, #2]
     9cc:	78c1      	ldrb	r1, [r0, #3]
     9ce:	0209      	lsls	r1, r1, #8
     9d0:	4319      	orrs	r1, r3
     9d2:	4b9b      	ldr	r3, [pc, #620]	; (c40 <udc_process_setup+0x304>)
     9d4:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     9d6:	4b98      	ldr	r3, [pc, #608]	; (c38 <udc_process_setup+0x2fc>)
     9d8:	689b      	ldr	r3, [r3, #8]
     9da:	2202      	movs	r2, #2
     9dc:	705a      	strb	r2, [r3, #1]
     9de:	e031      	b.n	a44 <udc_process_setup+0x108>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     9e0:	4b98      	ldr	r3, [pc, #608]	; (c44 <udc_process_setup+0x308>)
     9e2:	6898      	ldr	r0, [r3, #8]
     9e4:	2800      	cmp	r0, #0
     9e6:	d100      	bne.n	9ea <udc_process_setup+0xae>
     9e8:	e183      	b.n	cf2 <udc_process_setup+0x3b6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     9ea:	7883      	ldrb	r3, [r0, #2]
     9ec:	78c1      	ldrb	r1, [r0, #3]
     9ee:	0209      	lsls	r1, r1, #8
     9f0:	4319      	orrs	r1, r3
     9f2:	4b93      	ldr	r3, [pc, #588]	; (c40 <udc_process_setup+0x304>)
     9f4:	4798      	blx	r3
     9f6:	e025      	b.n	a44 <udc_process_setup+0x108>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     9f8:	22ff      	movs	r2, #255	; 0xff
     9fa:	4013      	ands	r3, r2
     9fc:	2b01      	cmp	r3, #1
     9fe:	d00f      	beq.n	a20 <udc_process_setup+0xe4>
     a00:	2b00      	cmp	r3, #0
     a02:	d008      	beq.n	a16 <udc_process_setup+0xda>
     a04:	2b02      	cmp	r3, #2
     a06:	d100      	bne.n	a0a <udc_process_setup+0xce>
     a08:	e1a7      	b.n	d5a <udc_process_setup+0x41e>
     a0a:	2b03      	cmp	r3, #3
     a0c:	d000      	beq.n	a10 <udc_process_setup+0xd4>
     a0e:	e148      	b.n	ca2 <udc_process_setup+0x366>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     a10:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
     a12:	4c8d      	ldr	r4, [pc, #564]	; (c48 <udc_process_setup+0x30c>)
     a14:	e006      	b.n	a24 <udc_process_setup+0xe8>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a16:	2104      	movs	r1, #4
     a18:	488c      	ldr	r0, [pc, #560]	; (c4c <udc_process_setup+0x310>)
     a1a:	4b89      	ldr	r3, [pc, #548]	; (c40 <udc_process_setup+0x304>)
     a1c:	4798      	blx	r3
     a1e:	e011      	b.n	a44 <udc_process_setup+0x108>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     a20:	4c8b      	ldr	r4, [pc, #556]	; (c50 <udc_process_setup+0x314>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     a22:	2110      	movs	r1, #16
     a24:	4a8b      	ldr	r2, [pc, #556]	; (c54 <udc_process_setup+0x318>)
     a26:	2300      	movs	r3, #0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     a28:	5ce0      	ldrb	r0, [r4, r3]
     a2a:	8050      	strh	r0, [r2, #2]
     a2c:	3301      	adds	r3, #1
     a2e:	3202      	adds	r2, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     a30:	b2d8      	uxtb	r0, r3
     a32:	4288      	cmp	r0, r1
     a34:	d3f8      	bcc.n	a28 <udc_process_setup+0xec>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     a36:	0049      	lsls	r1, r1, #1
     a38:	3102      	adds	r1, #2
     a3a:	4886      	ldr	r0, [pc, #536]	; (c54 <udc_process_setup+0x318>)
     a3c:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     a3e:	b289      	uxth	r1, r1
     a40:	4b7f      	ldr	r3, [pc, #508]	; (c40 <udc_process_setup+0x304>)
     a42:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a44:	4b7c      	ldr	r3, [pc, #496]	; (c38 <udc_process_setup+0x2fc>)
     a46:	88da      	ldrh	r2, [r3, #6]
     a48:	899b      	ldrh	r3, [r3, #12]
     a4a:	4293      	cmp	r3, r2
     a4c:	d800      	bhi.n	a50 <udc_process_setup+0x114>
     a4e:	e187      	b.n	d60 <udc_process_setup+0x424>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a50:	4b79      	ldr	r3, [pc, #484]	; (c38 <udc_process_setup+0x2fc>)
     a52:	819a      	strh	r2, [r3, #12]
     a54:	e184      	b.n	d60 <udc_process_setup+0x424>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a56:	2a01      	cmp	r2, #1
     a58:	d000      	beq.n	a5c <udc_process_setup+0x120>
     a5a:	e14a      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a5c:	2101      	movs	r1, #1
     a5e:	487e      	ldr	r0, [pc, #504]	; (c58 <udc_process_setup+0x31c>)
     a60:	4b77      	ldr	r3, [pc, #476]	; (c40 <udc_process_setup+0x304>)
     a62:	4798      	blx	r3
     a64:	e17c      	b.n	d60 <udc_process_setup+0x424>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a66:	2b01      	cmp	r3, #1
     a68:	d127      	bne.n	aba <udc_process_setup+0x17e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     a6a:	4973      	ldr	r1, [pc, #460]	; (c38 <udc_process_setup+0x2fc>)
     a6c:	7849      	ldrb	r1, [r1, #1]
     a6e:	290a      	cmp	r1, #10
     a70:	d123      	bne.n	aba <udc_process_setup+0x17e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     a72:	2a01      	cmp	r2, #1
     a74:	d000      	beq.n	a78 <udc_process_setup+0x13c>
     a76:	e11a      	b.n	cae <udc_process_setup+0x372>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     a78:	4b77      	ldr	r3, [pc, #476]	; (c58 <udc_process_setup+0x31c>)
     a7a:	781b      	ldrb	r3, [r3, #0]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d100      	bne.n	a82 <udc_process_setup+0x146>
     a80:	e115      	b.n	cae <udc_process_setup+0x372>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a82:	4b6d      	ldr	r3, [pc, #436]	; (c38 <udc_process_setup+0x2fc>)
     a84:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a86:	4b75      	ldr	r3, [pc, #468]	; (c5c <udc_process_setup+0x320>)
     a88:	681d      	ldr	r5, [r3, #0]
     a8a:	682b      	ldr	r3, [r5, #0]
     a8c:	791b      	ldrb	r3, [r3, #4]
     a8e:	42a3      	cmp	r3, r4
     a90:	d800      	bhi.n	a94 <udc_process_setup+0x158>
     a92:	e10c      	b.n	cae <udc_process_setup+0x372>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     a94:	2100      	movs	r1, #0
     a96:	0020      	movs	r0, r4
     a98:	4b71      	ldr	r3, [pc, #452]	; (c60 <udc_process_setup+0x324>)
     a9a:	4798      	blx	r3
     a9c:	2800      	cmp	r0, #0
     a9e:	d100      	bne.n	aa2 <udc_process_setup+0x166>
     aa0:	e0ff      	b.n	ca2 <udc_process_setup+0x366>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     aa2:	686b      	ldr	r3, [r5, #4]
     aa4:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     aa6:	58e3      	ldr	r3, [r4, r3]
     aa8:	68db      	ldr	r3, [r3, #12]
     aaa:	4798      	blx	r3
     aac:	4b6d      	ldr	r3, [pc, #436]	; (c64 <udc_process_setup+0x328>)
     aae:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ab0:	2101      	movs	r1, #1
     ab2:	0018      	movs	r0, r3
     ab4:	4b62      	ldr	r3, [pc, #392]	; (c40 <udc_process_setup+0x304>)
     ab6:	4798      	blx	r3
     ab8:	e152      	b.n	d60 <udc_process_setup+0x424>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     aba:	2b02      	cmp	r3, #2
     abc:	d000      	beq.n	ac0 <udc_process_setup+0x184>
     abe:	e0f0      	b.n	ca2 <udc_process_setup+0x366>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ac0:	4b5d      	ldr	r3, [pc, #372]	; (c38 <udc_process_setup+0x2fc>)
     ac2:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
     ac4:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ac6:	2b00      	cmp	r3, #0
     ac8:	d000      	beq.n	acc <udc_process_setup+0x190>
     aca:	e0e8      	b.n	c9e <udc_process_setup+0x362>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     acc:	2a02      	cmp	r2, #2
     ace:	d000      	beq.n	ad2 <udc_process_setup+0x196>
     ad0:	e10f      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     ad2:	4b59      	ldr	r3, [pc, #356]	; (c38 <udc_process_setup+0x2fc>)
     ad4:	7918      	ldrb	r0, [r3, #4]
     ad6:	4b64      	ldr	r3, [pc, #400]	; (c68 <udc_process_setup+0x32c>)
     ad8:	4798      	blx	r3
     ada:	4b64      	ldr	r3, [pc, #400]	; (c6c <udc_process_setup+0x330>)
     adc:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     ade:	2102      	movs	r1, #2
     ae0:	0018      	movs	r0, r3
     ae2:	4b57      	ldr	r3, [pc, #348]	; (c40 <udc_process_setup+0x304>)
     ae4:	4798      	blx	r3
     ae6:	e13b      	b.n	d60 <udc_process_setup+0x424>
     ae8:	221f      	movs	r2, #31
     aea:	4013      	ands	r3, r2
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     aec:	d162      	bne.n	bb4 <udc_process_setup+0x278>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     aee:	4a52      	ldr	r2, [pc, #328]	; (c38 <udc_process_setup+0x2fc>)
     af0:	7852      	ldrb	r2, [r2, #1]
     af2:	2a03      	cmp	r2, #3
     af4:	d100      	bne.n	af8 <udc_process_setup+0x1bc>
     af6:	e0cf      	b.n	c98 <udc_process_setup+0x35c>
     af8:	b2d1      	uxtb	r1, r2
     afa:	2903      	cmp	r1, #3
     afc:	d802      	bhi.n	b04 <udc_process_setup+0x1c8>
     afe:	2a01      	cmp	r2, #1
     b00:	d00e      	beq.n	b20 <udc_process_setup+0x1e4>
     b02:	e057      	b.n	bb4 <udc_process_setup+0x278>
     b04:	2a05      	cmp	r2, #5
     b06:	d002      	beq.n	b0e <udc_process_setup+0x1d2>
     b08:	2a09      	cmp	r2, #9
     b0a:	d019      	beq.n	b40 <udc_process_setup+0x204>
     b0c:	e052      	b.n	bb4 <udc_process_setup+0x278>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b0e:	4b4a      	ldr	r3, [pc, #296]	; (c38 <udc_process_setup+0x2fc>)
     b10:	88db      	ldrh	r3, [r3, #6]
     b12:	2b00      	cmp	r3, #0
     b14:	d000      	beq.n	b18 <udc_process_setup+0x1dc>
     b16:	e0ec      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b18:	4a55      	ldr	r2, [pc, #340]	; (c70 <udc_process_setup+0x334>)
     b1a:	4b47      	ldr	r3, [pc, #284]	; (c38 <udc_process_setup+0x2fc>)
     b1c:	611a      	str	r2, [r3, #16]
     b1e:	e11f      	b.n	d60 <udc_process_setup+0x424>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b20:	4b45      	ldr	r3, [pc, #276]	; (c38 <udc_process_setup+0x2fc>)
     b22:	88db      	ldrh	r3, [r3, #6]
     b24:	2b00      	cmp	r3, #0
     b26:	d000      	beq.n	b2a <udc_process_setup+0x1ee>
     b28:	e0e3      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     b2a:	4b43      	ldr	r3, [pc, #268]	; (c38 <udc_process_setup+0x2fc>)
     b2c:	885b      	ldrh	r3, [r3, #2]
     b2e:	2b01      	cmp	r3, #1
     b30:	d000      	beq.n	b34 <udc_process_setup+0x1f8>
     b32:	e0de      	b.n	cf2 <udc_process_setup+0x3b6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     b34:	4a41      	ldr	r2, [pc, #260]	; (c3c <udc_process_setup+0x300>)
     b36:	8813      	ldrh	r3, [r2, #0]
     b38:	2102      	movs	r1, #2
     b3a:	438b      	bics	r3, r1
     b3c:	8013      	strh	r3, [r2, #0]
     b3e:	e10f      	b.n	d60 <udc_process_setup+0x424>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     b40:	4b3d      	ldr	r3, [pc, #244]	; (c38 <udc_process_setup+0x2fc>)
     b42:	88db      	ldrh	r3, [r3, #6]
     b44:	2b00      	cmp	r3, #0
     b46:	d000      	beq.n	b4a <udc_process_setup+0x20e>
     b48:	e0d3      	b.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     b4a:	4b4a      	ldr	r3, [pc, #296]	; (c74 <udc_process_setup+0x338>)
     b4c:	4798      	blx	r3
     b4e:	2800      	cmp	r0, #0
     b50:	d100      	bne.n	b54 <udc_process_setup+0x218>
     b52:	e0a6      	b.n	ca2 <udc_process_setup+0x366>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     b54:	4b38      	ldr	r3, [pc, #224]	; (c38 <udc_process_setup+0x2fc>)
     b56:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     b58:	4b3a      	ldr	r3, [pc, #232]	; (c44 <udc_process_setup+0x308>)
     b5a:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     b5c:	7c5b      	ldrb	r3, [r3, #17]
     b5e:	429a      	cmp	r2, r3
     b60:	dd00      	ble.n	b64 <udc_process_setup+0x228>
     b62:	e09e      	b.n	ca2 <udc_process_setup+0x366>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     b64:	4b44      	ldr	r3, [pc, #272]	; (c78 <udc_process_setup+0x33c>)
     b66:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     b68:	4b33      	ldr	r3, [pc, #204]	; (c38 <udc_process_setup+0x2fc>)
     b6a:	789b      	ldrb	r3, [r3, #2]
     b6c:	4a3a      	ldr	r2, [pc, #232]	; (c58 <udc_process_setup+0x31c>)
     b6e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     b70:	2b00      	cmp	r3, #0
     b72:	d100      	bne.n	b76 <udc_process_setup+0x23a>
     b74:	e0f4      	b.n	d60 <udc_process_setup+0x424>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     b76:	4a41      	ldr	r2, [pc, #260]	; (c7c <udc_process_setup+0x340>)
     b78:	4694      	mov	ip, r2
     b7a:	4463      	add	r3, ip
     b7c:	00db      	lsls	r3, r3, #3
     b7e:	4a31      	ldr	r2, [pc, #196]	; (c44 <udc_process_setup+0x308>)
     b80:	6852      	ldr	r2, [r2, #4]
     b82:	18d3      	adds	r3, r2, r3
     b84:	4a35      	ldr	r2, [pc, #212]	; (c5c <udc_process_setup+0x320>)
     b86:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	791b      	ldrb	r3, [r3, #4]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d100      	bne.n	b92 <udc_process_setup+0x256>
     b90:	e0e6      	b.n	d60 <udc_process_setup+0x424>
     b92:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     b94:	4d3a      	ldr	r5, [pc, #232]	; (c80 <udc_process_setup+0x344>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b96:	0016      	movs	r6, r2
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     b98:	2100      	movs	r1, #0
     b9a:	0020      	movs	r0, r4
     b9c:	47a8      	blx	r5
     b9e:	2800      	cmp	r0, #0
     ba0:	d100      	bne.n	ba4 <udc_process_setup+0x268>
     ba2:	e07e      	b.n	ca2 <udc_process_setup+0x366>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ba4:	3401      	adds	r4, #1
     ba6:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ba8:	6833      	ldr	r3, [r6, #0]
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	791b      	ldrb	r3, [r3, #4]
     bae:	42a3      	cmp	r3, r4
     bb0:	d8f2      	bhi.n	b98 <udc_process_setup+0x25c>
     bb2:	e0d5      	b.n	d60 <udc_process_setup+0x424>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     bb4:	2b01      	cmp	r3, #1
     bb6:	d118      	bne.n	bea <udc_process_setup+0x2ae>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     bb8:	4a1f      	ldr	r2, [pc, #124]	; (c38 <udc_process_setup+0x2fc>)
     bba:	7852      	ldrb	r2, [r2, #1]
     bbc:	2a0b      	cmp	r2, #11
     bbe:	d114      	bne.n	bea <udc_process_setup+0x2ae>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     bc0:	4b1d      	ldr	r3, [pc, #116]	; (c38 <udc_process_setup+0x2fc>)
     bc2:	88db      	ldrh	r3, [r3, #6]
     bc4:	2b00      	cmp	r3, #0
     bc6:	d172      	bne.n	cae <udc_process_setup+0x372>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     bc8:	4b23      	ldr	r3, [pc, #140]	; (c58 <udc_process_setup+0x31c>)
     bca:	781b      	ldrb	r3, [r3, #0]
     bcc:	2b00      	cmp	r3, #0
     bce:	d06e      	beq.n	cae <udc_process_setup+0x372>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     bd0:	4b19      	ldr	r3, [pc, #100]	; (c38 <udc_process_setup+0x2fc>)
     bd2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     bd4:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     bd6:	0028      	movs	r0, r5
     bd8:	4b2a      	ldr	r3, [pc, #168]	; (c84 <udc_process_setup+0x348>)
     bda:	4798      	blx	r3
     bdc:	2800      	cmp	r0, #0
     bde:	d060      	beq.n	ca2 <udc_process_setup+0x366>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     be0:	b2e1      	uxtb	r1, r4
     be2:	0028      	movs	r0, r5
     be4:	4b26      	ldr	r3, [pc, #152]	; (c80 <udc_process_setup+0x344>)
     be6:	4798      	blx	r3
     be8:	e059      	b.n	c9e <udc_process_setup+0x362>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     bea:	2b02      	cmp	r3, #2
     bec:	d159      	bne.n	ca2 <udc_process_setup+0x366>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     bee:	4b12      	ldr	r3, [pc, #72]	; (c38 <udc_process_setup+0x2fc>)
     bf0:	785b      	ldrb	r3, [r3, #1]
     bf2:	2b01      	cmp	r3, #1
     bf4:	d002      	beq.n	bfc <udc_process_setup+0x2c0>
     bf6:	2b03      	cmp	r3, #3
     bf8:	d00d      	beq.n	c16 <udc_process_setup+0x2da>
     bfa:	e04f      	b.n	c9c <udc_process_setup+0x360>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     bfc:	4b0e      	ldr	r3, [pc, #56]	; (c38 <udc_process_setup+0x2fc>)
     bfe:	88db      	ldrh	r3, [r3, #6]
     c00:	2b00      	cmp	r3, #0
     c02:	d176      	bne.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     c04:	4b0c      	ldr	r3, [pc, #48]	; (c38 <udc_process_setup+0x2fc>)
     c06:	885b      	ldrh	r3, [r3, #2]
     c08:	2b00      	cmp	r3, #0
     c0a:	d172      	bne.n	cf2 <udc_process_setup+0x3b6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     c0c:	4b0a      	ldr	r3, [pc, #40]	; (c38 <udc_process_setup+0x2fc>)
     c0e:	7918      	ldrb	r0, [r3, #4]
     c10:	4b1d      	ldr	r3, [pc, #116]	; (c88 <udc_process_setup+0x34c>)
     c12:	4798      	blx	r3
     c14:	e043      	b.n	c9e <udc_process_setup+0x362>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c16:	4b08      	ldr	r3, [pc, #32]	; (c38 <udc_process_setup+0x2fc>)
     c18:	88db      	ldrh	r3, [r3, #6]
     c1a:	2b00      	cmp	r3, #0
     c1c:	d169      	bne.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     c1e:	4b06      	ldr	r3, [pc, #24]	; (c38 <udc_process_setup+0x2fc>)
     c20:	885b      	ldrh	r3, [r3, #2]
     c22:	2b00      	cmp	r3, #0
     c24:	d165      	bne.n	cf2 <udc_process_setup+0x3b6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     c26:	4c04      	ldr	r4, [pc, #16]	; (c38 <udc_process_setup+0x2fc>)
     c28:	7920      	ldrb	r0, [r4, #4]
     c2a:	4b18      	ldr	r3, [pc, #96]	; (c8c <udc_process_setup+0x350>)
     c2c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     c2e:	7920      	ldrb	r0, [r4, #4]
     c30:	4b17      	ldr	r3, [pc, #92]	; (c90 <udc_process_setup+0x354>)
     c32:	4798      	blx	r3
     c34:	e033      	b.n	c9e <udc_process_setup+0x362>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	20000598 	.word	0x20000598
     c3c:	2000025e 	.word	0x2000025e
     c40:	00001a11 	.word	0x00001a11
     c44:	20000034 	.word	0x20000034
     c48:	000037f0 	.word	0x000037f0
     c4c:	200000f0 	.word	0x200000f0
     c50:	200000b8 	.word	0x200000b8
     c54:	200000cc 	.word	0x200000cc
     c58:	20000260 	.word	0x20000260
     c5c:	20000258 	.word	0x20000258
     c60:	00000775 	.word	0x00000775
     c64:	2000025c 	.word	0x2000025c
     c68:	00001695 	.word	0x00001695
     c6c:	20000256 	.word	0x20000256
     c70:	0000075d 	.word	0x0000075d
     c74:	00001a01 	.word	0x00001a01
     c78:	000008b1 	.word	0x000008b1
     c7c:	1fffffff 	.word	0x1fffffff
     c80:	0000084d 	.word	0x0000084d
     c84:	000007e5 	.word	0x000007e5
     c88:	000017d5 	.word	0x000017d5
     c8c:	000014d5 	.word	0x000014d5
     c90:	000016a9 	.word	0x000016a9
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     c94:	2000      	movs	r0, #0
     c96:	e002      	b.n	c9e <udc_process_setup+0x362>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     c98:	2000      	movs	r0, #0
     c9a:	e000      	b.n	c9e <udc_process_setup+0x362>
				break;
			}
		}
#endif
	}
	return false;
     c9c:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     c9e:	2800      	cmp	r0, #0
     ca0:	d15f      	bne.n	d62 <udc_process_setup+0x426>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     ca2:	4b30      	ldr	r3, [pc, #192]	; (d64 <udc_process_setup+0x428>)
     ca4:	781b      	ldrb	r3, [r3, #0]
     ca6:	221f      	movs	r2, #31
     ca8:	4013      	ands	r3, r2
     caa:	2b01      	cmp	r3, #1
     cac:	d121      	bne.n	cf2 <udc_process_setup+0x3b6>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     cae:	4b2e      	ldr	r3, [pc, #184]	; (d68 <udc_process_setup+0x42c>)
     cb0:	781b      	ldrb	r3, [r3, #0]
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     cb2:	2000      	movs	r0, #0
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d054      	beq.n	d62 <udc_process_setup+0x426>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cb8:	4b2a      	ldr	r3, [pc, #168]	; (d64 <udc_process_setup+0x428>)
     cba:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     cbc:	4b2b      	ldr	r3, [pc, #172]	; (d6c <udc_process_setup+0x430>)
     cbe:	681d      	ldr	r5, [r3, #0]
     cc0:	682b      	ldr	r3, [r5, #0]
     cc2:	791b      	ldrb	r3, [r3, #4]
     cc4:	42a3      	cmp	r3, r4
     cc6:	d94c      	bls.n	d62 <udc_process_setup+0x426>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     cc8:	2100      	movs	r1, #0
     cca:	0020      	movs	r0, r4
     ccc:	4b28      	ldr	r3, [pc, #160]	; (d70 <udc_process_setup+0x434>)
     cce:	4798      	blx	r3
     cd0:	2800      	cmp	r0, #0
     cd2:	d00e      	beq.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     cd4:	686b      	ldr	r3, [r5, #4]
     cd6:	00a2      	lsls	r2, r4, #2
     cd8:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     cda:	68eb      	ldr	r3, [r5, #12]
     cdc:	4798      	blx	r3
     cde:	0001      	movs	r1, r0
     ce0:	0020      	movs	r0, r4
     ce2:	4b23      	ldr	r3, [pc, #140]	; (d70 <udc_process_setup+0x434>)
     ce4:	4798      	blx	r3
     ce6:	2800      	cmp	r0, #0
     ce8:	d003      	beq.n	cf2 <udc_process_setup+0x3b6>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     cea:	68ab      	ldr	r3, [r5, #8]
     cec:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     cee:	2800      	cmp	r0, #0
     cf0:	d137      	bne.n	d62 <udc_process_setup+0x426>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     cf2:	4b1c      	ldr	r3, [pc, #112]	; (d64 <udc_process_setup+0x428>)
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	221f      	movs	r2, #31
     cf8:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     cfa:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     cfc:	2b02      	cmp	r3, #2
     cfe:	d130      	bne.n	d62 <udc_process_setup+0x426>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d00:	4b19      	ldr	r3, [pc, #100]	; (d68 <udc_process_setup+0x42c>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b00      	cmp	r3, #0
     d06:	d02c      	beq.n	d62 <udc_process_setup+0x426>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d08:	4b18      	ldr	r3, [pc, #96]	; (d6c <udc_process_setup+0x430>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	7912      	ldrb	r2, [r2, #4]
     d10:	2a00      	cmp	r2, #0
     d12:	d018      	beq.n	d46 <udc_process_setup+0x40a>
     d14:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d16:	4e16      	ldr	r6, [pc, #88]	; (d70 <udc_process_setup+0x434>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d18:	4f14      	ldr	r7, [pc, #80]	; (d6c <udc_process_setup+0x430>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     d1a:	685b      	ldr	r3, [r3, #4]
     d1c:	00aa      	lsls	r2, r5, #2
     d1e:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d20:	68e3      	ldr	r3, [r4, #12]
     d22:	4798      	blx	r3
     d24:	0001      	movs	r1, r0
     d26:	0028      	movs	r0, r5
     d28:	47b0      	blx	r6
     d2a:	2800      	cmp	r0, #0
     d2c:	d019      	beq.n	d62 <udc_process_setup+0x426>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     d2e:	68a3      	ldr	r3, [r4, #8]
     d30:	4798      	blx	r3
     d32:	2800      	cmp	r0, #0
     d34:	d115      	bne.n	d62 <udc_process_setup+0x426>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     d36:	3501      	adds	r5, #1
     d38:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	681a      	ldr	r2, [r3, #0]
     d3e:	7912      	ldrb	r2, [r2, #4]
     d40:	42aa      	cmp	r2, r5
     d42:	d8ea      	bhi.n	d1a <udc_process_setup+0x3de>
     d44:	e00d      	b.n	d62 <udc_process_setup+0x426>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     d46:	2000      	movs	r0, #0
     d48:	e00b      	b.n	d62 <udc_process_setup+0x426>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d4a:	2160      	movs	r1, #96	; 0x60
     d4c:	4219      	tst	r1, r3
     d4e:	d1a8      	bne.n	ca2 <udc_process_setup+0x366>
     d50:	e606      	b.n	960 <udc_process_setup+0x24>
     d52:	2260      	movs	r2, #96	; 0x60
     d54:	421a      	tst	r2, r3
     d56:	d1a4      	bne.n	ca2 <udc_process_setup+0x366>
     d58:	e6c6      	b.n	ae8 <udc_process_setup+0x1ac>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     d5a:	210c      	movs	r1, #12
		str = udc_string_product_name;
     d5c:	4c05      	ldr	r4, [pc, #20]	; (d74 <udc_process_setup+0x438>)
     d5e:	e661      	b.n	a24 <udc_process_setup+0xe8>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
     d60:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d64:	20000598 	.word	0x20000598
     d68:	20000260 	.word	0x20000260
     d6c:	20000258 	.word	0x20000258
     d70:	00000775 	.word	0x00000775
     d74:	200000a8 	.word	0x200000a8

00000d78 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     d78:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d7a:	2200      	movs	r2, #0
     d7c:	4b15      	ldr	r3, [pc, #84]	; (dd4 <EIC_Handler+0x5c>)
     d7e:	701a      	strb	r2, [r3, #0]
     d80:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     d82:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d84:	4e14      	ldr	r6, [pc, #80]	; (dd8 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d86:	4c13      	ldr	r4, [pc, #76]	; (dd4 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     d88:	2b1f      	cmp	r3, #31
     d8a:	d919      	bls.n	dc0 <EIC_Handler+0x48>
     d8c:	e00f      	b.n	dae <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     d8e:	2100      	movs	r1, #0
     d90:	e000      	b.n	d94 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     d92:	4912      	ldr	r1, [pc, #72]	; (ddc <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     d94:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d96:	009b      	lsls	r3, r3, #2
     d98:	599b      	ldr	r3, [r3, r6]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d000      	beq.n	da0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     d9e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     da0:	7823      	ldrb	r3, [r4, #0]
     da2:	3301      	adds	r3, #1
     da4:	b2db      	uxtb	r3, r3
     da6:	7023      	strb	r3, [r4, #0]
     da8:	2b0f      	cmp	r3, #15
     daa:	d9ed      	bls.n	d88 <EIC_Handler+0x10>
     dac:	e011      	b.n	dd2 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     dae:	0029      	movs	r1, r5
     db0:	4019      	ands	r1, r3
     db2:	2201      	movs	r2, #1
     db4:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     db6:	2100      	movs	r1, #0
     db8:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     dba:	4211      	tst	r1, r2
     dbc:	d1e7      	bne.n	d8e <EIC_Handler+0x16>
     dbe:	e7ef      	b.n	da0 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     dc0:	0029      	movs	r1, r5
     dc2:	4019      	ands	r1, r3
     dc4:	2201      	movs	r2, #1
     dc6:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     dc8:	4904      	ldr	r1, [pc, #16]	; (ddc <EIC_Handler+0x64>)
     dca:	6949      	ldr	r1, [r1, #20]
     dcc:	4211      	tst	r1, r2
     dce:	d1e0      	bne.n	d92 <EIC_Handler+0x1a>
     dd0:	e7e6      	b.n	da0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     dd2:	bd70      	pop	{r4, r5, r6, pc}
     dd4:	2000032d 	.word	0x2000032d
     dd8:	20000330 	.word	0x20000330
     ddc:	40002400 	.word	0x40002400

00000de0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     de0:	4a06      	ldr	r2, [pc, #24]	; (dfc <_extint_enable+0x1c>)
     de2:	7811      	ldrb	r1, [r2, #0]
     de4:	2302      	movs	r3, #2
     de6:	430b      	orrs	r3, r1
     de8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     dea:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     dec:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     dee:	6853      	ldr	r3, [r2, #4]
     df0:	4219      	tst	r1, r3
     df2:	d1fc      	bne.n	dee <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     df4:	6853      	ldr	r3, [r2, #4]
     df6:	4218      	tst	r0, r3
     df8:	d1f9      	bne.n	dee <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     dfa:	4770      	bx	lr
     dfc:	40002400 	.word	0x40002400

00000e00 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     e00:	b500      	push	{lr}
     e02:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     e04:	4a18      	ldr	r2, [pc, #96]	; (e68 <_system_extint_init+0x68>)
     e06:	6953      	ldr	r3, [r2, #20]
     e08:	2180      	movs	r1, #128	; 0x80
     e0a:	0089      	lsls	r1, r1, #2
     e0c:	430b      	orrs	r3, r1
     e0e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e10:	a901      	add	r1, sp, #4
     e12:	2300      	movs	r3, #0
     e14:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     e16:	2003      	movs	r0, #3
     e18:	4b14      	ldr	r3, [pc, #80]	; (e6c <_system_extint_init+0x6c>)
     e1a:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     e1c:	2003      	movs	r0, #3
     e1e:	4b14      	ldr	r3, [pc, #80]	; (e70 <_system_extint_init+0x70>)
     e20:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     e22:	4a14      	ldr	r2, [pc, #80]	; (e74 <_system_extint_init+0x74>)
     e24:	7811      	ldrb	r1, [r2, #0]
     e26:	2301      	movs	r3, #1
     e28:	430b      	orrs	r3, r1
     e2a:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     e2c:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     e2e:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     e30:	6853      	ldr	r3, [r2, #4]
     e32:	4219      	tst	r1, r3
     e34:	d1fc      	bne.n	e30 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     e36:	6853      	ldr	r3, [r2, #4]
     e38:	4218      	tst	r0, r3
     e3a:	d009      	beq.n	e50 <_system_extint_init+0x50>
     e3c:	e7f8      	b.n	e30 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     e3e:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     e40:	428b      	cmp	r3, r1
     e42:	d1fc      	bne.n	e3e <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e44:	2208      	movs	r2, #8
     e46:	4b0c      	ldr	r3, [pc, #48]	; (e78 <_system_extint_init+0x78>)
     e48:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     e4a:	4b0c      	ldr	r3, [pc, #48]	; (e7c <_system_extint_init+0x7c>)
     e4c:	4798      	blx	r3
}
     e4e:	e009      	b.n	e64 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     e50:	4a08      	ldr	r2, [pc, #32]	; (e74 <_system_extint_init+0x74>)
     e52:	7813      	ldrb	r3, [r2, #0]
     e54:	2110      	movs	r1, #16
     e56:	438b      	bics	r3, r1
     e58:	7013      	strb	r3, [r2, #0]
     e5a:	4b09      	ldr	r3, [pc, #36]	; (e80 <_system_extint_init+0x80>)
     e5c:	0019      	movs	r1, r3
     e5e:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     e60:	2200      	movs	r2, #0
     e62:	e7ec      	b.n	e3e <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     e64:	b003      	add	sp, #12
     e66:	bd00      	pop	{pc}
     e68:	40000400 	.word	0x40000400
     e6c:	000031dd 	.word	0x000031dd
     e70:	0000316d 	.word	0x0000316d
     e74:	40002400 	.word	0x40002400
     e78:	e000e100 	.word	0xe000e100
     e7c:	00000de1 	.word	0x00000de1
     e80:	20000330 	.word	0x20000330

00000e84 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
     e84:	b510      	push	{r4, lr}
     e86:	b084      	sub	sp, #16
     e88:	0004      	movs	r4, r0
	enum sleepmgr_mode sleep_mode[] = {
     e8a:	2204      	movs	r2, #4
     e8c:	4927      	ldr	r1, [pc, #156]	; (f2c <udd_sleep_mode+0xa8>)
     e8e:	a803      	add	r0, sp, #12
     e90:	4b27      	ldr	r3, [pc, #156]	; (f30 <udd_sleep_mode+0xac>)
     e92:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
     e94:	4b27      	ldr	r3, [pc, #156]	; (f34 <udd_sleep_mode+0xb0>)
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	42a3      	cmp	r3, r4
     e9a:	d045      	beq.n	f28 <udd_sleep_mode+0xa4>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
     e9c:	2c00      	cmp	r4, #0
     e9e:	d01e      	beq.n	ede <udd_sleep_mode+0x5a>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
     ea0:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     ea2:	5d1b      	ldrb	r3, [r3, r4]
     ea4:	4a24      	ldr	r2, [pc, #144]	; (f38 <udd_sleep_mode+0xb4>)
     ea6:	5cd2      	ldrb	r2, [r2, r3]
     ea8:	2aff      	cmp	r2, #255	; 0xff
     eaa:	d100      	bne.n	eae <udd_sleep_mode+0x2a>
     eac:	e7fe      	b.n	eac <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     eae:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     eb2:	4251      	negs	r1, r2
     eb4:	414a      	adcs	r2, r1
     eb6:	9201      	str	r2, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     eb8:	b672      	cpsid	i
     eba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     ebe:	2100      	movs	r1, #0
     ec0:	4a1e      	ldr	r2, [pc, #120]	; (f3c <udd_sleep_mode+0xb8>)
     ec2:	7011      	strb	r1, [r2, #0]
	return flags;
     ec4:	9801      	ldr	r0, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     ec6:	491c      	ldr	r1, [pc, #112]	; (f38 <udd_sleep_mode+0xb4>)
     ec8:	5cca      	ldrb	r2, [r1, r3]
     eca:	3201      	adds	r2, #1
     ecc:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     ece:	2800      	cmp	r0, #0
     ed0:	d005      	beq.n	ede <udd_sleep_mode+0x5a>
		cpu_irq_enable();
     ed2:	2201      	movs	r2, #1
     ed4:	4b19      	ldr	r3, [pc, #100]	; (f3c <udd_sleep_mode+0xb8>)
     ed6:	701a      	strb	r2, [r3, #0]
     ed8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     edc:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
     ede:	4b15      	ldr	r3, [pc, #84]	; (f34 <udd_sleep_mode+0xb0>)
     ee0:	781b      	ldrb	r3, [r3, #0]
     ee2:	2b00      	cmp	r3, #0
     ee4:	d01e      	beq.n	f24 <udd_sleep_mode+0xa0>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
     ee6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     ee8:	5cd3      	ldrb	r3, [r2, r3]
     eea:	4a13      	ldr	r2, [pc, #76]	; (f38 <udd_sleep_mode+0xb4>)
     eec:	5cd2      	ldrb	r2, [r2, r3]
     eee:	2a00      	cmp	r2, #0
     ef0:	d100      	bne.n	ef4 <udd_sleep_mode+0x70>
     ef2:	e7fe      	b.n	ef2 <udd_sleep_mode+0x6e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ef4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     ef8:	4251      	negs	r1, r2
     efa:	414a      	adcs	r2, r1
     efc:	9202      	str	r2, [sp, #8]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     efe:	b672      	cpsid	i
     f00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     f04:	2100      	movs	r1, #0
     f06:	4a0d      	ldr	r2, [pc, #52]	; (f3c <udd_sleep_mode+0xb8>)
     f08:	7011      	strb	r1, [r2, #0]
	return flags;
     f0a:	9802      	ldr	r0, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     f0c:	490a      	ldr	r1, [pc, #40]	; (f38 <udd_sleep_mode+0xb4>)
     f0e:	5cca      	ldrb	r2, [r1, r3]
     f10:	3a01      	subs	r2, #1
     f12:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     f14:	2800      	cmp	r0, #0
     f16:	d005      	beq.n	f24 <udd_sleep_mode+0xa0>
		cpu_irq_enable();
     f18:	2201      	movs	r2, #1
     f1a:	4b08      	ldr	r3, [pc, #32]	; (f3c <udd_sleep_mode+0xb8>)
     f1c:	701a      	strb	r2, [r3, #0]
     f1e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f22:	b662      	cpsie	i
	}
	udd_state = new_state;
     f24:	4b03      	ldr	r3, [pc, #12]	; (f34 <udd_sleep_mode+0xb0>)
     f26:	701c      	strb	r4, [r3, #0]
}
     f28:	b004      	add	sp, #16
     f2a:	bd10      	pop	{r4, pc}
     f2c:	000037f8 	.word	0x000037f8
     f30:	000037cd 	.word	0x000037cd
     f34:	200002e8 	.word	0x200002e8
     f38:	20000328 	.word	0x20000328
     f3c:	200000f4 	.word	0x200000f4

00000f40 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
     f40:	230f      	movs	r3, #15
     f42:	4003      	ands	r3, r0
     f44:	005b      	lsls	r3, r3, #1
     f46:	09c0      	lsrs	r0, r0, #7
     f48:	1818      	adds	r0, r3, r0
     f4a:	3802      	subs	r0, #2
     f4c:	0083      	lsls	r3, r0, #2
     f4e:	1818      	adds	r0, r3, r0
     f50:	0080      	lsls	r0, r0, #2
     f52:	4b01      	ldr	r3, [pc, #4]	; (f58 <udd_ep_get_job+0x18>)
     f54:	1818      	adds	r0, r3, r0
}
     f56:	4770      	bx	lr
     f58:	2000026c 	.word	0x2000026c

00000f5c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5e:	4657      	mov	r7, sl
     f60:	464e      	mov	r6, r9
     f62:	4645      	mov	r5, r8
     f64:	b4e0      	push	{r5, r6, r7}
     f66:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
     f68:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
     f6a:	b273      	sxtb	r3, r6
     f6c:	2b00      	cmp	r3, #0
     f6e:	da51      	bge.n	1014 <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
     f70:	0030      	movs	r0, r6
     f72:	4b5c      	ldr	r3, [pc, #368]	; (10e4 <udd_ep_transfer_process+0x188>)
     f74:	4798      	blx	r3
     f76:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
     f78:	230f      	movs	r3, #15
     f7a:	4033      	ands	r3, r6
     f7c:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
     f7e:	8a03      	ldrh	r3, [r0, #16]
     f80:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
     f82:	464b      	mov	r3, r9
     f84:	885f      	ldrh	r7, [r3, #2]
     f86:	68c3      	ldr	r3, [r0, #12]
     f88:	469c      	mov	ip, r3
     f8a:	4467      	add	r7, ip
     f8c:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
     f8e:	6885      	ldr	r5, [r0, #8]
     f90:	42af      	cmp	r7, r5
     f92:	d024      	beq.n	fde <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
     f94:	1bed      	subs	r5, r5, r7
     f96:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     f98:	4b53      	ldr	r3, [pc, #332]	; (10e8 <udd_ep_transfer_process+0x18c>)
     f9a:	429d      	cmp	r5, r3
     f9c:	d906      	bls.n	fac <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
     f9e:	001d      	movs	r5, r3
     fa0:	4651      	mov	r1, sl
     fa2:	0018      	movs	r0, r3
     fa4:	4b51      	ldr	r3, [pc, #324]	; (10ec <udd_ep_transfer_process+0x190>)
     fa6:	4798      	blx	r3
     fa8:	1a6d      	subs	r5, r5, r1
     faa:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
     fac:	7ca3      	ldrb	r3, [r4, #18]
     fae:	2200      	movs	r2, #0
     fb0:	079b      	lsls	r3, r3, #30
     fb2:	d506      	bpl.n	fc2 <udd_ep_transfer_process+0x66>
     fb4:	4651      	mov	r1, sl
     fb6:	0028      	movs	r0, r5
     fb8:	4b4d      	ldr	r3, [pc, #308]	; (10f0 <udd_ep_transfer_process+0x194>)
     fba:	4798      	blx	r3
     fbc:	b289      	uxth	r1, r1
     fbe:	424a      	negs	r2, r1
     fc0:	414a      	adcs	r2, r1
     fc2:	0051      	lsls	r1, r2, #1
     fc4:	7ca3      	ldrb	r3, [r4, #18]
     fc6:	2202      	movs	r2, #2
     fc8:	4393      	bics	r3, r2
     fca:	4319      	orrs	r1, r3
     fcc:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
     fce:	6862      	ldr	r2, [r4, #4]
     fd0:	19d2      	adds	r2, r2, r7
     fd2:	002b      	movs	r3, r5
     fd4:	4641      	mov	r1, r8
     fd6:	4847      	ldr	r0, [pc, #284]	; (10f4 <udd_ep_transfer_process+0x198>)
     fd8:	4c47      	ldr	r4, [pc, #284]	; (10f8 <udd_ep_transfer_process+0x19c>)
     fda:	47a0      	blx	r4
     fdc:	e07d      	b.n	10da <udd_ep_transfer_process+0x17e>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
     fde:	7c83      	ldrb	r3, [r0, #18]
     fe0:	079b      	lsls	r3, r3, #30
     fe2:	d50b      	bpl.n	ffc <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
     fe4:	7c83      	ldrb	r3, [r0, #18]
     fe6:	2202      	movs	r2, #2
     fe8:	4393      	bics	r3, r2
     fea:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
     fec:	6842      	ldr	r2, [r0, #4]
     fee:	19d2      	adds	r2, r2, r7
     ff0:	2300      	movs	r3, #0
     ff2:	4641      	mov	r1, r8
     ff4:	483f      	ldr	r0, [pc, #252]	; (10f4 <udd_ep_transfer_process+0x198>)
     ff6:	4c40      	ldr	r4, [pc, #256]	; (10f8 <udd_ep_transfer_process+0x19c>)
     ff8:	47a0      	blx	r4
     ffa:	e06e      	b.n	10da <udd_ep_transfer_process+0x17e>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
     ffc:	7c83      	ldrb	r3, [r0, #18]
     ffe:	2201      	movs	r2, #1
    1000:	4393      	bics	r3, r2
    1002:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1004:	6803      	ldr	r3, [r0, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d067      	beq.n	10da <udd_ep_transfer_process+0x17e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    100a:	0032      	movs	r2, r6
    100c:	0039      	movs	r1, r7
    100e:	2000      	movs	r0, #0
    1010:	4798      	blx	r3
    1012:	e062      	b.n	10da <udd_ep_transfer_process+0x17e>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    1014:	0030      	movs	r0, r6
    1016:	4b33      	ldr	r3, [pc, #204]	; (10e4 <udd_ep_transfer_process+0x188>)
    1018:	4798      	blx	r3
    101a:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    101c:	270f      	movs	r7, #15
    101e:	4037      	ands	r7, r6

	ep_size = ptr_job->ep_size;
    1020:	8a03      	ldrh	r3, [r0, #16]
    1022:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    1024:	464b      	mov	r3, r9
    1026:	881b      	ldrh	r3, [r3, #0]
    1028:	469a      	mov	sl, r3

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    102a:	7c83      	ldrb	r3, [r0, #18]
    102c:	075b      	lsls	r3, r3, #29
    102e:	d510      	bpl.n	1052 <udd_ep_transfer_process+0xf6>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1030:	6843      	ldr	r3, [r0, #4]
    1032:	68c2      	ldr	r2, [r0, #12]
    1034:	4694      	mov	ip, r2
    1036:	4463      	add	r3, ip
    1038:	001d      	movs	r5, r3
    103a:	4641      	mov	r1, r8
    103c:	6880      	ldr	r0, [r0, #8]
    103e:	4b2c      	ldr	r3, [pc, #176]	; (10f0 <udd_ep_transfer_process+0x194>)
    1040:	4798      	blx	r3
    1042:	000a      	movs	r2, r1
    1044:	1e79      	subs	r1, r7, #1
    1046:	0189      	lsls	r1, r1, #6
    1048:	4b2c      	ldr	r3, [pc, #176]	; (10fc <udd_ep_transfer_process+0x1a0>)
    104a:	18c9      	adds	r1, r1, r3
    104c:	0028      	movs	r0, r5
    104e:	4b2c      	ldr	r3, [pc, #176]	; (1100 <udd_ep_transfer_process+0x1a4>)
    1050:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    1052:	68e3      	ldr	r3, [r4, #12]
    1054:	4453      	add	r3, sl
    1056:	1e1d      	subs	r5, r3, #0
    1058:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    105a:	68a3      	ldr	r3, [r4, #8]
    105c:	429d      	cmp	r5, r3
    105e:	d901      	bls.n	1064 <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    1060:	60e3      	str	r3, [r4, #12]
    1062:	e02f      	b.n	10c4 <udd_ep_transfer_process+0x168>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1064:	464a      	mov	r2, r9
    1066:	8892      	ldrh	r2, [r2, #4]
    1068:	4552      	cmp	r2, sl
    106a:	d12b      	bne.n	10c4 <udd_ep_transfer_process+0x168>
    106c:	429d      	cmp	r5, r3
    106e:	d029      	beq.n	10c4 <udd_ep_transfer_process+0x168>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1070:	1b5b      	subs	r3, r3, r5
    1072:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1074:	4b1c      	ldr	r3, [pc, #112]	; (10e8 <udd_ep_transfer_process+0x18c>)
    1076:	429e      	cmp	r6, r3
    1078:	d907      	bls.n	108a <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    107a:	001e      	movs	r6, r3
    107c:	4641      	mov	r1, r8
    107e:	0018      	movs	r0, r3
    1080:	4b1a      	ldr	r3, [pc, #104]	; (10ec <udd_ep_transfer_process+0x190>)
    1082:	4798      	blx	r3
    1084:	1a73      	subs	r3, r6, r1
    1086:	b29b      	uxth	r3, r3
    1088:	e005      	b.n	1096 <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    108a:	4641      	mov	r1, r8
    108c:	0030      	movs	r0, r6
    108e:	4b18      	ldr	r3, [pc, #96]	; (10f0 <udd_ep_transfer_process+0x194>)
    1090:	4798      	blx	r3
    1092:	1a73      	subs	r3, r6, r1
    1094:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    1096:	4598      	cmp	r8, r3
    1098:	d90d      	bls.n	10b6 <udd_ep_transfer_process+0x15a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    109a:	7ca2      	ldrb	r2, [r4, #18]
    109c:	2304      	movs	r3, #4
    109e:	4313      	orrs	r3, r2
    10a0:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    10a2:	1e7a      	subs	r2, r7, #1
    10a4:	0192      	lsls	r2, r2, #6
    10a6:	4b15      	ldr	r3, [pc, #84]	; (10fc <udd_ep_transfer_process+0x1a0>)
    10a8:	18d2      	adds	r2, r2, r3
    10aa:	4643      	mov	r3, r8
    10ac:	0039      	movs	r1, r7
    10ae:	4811      	ldr	r0, [pc, #68]	; (10f4 <udd_ep_transfer_process+0x198>)
    10b0:	4c14      	ldr	r4, [pc, #80]	; (1104 <udd_ep_transfer_process+0x1a8>)
    10b2:	47a0      	blx	r4
    10b4:	e011      	b.n	10da <udd_ep_transfer_process+0x17e>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    10b6:	6862      	ldr	r2, [r4, #4]
    10b8:	1952      	adds	r2, r2, r5
    10ba:	0039      	movs	r1, r7
    10bc:	480d      	ldr	r0, [pc, #52]	; (10f4 <udd_ep_transfer_process+0x198>)
    10be:	4c11      	ldr	r4, [pc, #68]	; (1104 <udd_ep_transfer_process+0x1a8>)
    10c0:	47a0      	blx	r4
    10c2:	e00a      	b.n	10da <udd_ep_transfer_process+0x17e>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    10c4:	7ca3      	ldrb	r3, [r4, #18]
    10c6:	2201      	movs	r2, #1
    10c8:	4393      	bics	r3, r2
    10ca:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    10cc:	6823      	ldr	r3, [r4, #0]
    10ce:	2b00      	cmp	r3, #0
    10d0:	d003      	beq.n	10da <udd_ep_transfer_process+0x17e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    10d2:	68e1      	ldr	r1, [r4, #12]
    10d4:	0032      	movs	r2, r6
    10d6:	2000      	movs	r0, #0
    10d8:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    10da:	bc1c      	pop	{r2, r3, r4}
    10dc:	4690      	mov	r8, r2
    10de:	4699      	mov	r9, r3
    10e0:	46a2      	mov	sl, r4
    10e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10e4:	00000f41 	.word	0x00000f41
    10e8:	00001fff 	.word	0x00001fff
    10ec:	00003735 	.word	0x00003735
    10f0:	00003561 	.word	0x00003561
    10f4:	20000430 	.word	0x20000430
    10f8:	00002125 	.word	0x00002125
    10fc:	20000370 	.word	0x20000370
    1100:	000037cd 	.word	0x000037cd
    1104:	00002175 	.word	0x00002175

00001108 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1108:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    110a:	2205      	movs	r2, #5
    110c:	4b05      	ldr	r3, [pc, #20]	; (1124 <udd_ctrl_stall_data+0x1c>)
    110e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1110:	4c05      	ldr	r4, [pc, #20]	; (1128 <udd_ctrl_stall_data+0x20>)
    1112:	2180      	movs	r1, #128	; 0x80
    1114:	0020      	movs	r0, r4
    1116:	4b05      	ldr	r3, [pc, #20]	; (112c <udd_ctrl_stall_data+0x24>)
    1118:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    111a:	2100      	movs	r1, #0
    111c:	0020      	movs	r0, r4
    111e:	4b04      	ldr	r3, [pc, #16]	; (1130 <udd_ctrl_stall_data+0x28>)
    1120:	4798      	blx	r3
}
    1122:	bd10      	pop	{r4, pc}
    1124:	200002e7 	.word	0x200002e7
    1128:	20000430 	.word	0x20000430
    112c:	00002075 	.word	0x00002075
    1130:	0000209d 	.word	0x0000209d

00001134 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1134:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1136:	4c08      	ldr	r4, [pc, #32]	; (1158 <_usb_device_lpm_suspend+0x24>)
    1138:	2106      	movs	r1, #6
    113a:	0020      	movs	r0, r4
    113c:	4d07      	ldr	r5, [pc, #28]	; (115c <_usb_device_lpm_suspend+0x28>)
    113e:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1140:	2104      	movs	r1, #4
    1142:	0020      	movs	r0, r4
    1144:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1146:	2102      	movs	r1, #2
    1148:	0020      	movs	r0, r4
    114a:	4b05      	ldr	r3, [pc, #20]	; (1160 <_usb_device_lpm_suspend+0x2c>)
    114c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    114e:	2002      	movs	r0, #2
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <_usb_device_lpm_suspend+0x30>)
    1152:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1154:	bd70      	pop	{r4, r5, r6, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	20000430 	.word	0x20000430
    115c:	00001b85 	.word	0x00001b85
    1160:	00001b65 	.word	0x00001b65
    1164:	00000e85 	.word	0x00000e85

00001168 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1168:	b570      	push	{r4, r5, r6, lr}
#if (SAML21) || (SAML22) || (SAMR30)
#define DFLL_READY_FLAG (OSCCTRL_STATUS_DFLLRDY | \
		OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    116a:	4b13      	ldr	r3, [pc, #76]	; (11b8 <_usb_on_wakeup+0x50>)
    116c:	8b1b      	ldrh	r3, [r3, #24]
    116e:	069b      	lsls	r3, r3, #26
    1170:	d407      	bmi.n	1182 <_usb_on_wakeup+0x1a>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1172:	4911      	ldr	r1, [pc, #68]	; (11b8 <_usb_on_wakeup+0x50>)
    1174:	22d0      	movs	r2, #208	; 0xd0
    1176:	0112      	lsls	r2, r2, #4
    1178:	68cb      	ldr	r3, [r1, #12]
    117a:	4013      	ands	r3, r2
    117c:	4293      	cmp	r3, r2
    117e:	d1fb      	bne.n	1178 <_usb_on_wakeup+0x10>
    1180:	e005      	b.n	118e <_usb_on_wakeup+0x26>
		} else {
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    1182:	490d      	ldr	r1, [pc, #52]	; (11b8 <_usb_on_wakeup+0x50>)
    1184:	2280      	movs	r2, #128	; 0x80
    1186:	0052      	lsls	r2, r2, #1
    1188:	68cb      	ldr	r3, [r1, #12]
    118a:	4213      	tst	r3, r2
    118c:	d0fc      	beq.n	1188 <_usb_on_wakeup+0x20>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    118e:	4c0b      	ldr	r4, [pc, #44]	; (11bc <_usb_on_wakeup+0x54>)
    1190:	2102      	movs	r1, #2
    1192:	0020      	movs	r0, r4
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <_usb_on_wakeup+0x58>)
    1196:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1198:	2104      	movs	r1, #4
    119a:	0020      	movs	r0, r4
    119c:	4d09      	ldr	r5, [pc, #36]	; (11c4 <_usb_on_wakeup+0x5c>)
    119e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    11a0:	4a09      	ldr	r2, [pc, #36]	; (11c8 <_usb_on_wakeup+0x60>)
    11a2:	2106      	movs	r1, #6
    11a4:	0020      	movs	r0, r4
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <_usb_on_wakeup+0x64>)
    11a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    11aa:	2106      	movs	r1, #6
    11ac:	0020      	movs	r0, r4
    11ae:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    11b0:	2003      	movs	r0, #3
    11b2:	4b07      	ldr	r3, [pc, #28]	; (11d0 <_usb_on_wakeup+0x68>)
    11b4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    11b6:	bd70      	pop	{r4, r5, r6, pc}
    11b8:	40000c00 	.word	0x40000c00
    11bc:	20000430 	.word	0x20000430
    11c0:	00001b85 	.word	0x00001b85
    11c4:	00001b65 	.word	0x00001b65
    11c8:	00001135 	.word	0x00001135
    11cc:	00001b41 	.word	0x00001b41
    11d0:	00000e85 	.word	0x00000e85

000011d4 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    11d4:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    11d6:	4c06      	ldr	r4, [pc, #24]	; (11f0 <_usb_on_suspend+0x1c>)
    11d8:	2104      	movs	r1, #4
    11da:	0020      	movs	r0, r4
    11dc:	4b05      	ldr	r3, [pc, #20]	; (11f4 <_usb_on_suspend+0x20>)
    11de:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    11e0:	2102      	movs	r1, #2
    11e2:	0020      	movs	r0, r4
    11e4:	4b04      	ldr	r3, [pc, #16]	; (11f8 <_usb_on_suspend+0x24>)
    11e6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    11e8:	2001      	movs	r0, #1
    11ea:	4b04      	ldr	r3, [pc, #16]	; (11fc <_usb_on_suspend+0x28>)
    11ec:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
#endif
}
    11ee:	bd10      	pop	{r4, pc}
    11f0:	20000430 	.word	0x20000430
    11f4:	00001b85 	.word	0x00001b85
    11f8:	00001b65 	.word	0x00001b65
    11fc:	00000e85 	.word	0x00000e85

00001200 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    1200:	b530      	push	{r4, r5, lr}
    1202:	b083      	sub	sp, #12
    1204:	0004      	movs	r4, r0
	// Reset USB Device Stack Core
	udc_reset();
    1206:	4b1e      	ldr	r3, [pc, #120]	; (1280 <_usb_on_bus_reset+0x80>)
    1208:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    120a:	2380      	movs	r3, #128	; 0x80
    120c:	6822      	ldr	r2, [r4, #0]
    120e:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1210:	ad01      	add	r5, sp, #4
    1212:	0028      	movs	r0, r5
    1214:	4b1b      	ldr	r3, [pc, #108]	; (1284 <_usb_on_bus_reset+0x84>)
    1216:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1218:	2303      	movs	r3, #3
    121a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    121c:	0029      	movs	r1, r5
    121e:	0020      	movs	r0, r4
    1220:	4b19      	ldr	r3, [pc, #100]	; (1288 <_usb_on_bus_reset+0x88>)
    1222:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1224:	4919      	ldr	r1, [pc, #100]	; (128c <_usb_on_bus_reset+0x8c>)
    1226:	0020      	movs	r0, r4
    1228:	4b19      	ldr	r3, [pc, #100]	; (1290 <_usb_on_bus_reset+0x90>)
    122a:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    122c:	4b19      	ldr	r3, [pc, #100]	; (1294 <_usb_on_bus_reset+0x94>)
    122e:	2202      	movs	r2, #2
    1230:	2100      	movs	r1, #0
    1232:	0020      	movs	r0, r4
    1234:	4d18      	ldr	r5, [pc, #96]	; (1298 <_usb_on_bus_reset+0x98>)
    1236:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1238:	4b18      	ldr	r3, [pc, #96]	; (129c <_usb_on_bus_reset+0x9c>)
    123a:	2200      	movs	r2, #0
    123c:	2100      	movs	r1, #0
    123e:	0020      	movs	r0, r4
    1240:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1242:	4b17      	ldr	r3, [pc, #92]	; (12a0 <_usb_on_bus_reset+0xa0>)
    1244:	2201      	movs	r2, #1
    1246:	2100      	movs	r1, #0
    1248:	0020      	movs	r0, r4
    124a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    124c:	2202      	movs	r2, #2
    124e:	2100      	movs	r1, #0
    1250:	0020      	movs	r0, r4
    1252:	4d14      	ldr	r5, [pc, #80]	; (12a4 <_usb_on_bus_reset+0xa4>)
    1254:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1256:	2200      	movs	r2, #0
    1258:	2100      	movs	r1, #0
    125a:	0020      	movs	r0, r4
    125c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    125e:	2201      	movs	r2, #1
    1260:	2100      	movs	r1, #0
    1262:	0020      	movs	r0, r4
    1264:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1266:	6822      	ldr	r2, [r4, #0]
    1268:	8911      	ldrh	r1, [r2, #8]
    126a:	4b0f      	ldr	r3, [pc, #60]	; (12a8 <_usb_on_bus_reset+0xa8>)
    126c:	400b      	ands	r3, r1
    126e:	2180      	movs	r1, #128	; 0x80
    1270:	00c9      	lsls	r1, r1, #3
    1272:	430b      	orrs	r3, r1
    1274:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1276:	2200      	movs	r2, #0
    1278:	4b0c      	ldr	r3, [pc, #48]	; (12ac <_usb_on_bus_reset+0xac>)
    127a:	701a      	strb	r2, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    127c:	b003      	add	sp, #12
    127e:	bd30      	pop	{r4, r5, pc}
    1280:	000008b1 	.word	0x000008b1
    1284:	00001da9 	.word	0x00001da9
    1288:	00001db9 	.word	0x00001db9
    128c:	200005b0 	.word	0x200005b0
    1290:	000021c1 	.word	0x000021c1
    1294:	000013e5 	.word	0x000013e5
    1298:	00001ba1 	.word	0x00001ba1
    129c:	000016d5 	.word	0x000016d5
    12a0:	000012ed 	.word	0x000012ed
    12a4:	00001bf1 	.word	0x00001bf1
    12a8:	fffff3ff 	.word	0xfffff3ff
    12ac:	200002e7 	.word	0x200002e7

000012b0 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    12b0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    12b2:	2203      	movs	r2, #3
    12b4:	4b07      	ldr	r3, [pc, #28]	; (12d4 <udd_ctrl_send_zlp_in+0x24>)
    12b6:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    12b8:	4c07      	ldr	r4, [pc, #28]	; (12d8 <udd_ctrl_send_zlp_in+0x28>)
    12ba:	4908      	ldr	r1, [pc, #32]	; (12dc <udd_ctrl_send_zlp_in+0x2c>)
    12bc:	0020      	movs	r0, r4
    12be:	4b08      	ldr	r3, [pc, #32]	; (12e0 <udd_ctrl_send_zlp_in+0x30>)
    12c0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    12c2:	4b08      	ldr	r3, [pc, #32]	; (12e4 <udd_ctrl_send_zlp_in+0x34>)
    12c4:	689a      	ldr	r2, [r3, #8]
    12c6:	2300      	movs	r3, #0
    12c8:	2100      	movs	r1, #0
    12ca:	0020      	movs	r0, r4
    12cc:	4c06      	ldr	r4, [pc, #24]	; (12e8 <udd_ctrl_send_zlp_in+0x38>)
    12ce:	47a0      	blx	r4
}
    12d0:	bd10      	pop	{r4, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	200002e7 	.word	0x200002e7
    12d8:	20000430 	.word	0x20000430
    12dc:	200005b0 	.word	0x200005b0
    12e0:	000021c1 	.word	0x000021c1
    12e4:	20000598 	.word	0x20000598
    12e8:	00002125 	.word	0x00002125

000012ec <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    12ec:	b510      	push	{r4, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    12ee:	7989      	ldrb	r1, [r1, #6]
    12f0:	b24b      	sxtb	r3, r1
    12f2:	2b00      	cmp	r3, #0
    12f4:	da0c      	bge.n	1310 <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    12f6:	4b0d      	ldr	r3, [pc, #52]	; (132c <_usb_ep0_on_tansfer_fail+0x40>)
    12f8:	781b      	ldrb	r3, [r3, #0]
    12fa:	2b01      	cmp	r3, #1
    12fc:	d102      	bne.n	1304 <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    12fe:	4b0c      	ldr	r3, [pc, #48]	; (1330 <_usb_ep0_on_tansfer_fail+0x44>)
    1300:	4798      	blx	r3
    1302:	e012      	b.n	132a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1304:	2b04      	cmp	r3, #4
    1306:	d110      	bne.n	132a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1308:	480a      	ldr	r0, [pc, #40]	; (1334 <_usb_ep0_on_tansfer_fail+0x48>)
    130a:	4b0b      	ldr	r3, [pc, #44]	; (1338 <_usb_ep0_on_tansfer_fail+0x4c>)
    130c:	4798      	blx	r3
    130e:	e00c      	b.n	132a <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1310:	4b06      	ldr	r3, [pc, #24]	; (132c <_usb_ep0_on_tansfer_fail+0x40>)
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	2b02      	cmp	r3, #2
    1316:	d103      	bne.n	1320 <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1318:	2204      	movs	r2, #4
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <_usb_ep0_on_tansfer_fail+0x40>)
    131c:	701a      	strb	r2, [r3, #0]
    131e:	e004      	b.n	132a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1320:	2b03      	cmp	r3, #3
    1322:	d102      	bne.n	132a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1324:	4803      	ldr	r0, [pc, #12]	; (1334 <_usb_ep0_on_tansfer_fail+0x48>)
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <_usb_ep0_on_tansfer_fail+0x4c>)
    1328:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    132a:	bd10      	pop	{r4, pc}
    132c:	200002e7 	.word	0x200002e7
    1330:	000012b1 	.word	0x000012b1
    1334:	20000430 	.word	0x20000430
    1338:	00002075 	.word	0x00002075

0000133c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    133c:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    133e:	4b20      	ldr	r3, [pc, #128]	; (13c0 <udd_ctrl_in_sent+0x84>)
    1340:	881a      	ldrh	r2, [r3, #0]
    1342:	4b20      	ldr	r3, [pc, #128]	; (13c4 <udd_ctrl_in_sent+0x88>)
    1344:	899c      	ldrh	r4, [r3, #12]
    1346:	1aa4      	subs	r4, r4, r2
    1348:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    134a:	2c00      	cmp	r4, #0
    134c:	d120      	bne.n	1390 <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    134e:	491e      	ldr	r1, [pc, #120]	; (13c8 <udd_ctrl_in_sent+0x8c>)
    1350:	880b      	ldrh	r3, [r1, #0]
    1352:	18d3      	adds	r3, r2, r3
    1354:	b29b      	uxth	r3, r3
    1356:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1358:	4a1a      	ldr	r2, [pc, #104]	; (13c4 <udd_ctrl_in_sent+0x88>)
    135a:	88d2      	ldrh	r2, [r2, #6]
    135c:	429a      	cmp	r2, r3
    135e:	d003      	beq.n	1368 <udd_ctrl_in_sent+0x2c>
    1360:	4b1a      	ldr	r3, [pc, #104]	; (13cc <udd_ctrl_in_sent+0x90>)
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	2b00      	cmp	r3, #0
    1366:	d007      	beq.n	1378 <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1368:	2204      	movs	r2, #4
    136a:	4b19      	ldr	r3, [pc, #100]	; (13d0 <udd_ctrl_in_sent+0x94>)
    136c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    136e:	4919      	ldr	r1, [pc, #100]	; (13d4 <udd_ctrl_in_sent+0x98>)
    1370:	4819      	ldr	r0, [pc, #100]	; (13d8 <udd_ctrl_in_sent+0x9c>)
    1372:	4b1a      	ldr	r3, [pc, #104]	; (13dc <udd_ctrl_in_sent+0xa0>)
    1374:	4798      	blx	r3
			return;
    1376:	e022      	b.n	13be <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1378:	4b12      	ldr	r3, [pc, #72]	; (13c4 <udd_ctrl_in_sent+0x88>)
    137a:	695b      	ldr	r3, [r3, #20]
    137c:	2b00      	cmp	r3, #0
    137e:	d00e      	beq.n	139e <udd_ctrl_in_sent+0x62>
    1380:	4798      	blx	r3
    1382:	2800      	cmp	r0, #0
    1384:	d00b      	beq.n	139e <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    1386:	2200      	movs	r2, #0
    1388:	4b0d      	ldr	r3, [pc, #52]	; (13c0 <udd_ctrl_in_sent+0x84>)
    138a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    138c:	4b0d      	ldr	r3, [pc, #52]	; (13c4 <udd_ctrl_in_sent+0x88>)
    138e:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1390:	2c3f      	cmp	r4, #63	; 0x3f
    1392:	d904      	bls.n	139e <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    1394:	2200      	movs	r2, #0
    1396:	4b0d      	ldr	r3, [pc, #52]	; (13cc <udd_ctrl_in_sent+0x90>)
    1398:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    139a:	2440      	movs	r4, #64	; 0x40
    139c:	e002      	b.n	13a4 <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    139e:	2201      	movs	r2, #1
    13a0:	4b0a      	ldr	r3, [pc, #40]	; (13cc <udd_ctrl_in_sent+0x90>)
    13a2:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    13a4:	4d06      	ldr	r5, [pc, #24]	; (13c0 <udd_ctrl_in_sent+0x84>)
    13a6:	882b      	ldrh	r3, [r5, #0]
    13a8:	4a06      	ldr	r2, [pc, #24]	; (13c4 <udd_ctrl_in_sent+0x88>)
    13aa:	6892      	ldr	r2, [r2, #8]
    13ac:	18d2      	adds	r2, r2, r3
    13ae:	0023      	movs	r3, r4
    13b0:	2100      	movs	r1, #0
    13b2:	4809      	ldr	r0, [pc, #36]	; (13d8 <udd_ctrl_in_sent+0x9c>)
    13b4:	4e0a      	ldr	r6, [pc, #40]	; (13e0 <udd_ctrl_in_sent+0xa4>)
    13b6:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    13b8:	882b      	ldrh	r3, [r5, #0]
    13ba:	18e4      	adds	r4, r4, r3
    13bc:	802c      	strh	r4, [r5, #0]
}
    13be:	bd70      	pop	{r4, r5, r6, pc}
    13c0:	200002e4 	.word	0x200002e4
    13c4:	20000598 	.word	0x20000598
    13c8:	20000268 	.word	0x20000268
    13cc:	200002e6 	.word	0x200002e6
    13d0:	200002e7 	.word	0x200002e7
    13d4:	200005b0 	.word	0x200005b0
    13d8:	20000430 	.word	0x20000430
    13dc:	000021c1 	.word	0x000021c1
    13e0:	00002125 	.word	0x00002125

000013e4 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	000c      	movs	r4, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    13e8:	4b2c      	ldr	r3, [pc, #176]	; (149c <_usb_ep0_on_setup+0xb8>)
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d007      	beq.n	1400 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    13f0:	4b2b      	ldr	r3, [pc, #172]	; (14a0 <_usb_ep0_on_setup+0xbc>)
    13f2:	691b      	ldr	r3, [r3, #16]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d000      	beq.n	13fa <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    13f8:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    13fa:	2200      	movs	r2, #0
    13fc:	4b27      	ldr	r3, [pc, #156]	; (149c <_usb_ep0_on_setup+0xb8>)
    13fe:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    1400:	8823      	ldrh	r3, [r4, #0]
    1402:	2b08      	cmp	r3, #8
    1404:	d002      	beq.n	140c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1406:	4b27      	ldr	r3, [pc, #156]	; (14a4 <_usb_ep0_on_setup+0xc0>)
    1408:	4798      	blx	r3
		return;
    140a:	e045      	b.n	1498 <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    140c:	4a24      	ldr	r2, [pc, #144]	; (14a0 <_usb_ep0_on_setup+0xbc>)
    140e:	4b26      	ldr	r3, [pc, #152]	; (14a8 <_usb_ep0_on_setup+0xc4>)
    1410:	7819      	ldrb	r1, [r3, #0]
    1412:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1414:	7859      	ldrb	r1, [r3, #1]
    1416:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1418:	78d9      	ldrb	r1, [r3, #3]
    141a:	0209      	lsls	r1, r1, #8
    141c:	7898      	ldrb	r0, [r3, #2]
    141e:	1841      	adds	r1, r0, r1
    1420:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1422:	7959      	ldrb	r1, [r3, #5]
    1424:	0209      	lsls	r1, r1, #8
    1426:	7918      	ldrb	r0, [r3, #4]
    1428:	1841      	adds	r1, r0, r1
    142a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    142c:	79d9      	ldrb	r1, [r3, #7]
    142e:	0209      	lsls	r1, r1, #8
    1430:	799b      	ldrb	r3, [r3, #6]
    1432:	185b      	adds	r3, r3, r1
    1434:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    1436:	4b1d      	ldr	r3, [pc, #116]	; (14ac <_usb_ep0_on_setup+0xc8>)
    1438:	4798      	blx	r3
    143a:	2800      	cmp	r0, #0
    143c:	d102      	bne.n	1444 <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    143e:	4b19      	ldr	r3, [pc, #100]	; (14a4 <_usb_ep0_on_setup+0xc0>)
    1440:	4798      	blx	r3
			return;
    1442:	e029      	b.n	1498 <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    1444:	4b16      	ldr	r3, [pc, #88]	; (14a0 <_usb_ep0_on_setup+0xbc>)
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	2b7f      	cmp	r3, #127	; 0x7f
    144a:	d910      	bls.n	146e <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    144c:	2300      	movs	r3, #0
    144e:	4a18      	ldr	r2, [pc, #96]	; (14b0 <_usb_ep0_on_setup+0xcc>)
    1450:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1452:	4a18      	ldr	r2, [pc, #96]	; (14b4 <_usb_ep0_on_setup+0xd0>)
    1454:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1456:	2202      	movs	r2, #2
    1458:	4b10      	ldr	r3, [pc, #64]	; (149c <_usb_ep0_on_setup+0xb8>)
    145a:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    145c:	2340      	movs	r3, #64	; 0x40
    145e:	4a12      	ldr	r2, [pc, #72]	; (14a8 <_usb_ep0_on_setup+0xc4>)
    1460:	2100      	movs	r1, #0
    1462:	4815      	ldr	r0, [pc, #84]	; (14b8 <_usb_ep0_on_setup+0xd4>)
    1464:	4c15      	ldr	r4, [pc, #84]	; (14bc <_usb_ep0_on_setup+0xd8>)
    1466:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1468:	4b15      	ldr	r3, [pc, #84]	; (14c0 <_usb_ep0_on_setup+0xdc>)
    146a:	4798      	blx	r3
    146c:	e014      	b.n	1498 <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    146e:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <_usb_ep0_on_setup+0xbc>)
    1470:	88db      	ldrh	r3, [r3, #6]
    1472:	2b00      	cmp	r3, #0
    1474:	d102      	bne.n	147c <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    1476:	4b13      	ldr	r3, [pc, #76]	; (14c4 <_usb_ep0_on_setup+0xe0>)
    1478:	4798      	blx	r3
				return;
    147a:	e00d      	b.n	1498 <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    147c:	2300      	movs	r3, #0
    147e:	4a0c      	ldr	r2, [pc, #48]	; (14b0 <_usb_ep0_on_setup+0xcc>)
    1480:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1482:	4a0c      	ldr	r2, [pc, #48]	; (14b4 <_usb_ep0_on_setup+0xd0>)
    1484:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1486:	2201      	movs	r2, #1
    1488:	4b04      	ldr	r3, [pc, #16]	; (149c <_usb_ep0_on_setup+0xb8>)
    148a:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    148c:	2340      	movs	r3, #64	; 0x40
    148e:	4a06      	ldr	r2, [pc, #24]	; (14a8 <_usb_ep0_on_setup+0xc4>)
    1490:	2100      	movs	r1, #0
    1492:	4809      	ldr	r0, [pc, #36]	; (14b8 <_usb_ep0_on_setup+0xd4>)
    1494:	4c09      	ldr	r4, [pc, #36]	; (14bc <_usb_ep0_on_setup+0xd8>)
    1496:	47a0      	blx	r4
			}
		}
	}
}
    1498:	bd10      	pop	{r4, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	200002e7 	.word	0x200002e7
    14a0:	20000598 	.word	0x20000598
    14a4:	00001109 	.word	0x00001109
    14a8:	200005b0 	.word	0x200005b0
    14ac:	0000093d 	.word	0x0000093d
    14b0:	20000268 	.word	0x20000268
    14b4:	200002e4 	.word	0x200002e4
    14b8:	20000430 	.word	0x20000430
    14bc:	00002175 	.word	0x00002175
    14c0:	0000133d 	.word	0x0000133d
    14c4:	000012b1 	.word	0x000012b1

000014c8 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    14c8:	b510      	push	{r4, lr}
	udc_sof_notify();
    14ca:	4b01      	ldr	r3, [pc, #4]	; (14d0 <_usb_on_sof_notify+0x8>)
    14cc:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	000008fd 	.word	0x000008fd

000014d4 <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    14d4:	b510      	push	{r4, lr}
    14d6:	0004      	movs	r4, r0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    14d8:	0001      	movs	r1, r0
    14da:	480a      	ldr	r0, [pc, #40]	; (1504 <udd_ep_abort+0x30>)
    14dc:	4b0a      	ldr	r3, [pc, #40]	; (1508 <udd_ep_abort+0x34>)
    14de:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    14e0:	0020      	movs	r0, r4
    14e2:	4b0a      	ldr	r3, [pc, #40]	; (150c <udd_ep_abort+0x38>)
    14e4:	4798      	blx	r3
	if (!ptr_job->busy) {
    14e6:	7c83      	ldrb	r3, [r0, #18]
    14e8:	07db      	lsls	r3, r3, #31
    14ea:	d50a      	bpl.n	1502 <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    14ec:	7c83      	ldrb	r3, [r0, #18]
    14ee:	2201      	movs	r2, #1
    14f0:	4393      	bics	r3, r2
    14f2:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    14f4:	6803      	ldr	r3, [r0, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d003      	beq.n	1502 <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    14fa:	68c1      	ldr	r1, [r0, #12]
    14fc:	0022      	movs	r2, r4
    14fe:	2001      	movs	r0, #1
    1500:	4798      	blx	r3
	}
}
    1502:	bd10      	pop	{r4, pc}
    1504:	20000430 	.word	0x20000430
    1508:	00002011 	.word	0x00002011
    150c:	00000f41 	.word	0x00000f41

00001510 <udd_is_high_speed>:
bool udd_is_high_speed(void)
{
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1 || SAMR30
	return false;
#endif
}
    1510:	2000      	movs	r0, #0
    1512:	4770      	bx	lr

00001514 <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    1514:	4b02      	ldr	r3, [pc, #8]	; (1520 <udd_get_frame_number+0xc>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	8a18      	ldrh	r0, [r3, #16]
    151a:	0480      	lsls	r0, r0, #18
    151c:	0d40      	lsrs	r0, r0, #21

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    151e:	4770      	bx	lr
    1520:	20000430 	.word	0x20000430

00001524 <udd_get_micro_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    1524:	4b02      	ldr	r3, [pc, #8]	; (1530 <udd_get_micro_frame_number+0xc>)
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	8a18      	ldrh	r0, [r3, #16]
    152a:	b280      	uxth	r0, r0

uint16_t udd_get_micro_frame_number(void)
{
	return usb_device_get_micro_frame_number(&usb_device);
}
    152c:	4770      	bx	lr
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	20000430 	.word	0x20000430

00001534 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	b082      	sub	sp, #8
    1538:	0004      	movs	r4, r0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    153a:	ad01      	add	r5, sp, #4
    153c:	0028      	movs	r0, r5
    153e:	4b0d      	ldr	r3, [pc, #52]	; (1574 <udd_ep_free+0x40>)
    1540:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    1542:	0020      	movs	r0, r4
    1544:	4b0c      	ldr	r3, [pc, #48]	; (1578 <udd_ep_free+0x44>)
    1546:	4798      	blx	r3

	config_ep.ep_address = ep;
    1548:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    154a:	2300      	movs	r3, #0
    154c:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    154e:	4e0b      	ldr	r6, [pc, #44]	; (157c <udd_ep_free+0x48>)
    1550:	0029      	movs	r1, r5
    1552:	0030      	movs	r0, r6
    1554:	4b0a      	ldr	r3, [pc, #40]	; (1580 <udd_ep_free+0x4c>)
    1556:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1558:	210f      	movs	r1, #15
    155a:	4021      	ands	r1, r4
    155c:	2200      	movs	r2, #0
    155e:	0030      	movs	r0, r6
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <udd_ep_free+0x50>)
    1562:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1564:	2200      	movs	r2, #0
    1566:	0021      	movs	r1, r4
    1568:	0030      	movs	r0, r6
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <udd_ep_free+0x54>)
    156c:	4798      	blx	r3
}
    156e:	b002      	add	sp, #8
    1570:	bd70      	pop	{r4, r5, r6, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	00001da9 	.word	0x00001da9
    1578:	000014d5 	.word	0x000014d5
    157c:	20000430 	.word	0x20000430
    1580:	00001db9 	.word	0x00001db9
    1584:	00001bc9 	.word	0x00001bc9
    1588:	00001ccd 	.word	0x00001ccd

0000158c <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    158c:	b5f0      	push	{r4, r5, r6, r7, lr}
    158e:	b083      	sub	sp, #12
    1590:	0006      	movs	r6, r0
    1592:	000c      	movs	r4, r1
    1594:	0015      	movs	r5, r2
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    1596:	af01      	add	r7, sp, #4
    1598:	0038      	movs	r0, r7
    159a:	4b36      	ldr	r3, [pc, #216]	; (1674 <udd_ep_alloc+0xe8>)
    159c:	4798      	blx	r3

	config_ep.ep_address = ep;
    159e:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    15a0:	2d08      	cmp	r5, #8
    15a2:	d803      	bhi.n	15ac <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    15a4:	2200      	movs	r2, #0
    15a6:	ab01      	add	r3, sp, #4
    15a8:	705a      	strb	r2, [r3, #1]
    15aa:	e02e      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    15ac:	2d10      	cmp	r5, #16
    15ae:	d803      	bhi.n	15b8 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    15b0:	2201      	movs	r2, #1
    15b2:	ab01      	add	r3, sp, #4
    15b4:	705a      	strb	r2, [r3, #1]
    15b6:	e028      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    15b8:	2d20      	cmp	r5, #32
    15ba:	d803      	bhi.n	15c4 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    15bc:	2202      	movs	r2, #2
    15be:	ab01      	add	r3, sp, #4
    15c0:	705a      	strb	r2, [r3, #1]
    15c2:	e022      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    15c4:	2d40      	cmp	r5, #64	; 0x40
    15c6:	d803      	bhi.n	15d0 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    15c8:	2203      	movs	r2, #3
    15ca:	ab01      	add	r3, sp, #4
    15cc:	705a      	strb	r2, [r3, #1]
    15ce:	e01c      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    15d0:	2d80      	cmp	r5, #128	; 0x80
    15d2:	d803      	bhi.n	15dc <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    15d4:	2204      	movs	r2, #4
    15d6:	ab01      	add	r3, sp, #4
    15d8:	705a      	strb	r2, [r3, #1]
    15da:	e016      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    15dc:	2380      	movs	r3, #128	; 0x80
    15de:	005b      	lsls	r3, r3, #1
    15e0:	429d      	cmp	r5, r3
    15e2:	d803      	bhi.n	15ec <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    15e4:	2205      	movs	r2, #5
    15e6:	ab01      	add	r3, sp, #4
    15e8:	705a      	strb	r2, [r3, #1]
    15ea:	e00e      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	009b      	lsls	r3, r3, #2
    15f0:	429d      	cmp	r5, r3
    15f2:	d803      	bhi.n	15fc <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    15f4:	2206      	movs	r2, #6
    15f6:	ab01      	add	r3, sp, #4
    15f8:	705a      	strb	r2, [r3, #1]
    15fa:	e006      	b.n	160a <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    15fc:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    15fe:	4a1e      	ldr	r2, [pc, #120]	; (1678 <udd_ep_alloc+0xec>)
    1600:	4295      	cmp	r5, r2
    1602:	d833      	bhi.n	166c <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1604:	2207      	movs	r2, #7
    1606:	ab01      	add	r3, sp, #4
    1608:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    160a:	0030      	movs	r0, r6
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <udd_ep_alloc+0xf0>)
    160e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    1610:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1612:	2103      	movs	r1, #3
    1614:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1616:	2901      	cmp	r1, #1
    1618:	d103      	bne.n	1622 <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    161a:	2202      	movs	r2, #2
    161c:	ab01      	add	r3, sp, #4
    161e:	70da      	strb	r2, [r3, #3]
    1620:	e00b      	b.n	163a <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    1622:	2902      	cmp	r1, #2
    1624:	d103      	bne.n	162e <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1626:	2203      	movs	r2, #3
    1628:	ab01      	add	r3, sp, #4
    162a:	70da      	strb	r2, [r3, #3]
    162c:	e005      	b.n	163a <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    162e:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1630:	2903      	cmp	r1, #3
    1632:	d11b      	bne.n	166c <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1634:	2204      	movs	r2, #4
    1636:	ab01      	add	r3, sp, #4
    1638:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    163a:	a901      	add	r1, sp, #4
    163c:	4810      	ldr	r0, [pc, #64]	; (1680 <udd_ep_alloc+0xf4>)
    163e:	4b11      	ldr	r3, [pc, #68]	; (1684 <udd_ep_alloc+0xf8>)
    1640:	4798      	blx	r3
		return false;
    1642:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1644:	2800      	cmp	r0, #0
    1646:	d111      	bne.n	166c <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1648:	210f      	movs	r1, #15
    164a:	4031      	ands	r1, r6
    164c:	4c0c      	ldr	r4, [pc, #48]	; (1680 <udd_ep_alloc+0xf4>)
    164e:	4b0e      	ldr	r3, [pc, #56]	; (1688 <udd_ep_alloc+0xfc>)
    1650:	2200      	movs	r2, #0
    1652:	0020      	movs	r0, r4
    1654:	4d0d      	ldr	r5, [pc, #52]	; (168c <udd_ep_alloc+0x100>)
    1656:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1658:	2200      	movs	r2, #0
    165a:	0031      	movs	r1, r6
    165c:	0020      	movs	r0, r4
    165e:	4d0c      	ldr	r5, [pc, #48]	; (1690 <udd_ep_alloc+0x104>)
    1660:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1662:	2201      	movs	r2, #1
    1664:	0031      	movs	r1, r6
    1666:	0020      	movs	r0, r4
    1668:	47a8      	blx	r5

	return true;
    166a:	2301      	movs	r3, #1
}
    166c:	0018      	movs	r0, r3
    166e:	b003      	add	sp, #12
    1670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	00001da9 	.word	0x00001da9
    1678:	000003ff 	.word	0x000003ff
    167c:	00000f41 	.word	0x00000f41
    1680:	20000430 	.word	0x20000430
    1684:	00001db9 	.word	0x00001db9
    1688:	00000f5d 	.word	0x00000f5d
    168c:	00001ba1 	.word	0x00001ba1
    1690:	00001bf1 	.word	0x00001bf1

00001694 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    1694:	b510      	push	{r4, lr}
    1696:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1698:	4801      	ldr	r0, [pc, #4]	; (16a0 <udd_ep_is_halted+0xc>)
    169a:	4b02      	ldr	r3, [pc, #8]	; (16a4 <udd_ep_is_halted+0x10>)
    169c:	4798      	blx	r3
}
    169e:	bd10      	pop	{r4, pc}
    16a0:	20000430 	.word	0x20000430
    16a4:	00002049 	.word	0x00002049

000016a8 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    16a8:	b510      	push	{r4, lr}
    16aa:	0004      	movs	r4, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    16ac:	230f      	movs	r3, #15
    16ae:	4003      	ands	r3, r0
		return false;
    16b0:	2000      	movs	r0, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    16b2:	2b03      	cmp	r3, #3
    16b4:	d807      	bhi.n	16c6 <udd_ep_set_halt+0x1e>
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    16b6:	0021      	movs	r1, r4
    16b8:	4803      	ldr	r0, [pc, #12]	; (16c8 <udd_ep_set_halt+0x20>)
    16ba:	4b04      	ldr	r3, [pc, #16]	; (16cc <udd_ep_set_halt+0x24>)
    16bc:	4798      	blx	r3

	udd_ep_abort(ep);
    16be:	0020      	movs	r0, r4
    16c0:	4b03      	ldr	r3, [pc, #12]	; (16d0 <udd_ep_set_halt+0x28>)
    16c2:	4798      	blx	r3
	return true;
    16c4:	2001      	movs	r0, #1
}
    16c6:	bd10      	pop	{r4, pc}
    16c8:	20000430 	.word	0x20000430
    16cc:	00002075 	.word	0x00002075
    16d0:	000014d5 	.word	0x000014d5

000016d4 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    16d4:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    16d6:	4b34      	ldr	r3, [pc, #208]	; (17a8 <_usb_ep0_on_tansfer_ok+0xd4>)
    16d8:	781b      	ldrb	r3, [r3, #0]
    16da:	2b01      	cmp	r3, #1
    16dc:	d155      	bne.n	178a <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    16de:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    16e0:	4b32      	ldr	r3, [pc, #200]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    16e2:	899b      	ldrh	r3, [r3, #12]
    16e4:	4a32      	ldr	r2, [pc, #200]	; (17b0 <_usb_ep0_on_tansfer_ok+0xdc>)
    16e6:	8814      	ldrh	r4, [r2, #0]
    16e8:	1962      	adds	r2, r4, r5
    16ea:	4293      	cmp	r3, r2
    16ec:	da01      	bge.n	16f2 <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    16ee:	1b1d      	subs	r5, r3, r4
    16f0:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    16f2:	4b2e      	ldr	r3, [pc, #184]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    16f4:	6898      	ldr	r0, [r3, #8]
    16f6:	1900      	adds	r0, r0, r4
    16f8:	002a      	movs	r2, r5
    16fa:	492e      	ldr	r1, [pc, #184]	; (17b4 <_usb_ep0_on_tansfer_ok+0xe0>)
    16fc:	4b2e      	ldr	r3, [pc, #184]	; (17b8 <_usb_ep0_on_tansfer_ok+0xe4>)
    16fe:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1700:	1964      	adds	r4, r4, r5
    1702:	b2a4      	uxth	r4, r4
    1704:	4b2a      	ldr	r3, [pc, #168]	; (17b0 <_usb_ep0_on_tansfer_ok+0xdc>)
    1706:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1708:	2d40      	cmp	r5, #64	; 0x40
    170a:	d106      	bne.n	171a <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    170c:	4b27      	ldr	r3, [pc, #156]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    170e:	88da      	ldrh	r2, [r3, #6]
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1710:	4b2a      	ldr	r3, [pc, #168]	; (17bc <_usb_ep0_on_tansfer_ok+0xe8>)
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1712:	881b      	ldrh	r3, [r3, #0]
    1714:	191b      	adds	r3, r3, r4
    1716:	429a      	cmp	r2, r3
    1718:	dc10      	bgt.n	173c <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    171a:	4b24      	ldr	r3, [pc, #144]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    171c:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    171e:	695b      	ldr	r3, [r3, #20]
    1720:	2b00      	cmp	r3, #0
    1722:	d008      	beq.n	1736 <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    1724:	4798      	blx	r3
    1726:	2800      	cmp	r0, #0
    1728:	d105      	bne.n	1736 <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    172a:	2205      	movs	r2, #5
    172c:	4b1e      	ldr	r3, [pc, #120]	; (17a8 <_usb_ep0_on_tansfer_ok+0xd4>)
    172e:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    1730:	4b23      	ldr	r3, [pc, #140]	; (17c0 <_usb_ep0_on_tansfer_ok+0xec>)
    1732:	4798      	blx	r3
    1734:	e036      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    1736:	4b23      	ldr	r3, [pc, #140]	; (17c4 <_usb_ep0_on_tansfer_ok+0xf0>)
    1738:	4798      	blx	r3
    173a:	e033      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    173c:	4b1b      	ldr	r3, [pc, #108]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    173e:	899b      	ldrh	r3, [r3, #12]
    1740:	42a3      	cmp	r3, r4
    1742:	d11b      	bne.n	177c <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    1744:	4b19      	ldr	r3, [pc, #100]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    1746:	695b      	ldr	r3, [r3, #20]
    1748:	2b00      	cmp	r3, #0
    174a:	d106      	bne.n	175a <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    174c:	2205      	movs	r2, #5
    174e:	4b16      	ldr	r3, [pc, #88]	; (17a8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1750:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1752:	2000      	movs	r0, #0
    1754:	4b1a      	ldr	r3, [pc, #104]	; (17c0 <_usb_ep0_on_tansfer_ok+0xec>)
    1756:	4798      	blx	r3
    1758:	e024      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    175a:	4798      	blx	r3
    175c:	2800      	cmp	r0, #0
    175e:	d105      	bne.n	176c <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1760:	2205      	movs	r2, #5
    1762:	4b11      	ldr	r3, [pc, #68]	; (17a8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1764:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1766:	4b16      	ldr	r3, [pc, #88]	; (17c0 <_usb_ep0_on_tansfer_ok+0xec>)
    1768:	4798      	blx	r3
    176a:	e01b      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    176c:	4913      	ldr	r1, [pc, #76]	; (17bc <_usb_ep0_on_tansfer_ok+0xe8>)
    176e:	4a10      	ldr	r2, [pc, #64]	; (17b0 <_usb_ep0_on_tansfer_ok+0xdc>)
    1770:	8808      	ldrh	r0, [r1, #0]
    1772:	8813      	ldrh	r3, [r2, #0]
    1774:	18c3      	adds	r3, r0, r3
    1776:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    1778:	2300      	movs	r3, #0
    177a:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    177c:	2340      	movs	r3, #64	; 0x40
    177e:	4a0d      	ldr	r2, [pc, #52]	; (17b4 <_usb_ep0_on_tansfer_ok+0xe0>)
    1780:	2100      	movs	r1, #0
    1782:	4811      	ldr	r0, [pc, #68]	; (17c8 <_usb_ep0_on_tansfer_ok+0xf4>)
    1784:	4c11      	ldr	r4, [pc, #68]	; (17cc <_usb_ep0_on_tansfer_ok+0xf8>)
    1786:	47a0      	blx	r4
    1788:	e00c      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    178a:	2b02      	cmp	r3, #2
    178c:	d102      	bne.n	1794 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    178e:	4b10      	ldr	r3, [pc, #64]	; (17d0 <_usb_ep0_on_tansfer_ok+0xfc>)
    1790:	4798      	blx	r3
    1792:	e007      	b.n	17a4 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <_usb_ep0_on_tansfer_ok+0xd8>)
    1796:	691b      	ldr	r3, [r3, #16]
    1798:	2b00      	cmp	r3, #0
    179a:	d000      	beq.n	179e <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    179c:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    179e:	2200      	movs	r2, #0
    17a0:	4b01      	ldr	r3, [pc, #4]	; (17a8 <_usb_ep0_on_tansfer_ok+0xd4>)
    17a2:	701a      	strb	r2, [r3, #0]
		}
}
    17a4:	bd70      	pop	{r4, r5, r6, pc}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	200002e7 	.word	0x200002e7
    17ac:	20000598 	.word	0x20000598
    17b0:	200002e4 	.word	0x200002e4
    17b4:	200005b0 	.word	0x200005b0
    17b8:	000037cd 	.word	0x000037cd
    17bc:	20000268 	.word	0x20000268
    17c0:	000016a9 	.word	0x000016a9
    17c4:	000012b1 	.word	0x000012b1
    17c8:	20000430 	.word	0x20000430
    17cc:	00002175 	.word	0x00002175
    17d0:	0000133d 	.word	0x0000133d

000017d4 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	0004      	movs	r4, r0
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    17d8:	230f      	movs	r3, #15
    17da:	4003      	ands	r3, r0
		return false;
    17dc:	2000      	movs	r0, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    17de:	2b03      	cmp	r3, #3
    17e0:	d812      	bhi.n	1808 <udd_ep_clear_halt+0x34>
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    17e2:	0020      	movs	r0, r4
    17e4:	4b09      	ldr	r3, [pc, #36]	; (180c <udd_ep_clear_halt+0x38>)
    17e6:	4798      	blx	r3
    17e8:	0005      	movs	r5, r0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    17ea:	0021      	movs	r1, r4
    17ec:	4808      	ldr	r0, [pc, #32]	; (1810 <udd_ep_clear_halt+0x3c>)
    17ee:	4b09      	ldr	r3, [pc, #36]	; (1814 <udd_ep_clear_halt+0x40>)
    17f0:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    17f2:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    17f4:	2001      	movs	r0, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    17f6:	07db      	lsls	r3, r3, #31
    17f8:	d506      	bpl.n	1808 <udd_ep_clear_halt+0x34>
		ptr_job->busy = false;
    17fa:	7cab      	ldrb	r3, [r5, #18]
    17fc:	2201      	movs	r2, #1
    17fe:	4393      	bics	r3, r2
    1800:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1802:	682b      	ldr	r3, [r5, #0]
    1804:	4798      	blx	r3
	}

	return true;
    1806:	2001      	movs	r0, #1
}
    1808:	bd70      	pop	{r4, r5, r6, pc}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00000f41 	.word	0x00000f41
    1810:	20000430 	.word	0x20000430
    1814:	0000209d 	.word	0x0000209d

00001818 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    1818:	b5f0      	push	{r4, r5, r6, r7, lr}
    181a:	b087      	sub	sp, #28
    181c:	0005      	movs	r5, r0
    181e:	9103      	str	r1, [sp, #12]
    1820:	9202      	str	r2, [sp, #8]
    1822:	9301      	str	r3, [sp, #4]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    1824:	230f      	movs	r3, #15
    1826:	4003      	ands	r3, r0
    1828:	001e      	movs	r6, r3

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    182a:	2400      	movs	r4, #0
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    182c:	2b03      	cmp	r3, #3
    182e:	d900      	bls.n	1832 <udd_ep_run+0x1a>
    1830:	e0c7      	b.n	19c2 <udd_ep_run+0x1aa>
    1832:	4b65      	ldr	r3, [pc, #404]	; (19c8 <udd_ep_run+0x1b0>)
    1834:	4798      	blx	r3
    1836:	1e04      	subs	r4, r0, #0
    1838:	d000      	beq.n	183c <udd_ep_run+0x24>
    183a:	e0bd      	b.n	19b8 <udd_ep_run+0x1a0>
		return false;
	}

	ptr_job = udd_ep_get_job(ep);
    183c:	0028      	movs	r0, r5
    183e:	4b63      	ldr	r3, [pc, #396]	; (19cc <udd_ep_run+0x1b4>)
    1840:	4798      	blx	r3
    1842:	0007      	movs	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1844:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1848:	425a      	negs	r2, r3
    184a:	4153      	adcs	r3, r2
    184c:	9305      	str	r3, [sp, #20]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    184e:	b672      	cpsid	i
    1850:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1854:	2200      	movs	r2, #0
    1856:	4b5e      	ldr	r3, [pc, #376]	; (19d0 <udd_ep_run+0x1b8>)
    1858:	701a      	strb	r2, [r3, #0]
	return flags;
    185a:	9a05      	ldr	r2, [sp, #20]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    185c:	7c83      	ldrb	r3, [r0, #18]
    185e:	07db      	lsls	r3, r3, #31
    1860:	d509      	bpl.n	1876 <udd_ep_run+0x5e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1862:	2a00      	cmp	r2, #0
    1864:	d100      	bne.n	1868 <udd_ep_run+0x50>
    1866:	e0ac      	b.n	19c2 <udd_ep_run+0x1aa>
		cpu_irq_enable();
    1868:	2201      	movs	r2, #1
    186a:	4b59      	ldr	r3, [pc, #356]	; (19d0 <udd_ep_run+0x1b8>)
    186c:	701a      	strb	r2, [r3, #0]
    186e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1872:	b662      	cpsie	i
    1874:	e0a5      	b.n	19c2 <udd_ep_run+0x1aa>
		cpu_irq_restore(flags);
		return false; /* Job already on going */
	}
	ptr_job->busy = true;
    1876:	7c81      	ldrb	r1, [r0, #18]
    1878:	2301      	movs	r3, #1
    187a:	430b      	orrs	r3, r1
    187c:	7483      	strb	r3, [r0, #18]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    187e:	2a00      	cmp	r2, #0
    1880:	d005      	beq.n	188e <udd_ep_run+0x76>
		cpu_irq_enable();
    1882:	2201      	movs	r2, #1
    1884:	4b52      	ldr	r3, [pc, #328]	; (19d0 <udd_ep_run+0x1b8>)
    1886:	701a      	strb	r2, [r3, #0]
    1888:	f3bf 8f5f 	dmb	sy
    188c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    188e:	9b02      	ldr	r3, [sp, #8]
    1890:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1892:	9b01      	ldr	r3, [sp, #4]
    1894:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1896:	2300      	movs	r3, #0
    1898:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    189a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    189c:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    189e:	2301      	movs	r3, #1
    18a0:	9a03      	ldr	r2, [sp, #12]
    18a2:	4013      	ands	r3, r2
    18a4:	005a      	lsls	r2, r3, #1
    18a6:	7cbb      	ldrb	r3, [r7, #18]
    18a8:	2102      	movs	r1, #2
    18aa:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    18ac:	4313      	orrs	r3, r2
    18ae:	2204      	movs	r2, #4
    18b0:	4393      	bics	r3, r2
    18b2:	74bb      	strb	r3, [r7, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    18b4:	b26b      	sxtb	r3, r5
    18b6:	2b00      	cmp	r3, #0
    18b8:	da3f      	bge.n	193a <udd_ep_run+0x122>
		if (0 != ptr_job->buf_size) {
    18ba:	9b01      	ldr	r3, [sp, #4]
    18bc:	2b00      	cmp	r3, #0
    18be:	d01c      	beq.n	18fa <udd_ep_run+0xe2>
			next_trans = ptr_job->buf_size;
    18c0:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    18c2:	4b44      	ldr	r3, [pc, #272]	; (19d4 <udd_ep_run+0x1bc>)
    18c4:	429c      	cmp	r4, r3
    18c6:	d906      	bls.n	18d6 <udd_ep_run+0xbe>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    18c8:	8a39      	ldrh	r1, [r7, #16]
    18ca:	001c      	movs	r4, r3
    18cc:	0018      	movs	r0, r3
    18ce:	4b42      	ldr	r3, [pc, #264]	; (19d8 <udd_ep_run+0x1c0>)
    18d0:	4798      	blx	r3
    18d2:	1a63      	subs	r3, r4, r1
    18d4:	b29c      	uxth	r4, r3
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    18d6:	7cba      	ldrb	r2, [r7, #18]
    18d8:	2300      	movs	r3, #0
    18da:	0792      	lsls	r2, r2, #30
    18dc:	d506      	bpl.n	18ec <udd_ep_run+0xd4>
    18de:	8a39      	ldrh	r1, [r7, #16]
    18e0:	0020      	movs	r0, r4
    18e2:	4b3e      	ldr	r3, [pc, #248]	; (19dc <udd_ep_run+0x1c4>)
    18e4:	4798      	blx	r3
    18e6:	b289      	uxth	r1, r1
    18e8:	424b      	negs	r3, r1
    18ea:	414b      	adcs	r3, r1
    18ec:	005b      	lsls	r3, r3, #1
    18ee:	7cba      	ldrb	r2, [r7, #18]
    18f0:	2102      	movs	r1, #2
    18f2:	438a      	bics	r2, r1
    18f4:	4313      	orrs	r3, r2
    18f6:	74bb      	strb	r3, [r7, #18]
    18f8:	e015      	b.n	1926 <udd_ep_run+0x10e>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    18fa:	7cbb      	ldrb	r3, [r7, #18]
    18fc:	079b      	lsls	r3, r3, #30
    18fe:	d505      	bpl.n	190c <udd_ep_run+0xf4>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1900:	7cbb      	ldrb	r3, [r7, #18]
    1902:	2202      	movs	r2, #2
    1904:	4393      	bics	r3, r2
    1906:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1908:	2400      	movs	r4, #0
    190a:	e00c      	b.n	1926 <udd_ep_run+0x10e>
		} else {
			ptr_job->busy = false;
    190c:	7cbb      	ldrb	r3, [r7, #18]
    190e:	2201      	movs	r2, #1
    1910:	4393      	bics	r3, r2
    1912:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1916:	2b00      	cmp	r3, #0
    1918:	d050      	beq.n	19bc <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    191a:	002a      	movs	r2, r5
    191c:	2100      	movs	r1, #0
    191e:	2000      	movs	r0, #0
    1920:	4798      	blx	r3
			}
			return true;
    1922:	2401      	movs	r4, #1
    1924:	e04d      	b.n	19c2 <udd_ep_run+0x1aa>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    1926:	0023      	movs	r3, r4
    1928:	9a02      	ldr	r2, [sp, #8]
    192a:	0031      	movs	r1, r6
    192c:	482c      	ldr	r0, [pc, #176]	; (19e0 <udd_ep_run+0x1c8>)
    192e:	4c2d      	ldr	r4, [pc, #180]	; (19e4 <udd_ep_run+0x1cc>)
    1930:	47a0      	blx	r4
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    1932:	4244      	negs	r4, r0
    1934:	4144      	adcs	r4, r0
    1936:	b2e4      	uxtb	r4, r4
    1938:	e043      	b.n	19c2 <udd_ep_run+0x1aa>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	2b00      	cmp	r3, #0
    193e:	d02e      	beq.n	199e <udd_ep_run+0x186>
			next_trans = ptr_job->buf_size;
    1940:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1942:	4b24      	ldr	r3, [pc, #144]	; (19d4 <udd_ep_run+0x1bc>)
    1944:	429c      	cmp	r4, r3
    1946:	d907      	bls.n	1958 <udd_ep_run+0x140>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1948:	8a39      	ldrh	r1, [r7, #16]
    194a:	001c      	movs	r4, r3
    194c:	0018      	movs	r0, r3
    194e:	4b22      	ldr	r3, [pc, #136]	; (19d8 <udd_ep_run+0x1c0>)
    1950:	4798      	blx	r3
    1952:	1a63      	subs	r3, r4, r1
    1954:	b29a      	uxth	r2, r3
    1956:	e005      	b.n	1964 <udd_ep_run+0x14c>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    1958:	8a39      	ldrh	r1, [r7, #16]
    195a:	0020      	movs	r0, r4
    195c:	4b1f      	ldr	r3, [pc, #124]	; (19dc <udd_ep_run+0x1c4>)
    195e:	4798      	blx	r3
    1960:	1a63      	subs	r3, r4, r1
    1962:	b29a      	uxth	r2, r3
			}
			if (next_trans < ptr_job->ep_size) {
    1964:	8a3b      	ldrh	r3, [r7, #16]
    1966:	429a      	cmp	r2, r3
    1968:	d20f      	bcs.n	198a <udd_ep_run+0x172>
				ptr_job->b_use_out_cache_buffer = true;
    196a:	7cb9      	ldrb	r1, [r7, #18]
    196c:	2204      	movs	r2, #4
    196e:	430a      	orrs	r2, r1
    1970:	74ba      	strb	r2, [r7, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    1972:	1e72      	subs	r2, r6, #1
    1974:	0192      	lsls	r2, r2, #6
    1976:	491c      	ldr	r1, [pc, #112]	; (19e8 <udd_ep_run+0x1d0>)
    1978:	1852      	adds	r2, r2, r1
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    197a:	0031      	movs	r1, r6
    197c:	4818      	ldr	r0, [pc, #96]	; (19e0 <udd_ep_run+0x1c8>)
    197e:	4c1b      	ldr	r4, [pc, #108]	; (19ec <udd_ep_run+0x1d4>)
    1980:	47a0      	blx	r4
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    1982:	4244      	negs	r4, r0
    1984:	4144      	adcs	r4, r0
    1986:	b2e4      	uxtb	r4, r4
    1988:	e01b      	b.n	19c2 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    198a:	0013      	movs	r3, r2
    198c:	9a02      	ldr	r2, [sp, #8]
    198e:	0031      	movs	r1, r6
    1990:	4813      	ldr	r0, [pc, #76]	; (19e0 <udd_ep_run+0x1c8>)
    1992:	4c16      	ldr	r4, [pc, #88]	; (19ec <udd_ep_run+0x1d4>)
    1994:	47a0      	blx	r4
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    1996:	4244      	negs	r4, r0
    1998:	4144      	adcs	r4, r0
    199a:	b2e4      	uxtb	r4, r4
    199c:	e011      	b.n	19c2 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    199e:	7cbb      	ldrb	r3, [r7, #18]
    19a0:	2201      	movs	r2, #1
    19a2:	4393      	bics	r3, r2
    19a4:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    19a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19a8:	2b00      	cmp	r3, #0
    19aa:	d009      	beq.n	19c0 <udd_ep_run+0x1a8>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    19ac:	002a      	movs	r2, r5
    19ae:	2100      	movs	r1, #0
    19b0:	2000      	movs	r0, #0
    19b2:	4798      	blx	r3
			}
			return true;
    19b4:	2401      	movs	r4, #1
    19b6:	e004      	b.n	19c2 <udd_ep_run+0x1aa>
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    19b8:	2400      	movs	r4, #0
    19ba:	e002      	b.n	19c2 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    19bc:	2401      	movs	r4, #1
    19be:	e000      	b.n	19c2 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    19c0:	2401      	movs	r4, #1
		}
	}
}
    19c2:	0020      	movs	r0, r4
    19c4:	b007      	add	sp, #28
    19c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c8:	00001695 	.word	0x00001695
    19cc:	00000f41 	.word	0x00000f41
    19d0:	200000f4 	.word	0x200000f4
    19d4:	00001fff 	.word	0x00001fff
    19d8:	00003735 	.word	0x00003735
    19dc:	00003561 	.word	0x00003561
    19e0:	20000430 	.word	0x20000430
    19e4:	00002125 	.word	0x00002125
    19e8:	20000370 	.word	0x20000370
    19ec:	00002175 	.word	0x00002175

000019f0 <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    19f0:	4b02      	ldr	r3, [pc, #8]	; (19fc <udd_set_address+0xc>)
    19f2:	681a      	ldr	r2, [r3, #0]
    19f4:	2380      	movs	r3, #128	; 0x80
    19f6:	4318      	orrs	r0, r3
    19f8:	7290      	strb	r0, [r2, #10]

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    19fa:	4770      	bx	lr
    19fc:	20000430 	.word	0x20000430

00001a00 <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1a00:	4b02      	ldr	r3, [pc, #8]	; (1a0c <udd_getaddress+0xc>)
    1a02:	681b      	ldr	r3, [r3, #0]
    1a04:	7a98      	ldrb	r0, [r3, #10]
    1a06:	0640      	lsls	r0, r0, #25
    1a08:	0e40      	lsrs	r0, r0, #25

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    1a0a:	4770      	bx	lr
    1a0c:	20000430 	.word	0x20000430

00001a10 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    1a10:	4b01      	ldr	r3, [pc, #4]	; (1a18 <udd_set_setup_payload+0x8>)
    1a12:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1a14:	8199      	strh	r1, [r3, #12]
}
    1a16:	4770      	bx	lr
    1a18:	20000598 	.word	0x20000598

00001a1c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1a1e:	2003      	movs	r0, #3
    1a20:	4b16      	ldr	r3, [pc, #88]	; (1a7c <udd_attach+0x60>)
    1a22:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1a24:	4c16      	ldr	r4, [pc, #88]	; (1a80 <udd_attach+0x64>)
    1a26:	6822      	ldr	r2, [r4, #0]
    1a28:	8913      	ldrh	r3, [r2, #8]
    1a2a:	2101      	movs	r1, #1
    1a2c:	438b      	bics	r3, r1
    1a2e:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1a30:	4a14      	ldr	r2, [pc, #80]	; (1a84 <udd_attach+0x68>)
    1a32:	3103      	adds	r1, #3
    1a34:	0020      	movs	r0, r4
    1a36:	4e14      	ldr	r6, [pc, #80]	; (1a88 <udd_attach+0x6c>)
    1a38:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1a3a:	4a14      	ldr	r2, [pc, #80]	; (1a8c <udd_attach+0x70>)
    1a3c:	2100      	movs	r1, #0
    1a3e:	0020      	movs	r0, r4
    1a40:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1a42:	4a13      	ldr	r2, [pc, #76]	; (1a90 <udd_attach+0x74>)
    1a44:	2101      	movs	r1, #1
    1a46:	0020      	movs	r0, r4
    1a48:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1a4a:	4a12      	ldr	r2, [pc, #72]	; (1a94 <udd_attach+0x78>)
    1a4c:	2102      	movs	r1, #2
    1a4e:	0020      	movs	r0, r4
    1a50:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1a52:	2104      	movs	r1, #4
    1a54:	0020      	movs	r0, r4
    1a56:	4d10      	ldr	r5, [pc, #64]	; (1a98 <udd_attach+0x7c>)
    1a58:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1a5a:	2100      	movs	r1, #0
    1a5c:	0020      	movs	r0, r4
    1a5e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1a60:	2101      	movs	r1, #1
    1a62:	0020      	movs	r0, r4
    1a64:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1a66:	2102      	movs	r1, #2
    1a68:	0020      	movs	r0, r4
    1a6a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1a6c:	4a0b      	ldr	r2, [pc, #44]	; (1a9c <udd_attach+0x80>)
    1a6e:	2106      	movs	r1, #6
    1a70:	0020      	movs	r0, r4
    1a72:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1a74:	2106      	movs	r1, #6
    1a76:	0020      	movs	r0, r4
    1a78:	47a8      	blx	r5
#endif
}
    1a7a:	bd70      	pop	{r4, r5, r6, pc}
    1a7c:	00000e85 	.word	0x00000e85
    1a80:	20000430 	.word	0x20000430
    1a84:	000011d5 	.word	0x000011d5
    1a88:	00001b41 	.word	0x00001b41
    1a8c:	000014c9 	.word	0x000014c9
    1a90:	00001201 	.word	0x00001201
    1a94:	00001169 	.word	0x00001169
    1a98:	00001b65 	.word	0x00001b65
    1a9c:	00001135 	.word	0x00001135

00001aa0 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1aa4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1aa8:	425a      	negs	r2, r3
    1aaa:	4153      	adcs	r3, r2
    1aac:	9300      	str	r3, [sp, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1aae:	b672      	cpsid	i
    1ab0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ab4:	2200      	movs	r2, #0
    1ab6:	4b1a      	ldr	r3, [pc, #104]	; (1b20 <udd_enable+0x80>)
    1ab8:	701a      	strb	r2, [r3, #0]
	return flags;
    1aba:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1abc:	ad01      	add	r5, sp, #4
    1abe:	0028      	movs	r0, r5
    1ac0:	4b18      	ldr	r3, [pc, #96]	; (1b24 <udd_enable+0x84>)
    1ac2:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    1ac4:	2303      	movs	r3, #3
    1ac6:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    1ac8:	4e17      	ldr	r6, [pc, #92]	; (1b28 <udd_enable+0x88>)
    1aca:	002a      	movs	r2, r5
    1acc:	2182      	movs	r1, #130	; 0x82
    1ace:	05c9      	lsls	r1, r1, #23
    1ad0:	0030      	movs	r0, r6
    1ad2:	4b16      	ldr	r3, [pc, #88]	; (1b2c <udd_enable+0x8c>)
    1ad4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    1ad6:	0030      	movs	r0, r6
    1ad8:	4b15      	ldr	r3, [pc, #84]	; (1b30 <udd_enable+0x90>)
    1ada:	4798      	blx	r3
#if (SAML21) || (SAML22) || (SAMR30)
#define DFLL_READY_FLAG (OSCCTRL_STATUS_DFLLRDY | \
		OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1adc:	4b15      	ldr	r3, [pc, #84]	; (1b34 <udd_enable+0x94>)
    1ade:	8b1b      	ldrh	r3, [r3, #24]
    1ae0:	069b      	lsls	r3, r3, #26
    1ae2:	d407      	bmi.n	1af4 <udd_enable+0x54>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1ae4:	4913      	ldr	r1, [pc, #76]	; (1b34 <udd_enable+0x94>)
    1ae6:	22d0      	movs	r2, #208	; 0xd0
    1ae8:	0112      	lsls	r2, r2, #4
    1aea:	68cb      	ldr	r3, [r1, #12]
    1aec:	4013      	ands	r3, r2
    1aee:	4293      	cmp	r3, r2
    1af0:	d1fb      	bne.n	1aea <udd_enable+0x4a>
    1af2:	e005      	b.n	1b00 <udd_enable+0x60>
		} else {
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    1af4:	490f      	ldr	r1, [pc, #60]	; (1b34 <udd_enable+0x94>)
    1af6:	2280      	movs	r2, #128	; 0x80
    1af8:	0052      	lsls	r2, r2, #1
    1afa:	68cb      	ldr	r3, [r1, #12]
    1afc:	4213      	tst	r3, r2
    1afe:	d0fc      	beq.n	1afa <udd_enable+0x5a>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1b00:	2001      	movs	r0, #1
    1b02:	4b0d      	ldr	r3, [pc, #52]	; (1b38 <udd_enable+0x98>)
    1b04:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    1b06:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <udd_enable+0x9c>)
    1b08:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b0a:	2c00      	cmp	r4, #0
    1b0c:	d005      	beq.n	1b1a <udd_enable+0x7a>
		cpu_irq_enable();
    1b0e:	2201      	movs	r2, #1
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <udd_enable+0x80>)
    1b12:	701a      	strb	r2, [r3, #0]
    1b14:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1b18:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    1b1a:	b002      	add	sp, #8
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	200000f4 	.word	0x200000f4
    1b24:	000027a5 	.word	0x000027a5
    1b28:	20000430 	.word	0x20000430
    1b2c:	000027b5 	.word	0x000027b5
    1b30:	000021f1 	.word	0x000021f1
    1b34:	40000c00 	.word	0x40000c00
    1b38:	00000e85 	.word	0x00000e85
    1b3c:	00001a1d 	.word	0x00001a1d

00001b40 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    1b40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    1b42:	000b      	movs	r3, r1
    1b44:	332e      	adds	r3, #46	; 0x2e
    1b46:	009b      	lsls	r3, r3, #2
    1b48:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    1b4a:	22aa      	movs	r2, #170	; 0xaa
    1b4c:	0052      	lsls	r2, r2, #1
    1b4e:	0049      	lsls	r1, r1, #1
    1b50:	5a84      	ldrh	r4, [r0, r2]
    1b52:	4b03      	ldr	r3, [pc, #12]	; (1b60 <usb_device_register_callback+0x20>)
    1b54:	5acb      	ldrh	r3, [r1, r3]
    1b56:	4323      	orrs	r3, r4
    1b58:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    1b5a:	2000      	movs	r0, #0
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00003810 	.word	0x00003810

00001b64 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    1b64:	0049      	lsls	r1, r1, #1
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <usb_device_enable_callback+0x1c>)
    1b68:	5acb      	ldrh	r3, [r1, r3]
    1b6a:	6802      	ldr	r2, [r0, #0]
    1b6c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    1b6e:	21ab      	movs	r1, #171	; 0xab
    1b70:	0049      	lsls	r1, r1, #1
    1b72:	5a42      	ldrh	r2, [r0, r1]
    1b74:	431a      	orrs	r2, r3
    1b76:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    1b78:	6802      	ldr	r2, [r0, #0]
    1b7a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    1b7c:	2000      	movs	r0, #0
    1b7e:	4770      	bx	lr
    1b80:	00003810 	.word	0x00003810

00001b84 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    1b84:	0049      	lsls	r1, r1, #1
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <usb_device_disable_callback+0x18>)
    1b88:	5aca      	ldrh	r2, [r1, r3]
    1b8a:	21ab      	movs	r1, #171	; 0xab
    1b8c:	0049      	lsls	r1, r1, #1
    1b8e:	5a43      	ldrh	r3, [r0, r1]
    1b90:	4393      	bics	r3, r2
    1b92:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    1b94:	6803      	ldr	r3, [r0, #0]
    1b96:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    1b98:	2000      	movs	r0, #0
    1b9a:	4770      	bx	lr
    1b9c:	00003810 	.word	0x00003810

00001ba0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    1ba0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    1ba2:	008c      	lsls	r4, r1, #2
    1ba4:	18a4      	adds	r4, r4, r2
    1ba6:	3434      	adds	r4, #52	; 0x34
    1ba8:	00a4      	lsls	r4, r4, #2
    1baa:	1904      	adds	r4, r0, r4
    1bac:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1bae:	1841      	adds	r1, r0, r1
    1bb0:	3159      	adds	r1, #89	; 0x59
    1bb2:	31ff      	adds	r1, #255	; 0xff
    1bb4:	7808      	ldrb	r0, [r1, #0]
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <usb_device_endpoint_register_callback+0x24>)
    1bb8:	5c9b      	ldrb	r3, [r3, r2]
    1bba:	4303      	orrs	r3, r0
    1bbc:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    1bbe:	2000      	movs	r0, #0
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	00003820 	.word	0x00003820

00001bc8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    1bc8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    1bca:	008b      	lsls	r3, r1, #2
    1bcc:	189b      	adds	r3, r3, r2
    1bce:	3334      	adds	r3, #52	; 0x34
    1bd0:	009b      	lsls	r3, r3, #2
    1bd2:	18c3      	adds	r3, r0, r3
    1bd4:	2400      	movs	r4, #0
    1bd6:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    1bd8:	1841      	adds	r1, r0, r1
    1bda:	3159      	adds	r1, #89	; 0x59
    1bdc:	31ff      	adds	r1, #255	; 0xff
    1bde:	4b03      	ldr	r3, [pc, #12]	; (1bec <usb_device_endpoint_unregister_callback+0x24>)
    1be0:	5c9a      	ldrb	r2, [r3, r2]
    1be2:	780b      	ldrb	r3, [r1, #0]
    1be4:	4393      	bics	r3, r2
    1be6:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    1be8:	2000      	movs	r0, #0
    1bea:	bd10      	pop	{r4, pc}
    1bec:	00003820 	.word	0x00003820

00001bf0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    1bf2:	230f      	movs	r3, #15
    1bf4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1bf6:	18c4      	adds	r4, r0, r3
    1bf8:	3461      	adds	r4, #97	; 0x61
    1bfa:	34ff      	adds	r4, #255	; 0xff
    1bfc:	7826      	ldrb	r6, [r4, #0]
    1bfe:	4d32      	ldr	r5, [pc, #200]	; (1cc8 <usb_device_endpoint_enable_callback+0xd8>)
    1c00:	5cad      	ldrb	r5, [r5, r2]
    1c02:	4335      	orrs	r5, r6
    1c04:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    1c06:	2a00      	cmp	r2, #0
    1c08:	d11f      	bne.n	1c4a <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d108      	bne.n	1c20 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    1c0e:	015c      	lsls	r4, r3, #5
    1c10:	6805      	ldr	r5, [r0, #0]
    1c12:	46ac      	mov	ip, r5
    1c14:	4464      	add	r4, ip
    1c16:	340a      	adds	r4, #10
    1c18:	34ff      	adds	r4, #255	; 0xff
    1c1a:	2503      	movs	r5, #3
    1c1c:	7025      	strb	r5, [r4, #0]
    1c1e:	e03d      	b.n	1c9c <usb_device_endpoint_enable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    1c20:	b24c      	sxtb	r4, r1
    1c22:	2c00      	cmp	r4, #0
    1c24:	da08      	bge.n	1c38 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    1c26:	015c      	lsls	r4, r3, #5
    1c28:	6805      	ldr	r5, [r0, #0]
    1c2a:	46ac      	mov	ip, r5
    1c2c:	4464      	add	r4, ip
    1c2e:	340a      	adds	r4, #10
    1c30:	34ff      	adds	r4, #255	; 0xff
    1c32:	2502      	movs	r5, #2
    1c34:	7025      	strb	r5, [r4, #0]
    1c36:	e031      	b.n	1c9c <usb_device_endpoint_enable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    1c38:	015c      	lsls	r4, r3, #5
    1c3a:	6805      	ldr	r5, [r0, #0]
    1c3c:	46ac      	mov	ip, r5
    1c3e:	4464      	add	r4, ip
    1c40:	340a      	adds	r4, #10
    1c42:	34ff      	adds	r4, #255	; 0xff
    1c44:	2501      	movs	r5, #1
    1c46:	7025      	strb	r5, [r4, #0]
    1c48:	e028      	b.n	1c9c <usb_device_endpoint_enable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    1c4a:	2a01      	cmp	r2, #1
    1c4c:	d11c      	bne.n	1c88 <usb_device_endpoint_enable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d107      	bne.n	1c62 <usb_device_endpoint_enable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    1c52:	6802      	ldr	r2, [r0, #0]
    1c54:	015b      	lsls	r3, r3, #5
    1c56:	18d3      	adds	r3, r2, r3
    1c58:	330a      	adds	r3, #10
    1c5a:	33ff      	adds	r3, #255	; 0xff
    1c5c:	220c      	movs	r2, #12
    1c5e:	701a      	strb	r2, [r3, #0]
    1c60:	e030      	b.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    1c62:	b249      	sxtb	r1, r1
    1c64:	2900      	cmp	r1, #0
    1c66:	da07      	bge.n	1c78 <usb_device_endpoint_enable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    1c68:	6802      	ldr	r2, [r0, #0]
    1c6a:	015b      	lsls	r3, r3, #5
    1c6c:	18d3      	adds	r3, r2, r3
    1c6e:	330a      	adds	r3, #10
    1c70:	33ff      	adds	r3, #255	; 0xff
    1c72:	2208      	movs	r2, #8
    1c74:	701a      	strb	r2, [r3, #0]
    1c76:	e025      	b.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    1c78:	6802      	ldr	r2, [r0, #0]
    1c7a:	015b      	lsls	r3, r3, #5
    1c7c:	18d3      	adds	r3, r2, r3
    1c7e:	330a      	adds	r3, #10
    1c80:	33ff      	adds	r3, #255	; 0xff
    1c82:	2204      	movs	r2, #4
    1c84:	701a      	strb	r2, [r3, #0]
    1c86:	e01d      	b.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    1c88:	2a02      	cmp	r2, #2
    1c8a:	d107      	bne.n	1c9c <usb_device_endpoint_enable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1c8c:	6802      	ldr	r2, [r0, #0]
    1c8e:	015b      	lsls	r3, r3, #5
    1c90:	18d3      	adds	r3, r2, r3
    1c92:	330a      	adds	r3, #10
    1c94:	33ff      	adds	r3, #255	; 0xff
    1c96:	2210      	movs	r2, #16
    1c98:	701a      	strb	r2, [r3, #0]
    1c9a:	e013      	b.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    1c9c:	2a03      	cmp	r2, #3
    1c9e:	d111      	bne.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    1ca0:	b249      	sxtb	r1, r1
    1ca2:	2900      	cmp	r1, #0
    1ca4:	da07      	bge.n	1cb6 <usb_device_endpoint_enable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    1ca6:	6802      	ldr	r2, [r0, #0]
    1ca8:	015b      	lsls	r3, r3, #5
    1caa:	18d3      	adds	r3, r2, r3
    1cac:	330a      	adds	r3, #10
    1cae:	33ff      	adds	r3, #255	; 0xff
    1cb0:	2240      	movs	r2, #64	; 0x40
    1cb2:	701a      	strb	r2, [r3, #0]
    1cb4:	e006      	b.n	1cc4 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    1cb6:	6802      	ldr	r2, [r0, #0]
    1cb8:	015b      	lsls	r3, r3, #5
    1cba:	18d3      	adds	r3, r2, r3
    1cbc:	330a      	adds	r3, #10
    1cbe:	33ff      	adds	r3, #255	; 0xff
    1cc0:	2220      	movs	r2, #32
    1cc2:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    1cc4:	2000      	movs	r0, #0
    1cc6:	bd70      	pop	{r4, r5, r6, pc}
    1cc8:	00003820 	.word	0x00003820

00001ccc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    1cce:	230f      	movs	r3, #15
    1cd0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    1cd2:	18c4      	adds	r4, r0, r3
    1cd4:	3461      	adds	r4, #97	; 0x61
    1cd6:	34ff      	adds	r4, #255	; 0xff
    1cd8:	4d32      	ldr	r5, [pc, #200]	; (1da4 <usb_device_endpoint_disable_callback+0xd8>)
    1cda:	5cae      	ldrb	r6, [r5, r2]
    1cdc:	7825      	ldrb	r5, [r4, #0]
    1cde:	43b5      	bics	r5, r6
    1ce0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	d11f      	bne.n	1d26 <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d108      	bne.n	1cfc <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    1cea:	015c      	lsls	r4, r3, #5
    1cec:	6805      	ldr	r5, [r0, #0]
    1cee:	46ac      	mov	ip, r5
    1cf0:	4464      	add	r4, ip
    1cf2:	3409      	adds	r4, #9
    1cf4:	34ff      	adds	r4, #255	; 0xff
    1cf6:	2503      	movs	r5, #3
    1cf8:	7025      	strb	r5, [r4, #0]
    1cfa:	e03d      	b.n	1d78 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    1cfc:	b24c      	sxtb	r4, r1
    1cfe:	2c00      	cmp	r4, #0
    1d00:	da08      	bge.n	1d14 <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    1d02:	015c      	lsls	r4, r3, #5
    1d04:	6805      	ldr	r5, [r0, #0]
    1d06:	46ac      	mov	ip, r5
    1d08:	4464      	add	r4, ip
    1d0a:	3409      	adds	r4, #9
    1d0c:	34ff      	adds	r4, #255	; 0xff
    1d0e:	2502      	movs	r5, #2
    1d10:	7025      	strb	r5, [r4, #0]
    1d12:	e031      	b.n	1d78 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    1d14:	015c      	lsls	r4, r3, #5
    1d16:	6805      	ldr	r5, [r0, #0]
    1d18:	46ac      	mov	ip, r5
    1d1a:	4464      	add	r4, ip
    1d1c:	3409      	adds	r4, #9
    1d1e:	34ff      	adds	r4, #255	; 0xff
    1d20:	2501      	movs	r5, #1
    1d22:	7025      	strb	r5, [r4, #0]
    1d24:	e028      	b.n	1d78 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    1d26:	2a01      	cmp	r2, #1
    1d28:	d11c      	bne.n	1d64 <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d107      	bne.n	1d3e <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    1d2e:	6802      	ldr	r2, [r0, #0]
    1d30:	015b      	lsls	r3, r3, #5
    1d32:	18d3      	adds	r3, r2, r3
    1d34:	3309      	adds	r3, #9
    1d36:	33ff      	adds	r3, #255	; 0xff
    1d38:	220c      	movs	r2, #12
    1d3a:	701a      	strb	r2, [r3, #0]
    1d3c:	e030      	b.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    1d3e:	b249      	sxtb	r1, r1
    1d40:	2900      	cmp	r1, #0
    1d42:	da07      	bge.n	1d54 <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    1d44:	6802      	ldr	r2, [r0, #0]
    1d46:	015b      	lsls	r3, r3, #5
    1d48:	18d3      	adds	r3, r2, r3
    1d4a:	3309      	adds	r3, #9
    1d4c:	33ff      	adds	r3, #255	; 0xff
    1d4e:	2208      	movs	r2, #8
    1d50:	701a      	strb	r2, [r3, #0]
    1d52:	e025      	b.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    1d54:	6802      	ldr	r2, [r0, #0]
    1d56:	015b      	lsls	r3, r3, #5
    1d58:	18d3      	adds	r3, r2, r3
    1d5a:	3309      	adds	r3, #9
    1d5c:	33ff      	adds	r3, #255	; 0xff
    1d5e:	2204      	movs	r2, #4
    1d60:	701a      	strb	r2, [r3, #0]
    1d62:	e01d      	b.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    1d64:	2a02      	cmp	r2, #2
    1d66:	d107      	bne.n	1d78 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    1d68:	6802      	ldr	r2, [r0, #0]
    1d6a:	015b      	lsls	r3, r3, #5
    1d6c:	18d3      	adds	r3, r2, r3
    1d6e:	3309      	adds	r3, #9
    1d70:	33ff      	adds	r3, #255	; 0xff
    1d72:	2210      	movs	r2, #16
    1d74:	701a      	strb	r2, [r3, #0]
    1d76:	e013      	b.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    1d78:	2a03      	cmp	r2, #3
    1d7a:	d111      	bne.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    1d7c:	b249      	sxtb	r1, r1
    1d7e:	2900      	cmp	r1, #0
    1d80:	da07      	bge.n	1d92 <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    1d82:	6802      	ldr	r2, [r0, #0]
    1d84:	015b      	lsls	r3, r3, #5
    1d86:	18d3      	adds	r3, r2, r3
    1d88:	3309      	adds	r3, #9
    1d8a:	33ff      	adds	r3, #255	; 0xff
    1d8c:	2240      	movs	r2, #64	; 0x40
    1d8e:	701a      	strb	r2, [r3, #0]
    1d90:	e006      	b.n	1da0 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    1d92:	6802      	ldr	r2, [r0, #0]
    1d94:	015b      	lsls	r3, r3, #5
    1d96:	18d3      	adds	r3, r2, r3
    1d98:	3309      	adds	r3, #9
    1d9a:	33ff      	adds	r3, #255	; 0xff
    1d9c:	2220      	movs	r2, #32
    1d9e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    1da0:	2000      	movs	r0, #0
    1da2:	bd70      	pop	{r4, r5, r6, pc}
    1da4:	00003820 	.word	0x00003820

00001da8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    1da8:	2300      	movs	r3, #0
    1daa:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    1dac:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    1dae:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    1db0:	3301      	adds	r3, #1
    1db2:	70c3      	strb	r3, [r0, #3]
}
    1db4:	4770      	bx	lr
    1db6:	46c0      	nop			; (mov r8, r8)

00001db8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    1dba:	780a      	ldrb	r2, [r1, #0]
    1dbc:	230f      	movs	r3, #15
    1dbe:	4013      	ands	r3, r2
    1dc0:	001c      	movs	r4, r3
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    1dc2:	b252      	sxtb	r2, r2

	switch (ep_config->ep_type) {
    1dc4:	78cb      	ldrb	r3, [r1, #3]
    1dc6:	2b04      	cmp	r3, #4
    1dc8:	d900      	bls.n	1dcc <usb_device_endpoint_set_config+0x14>
    1dca:	e0f1      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
    1dcc:	009b      	lsls	r3, r3, #2
    1dce:	4d8d      	ldr	r5, [pc, #564]	; (2004 <STACK_SIZE+0x4>)
    1dd0:	58eb      	ldr	r3, [r5, r3]
    1dd2:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    1dd4:	6803      	ldr	r3, [r0, #0]
    1dd6:	3408      	adds	r4, #8
    1dd8:	0164      	lsls	r4, r4, #5
    1dda:	2200      	movs	r2, #0
    1ddc:	54e2      	strb	r2, [r4, r3]
			return STATUS_OK;
    1dde:	2300      	movs	r3, #0
    1de0:	e10e      	b.n	2000 <STACK_SIZE>
    1de2:	0162      	lsls	r2, r4, #5
    1de4:	6803      	ldr	r3, [r0, #0]
    1de6:	469c      	mov	ip, r3
    1de8:	4462      	add	r2, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    1dea:	2380      	movs	r3, #128	; 0x80
    1dec:	005b      	lsls	r3, r3, #1
    1dee:	5cd5      	ldrb	r5, [r2, r3]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    1df0:	3be4      	subs	r3, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    1df2:	076d      	lsls	r5, r5, #29
    1df4:	d000      	beq.n	1df8 <usb_device_endpoint_set_config+0x40>
    1df6:	e103      	b.n	2000 <STACK_SIZE>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    1df8:	33e4      	adds	r3, #228	; 0xe4
    1dfa:	5cd6      	ldrb	r6, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    1dfc:	3be4      	subs	r3, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    1dfe:	2570      	movs	r5, #112	; 0x70
    1e00:	422e      	tst	r6, r5
    1e02:	d000      	beq.n	1e06 <usb_device_endpoint_set_config+0x4e>
    1e04:	e0fc      	b.n	2000 <STACK_SIZE>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    1e06:	3d5f      	subs	r5, #95	; 0x5f
    1e08:	33e4      	adds	r3, #228	; 0xe4
    1e0a:	54d5      	strb	r5, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1e0c:	0023      	movs	r3, r4
    1e0e:	3308      	adds	r3, #8
    1e10:	015b      	lsls	r3, r3, #5
    1e12:	6802      	ldr	r2, [r0, #0]
    1e14:	18d2      	adds	r2, r2, r3
    1e16:	352f      	adds	r5, #47	; 0x2f
    1e18:	7155      	strb	r5, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1e1a:	6802      	ldr	r2, [r0, #0]
    1e1c:	18d3      	adds	r3, r2, r3
    1e1e:	2280      	movs	r2, #128	; 0x80
    1e20:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    1e22:	788b      	ldrb	r3, [r1, #2]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d00b      	beq.n	1e40 <usb_device_endpoint_set_config+0x88>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1e28:	0162      	lsls	r2, r4, #5
    1e2a:	4b77      	ldr	r3, [pc, #476]	; (2008 <STACK_SIZE+0x8>)
    1e2c:	189b      	adds	r3, r3, r2
    1e2e:	6858      	ldr	r0, [r3, #4]
    1e30:	2580      	movs	r5, #128	; 0x80
    1e32:	062d      	lsls	r5, r5, #24
    1e34:	4328      	orrs	r0, r5
    1e36:	6058      	str	r0, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1e38:	695a      	ldr	r2, [r3, #20]
    1e3a:	432a      	orrs	r2, r5
    1e3c:	615a      	str	r2, [r3, #20]
    1e3e:	e00a      	b.n	1e56 <usb_device_endpoint_set_config+0x9e>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1e40:	0162      	lsls	r2, r4, #5
    1e42:	4b71      	ldr	r3, [pc, #452]	; (2008 <STACK_SIZE+0x8>)
    1e44:	189b      	adds	r3, r3, r2
    1e46:	685a      	ldr	r2, [r3, #4]
    1e48:	0052      	lsls	r2, r2, #1
    1e4a:	0852      	lsrs	r2, r2, #1
    1e4c:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1e4e:	695a      	ldr	r2, [r3, #20]
    1e50:	0052      	lsls	r2, r2, #1
    1e52:	0852      	lsrs	r2, r2, #1
    1e54:	615a      	str	r2, [r3, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    1e56:	2207      	movs	r2, #7
    1e58:	7848      	ldrb	r0, [r1, #1]
    1e5a:	0163      	lsls	r3, r4, #5
    1e5c:	4c6a      	ldr	r4, [pc, #424]	; (2008 <STACK_SIZE+0x8>)
    1e5e:	18e4      	adds	r4, r4, r3
    1e60:	6863      	ldr	r3, [r4, #4]
    1e62:	4010      	ands	r0, r2
    1e64:	0700      	lsls	r0, r0, #28
    1e66:	4d69      	ldr	r5, [pc, #420]	; (200c <STACK_SIZE+0xc>)
    1e68:	402b      	ands	r3, r5
    1e6a:	4303      	orrs	r3, r0
    1e6c:	6063      	str	r3, [r4, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    1e6e:	784b      	ldrb	r3, [r1, #1]
    1e70:	6961      	ldr	r1, [r4, #20]
    1e72:	401a      	ands	r2, r3
    1e74:	0713      	lsls	r3, r2, #28
    1e76:	000a      	movs	r2, r1
    1e78:	402a      	ands	r2, r5
    1e7a:	431a      	orrs	r2, r3
    1e7c:	6162      	str	r2, [r4, #20]
			return STATUS_OK;
    1e7e:	2300      	movs	r3, #0
    1e80:	e0be      	b.n	2000 <STACK_SIZE>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    1e82:	2a00      	cmp	r2, #0
    1e84:	da18      	bge.n	1eb8 <usb_device_endpoint_set_config+0x100>
    1e86:	0165      	lsls	r5, r4, #5
    1e88:	6803      	ldr	r3, [r0, #0]
    1e8a:	469c      	mov	ip, r3
    1e8c:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1e8e:	2380      	movs	r3, #128	; 0x80
    1e90:	005b      	lsls	r3, r3, #1
    1e92:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    1e94:	3be4      	subs	r3, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1e96:	2670      	movs	r6, #112	; 0x70
    1e98:	4237      	tst	r7, r6
    1e9a:	d000      	beq.n	1e9e <usb_device_endpoint_set_config+0xe6>
    1e9c:	e0b0      	b.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    1e9e:	3690      	adds	r6, #144	; 0x90
    1ea0:	5daf      	ldrb	r7, [r5, r6]
    1ea2:	3304      	adds	r3, #4
    1ea4:	433b      	orrs	r3, r7
    1ea6:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1ea8:	6800      	ldr	r0, [r0, #0]
    1eaa:	0023      	movs	r3, r4
    1eac:	3308      	adds	r3, #8
    1eae:	015b      	lsls	r3, r3, #5
    1eb0:	18c3      	adds	r3, r0, r3
    1eb2:	2080      	movs	r0, #128	; 0x80
    1eb4:	7118      	strb	r0, [r3, #4]
    1eb6:	e07b      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
    1eb8:	0165      	lsls	r5, r4, #5
    1eba:	6803      	ldr	r3, [r0, #0]
    1ebc:	469c      	mov	ip, r3
    1ebe:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1ec0:	2380      	movs	r3, #128	; 0x80
    1ec2:	005b      	lsls	r3, r3, #1
    1ec4:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    1ec6:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1ec8:	0776      	lsls	r6, r6, #29
    1eca:	d000      	beq.n	1ece <usb_device_endpoint_set_config+0x116>
    1ecc:	e098      	b.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    1ece:	2680      	movs	r6, #128	; 0x80
    1ed0:	0076      	lsls	r6, r6, #1
    1ed2:	5daf      	ldrb	r7, [r5, r6]
    1ed4:	3b1a      	subs	r3, #26
    1ed6:	433b      	orrs	r3, r7
    1ed8:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1eda:	6800      	ldr	r0, [r0, #0]
    1edc:	0023      	movs	r3, r4
    1ede:	3308      	adds	r3, #8
    1ee0:	015b      	lsls	r3, r3, #5
    1ee2:	18c3      	adds	r3, r0, r3
    1ee4:	2040      	movs	r0, #64	; 0x40
    1ee6:	7158      	strb	r0, [r3, #5]
    1ee8:	e062      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    1eea:	2a00      	cmp	r2, #0
    1eec:	da17      	bge.n	1f1e <usb_device_endpoint_set_config+0x166>
    1eee:	0165      	lsls	r5, r4, #5
    1ef0:	6803      	ldr	r3, [r0, #0]
    1ef2:	469c      	mov	ip, r3
    1ef4:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1ef6:	2380      	movs	r3, #128	; 0x80
    1ef8:	005b      	lsls	r3, r3, #1
    1efa:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    1efc:	3be4      	subs	r3, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1efe:	2670      	movs	r6, #112	; 0x70
    1f00:	4237      	tst	r7, r6
    1f02:	d17d      	bne.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    1f04:	3690      	adds	r6, #144	; 0x90
    1f06:	5daf      	ldrb	r7, [r5, r6]
    1f08:	3314      	adds	r3, #20
    1f0a:	433b      	orrs	r3, r7
    1f0c:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1f0e:	6800      	ldr	r0, [r0, #0]
    1f10:	0023      	movs	r3, r4
    1f12:	3308      	adds	r3, #8
    1f14:	015b      	lsls	r3, r3, #5
    1f16:	18c3      	adds	r3, r0, r3
    1f18:	2080      	movs	r0, #128	; 0x80
    1f1a:	7118      	strb	r0, [r3, #4]
    1f1c:	e048      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
    1f1e:	0165      	lsls	r5, r4, #5
    1f20:	6803      	ldr	r3, [r0, #0]
    1f22:	469c      	mov	ip, r3
    1f24:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1f26:	2380      	movs	r3, #128	; 0x80
    1f28:	005b      	lsls	r3, r3, #1
    1f2a:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    1f2c:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1f2e:	0776      	lsls	r6, r6, #29
    1f30:	d166      	bne.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    1f32:	2680      	movs	r6, #128	; 0x80
    1f34:	0076      	lsls	r6, r6, #1
    1f36:	5daf      	ldrb	r7, [r5, r6]
    1f38:	3b19      	subs	r3, #25
    1f3a:	433b      	orrs	r3, r7
    1f3c:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1f3e:	6800      	ldr	r0, [r0, #0]
    1f40:	0023      	movs	r3, r4
    1f42:	3308      	adds	r3, #8
    1f44:	015b      	lsls	r3, r3, #5
    1f46:	18c3      	adds	r3, r0, r3
    1f48:	2040      	movs	r0, #64	; 0x40
    1f4a:	7158      	strb	r0, [r3, #5]
    1f4c:	e030      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    1f4e:	2a00      	cmp	r2, #0
    1f50:	da17      	bge.n	1f82 <usb_device_endpoint_set_config+0x1ca>
    1f52:	0165      	lsls	r5, r4, #5
    1f54:	6803      	ldr	r3, [r0, #0]
    1f56:	469c      	mov	ip, r3
    1f58:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1f5a:	2380      	movs	r3, #128	; 0x80
    1f5c:	005b      	lsls	r3, r3, #1
    1f5e:	5cef      	ldrb	r7, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    1f60:	3be4      	subs	r3, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1f62:	2670      	movs	r6, #112	; 0x70
    1f64:	4237      	tst	r7, r6
    1f66:	d14b      	bne.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    1f68:	3690      	adds	r6, #144	; 0x90
    1f6a:	5daf      	ldrb	r7, [r5, r6]
    1f6c:	3324      	adds	r3, #36	; 0x24
    1f6e:	433b      	orrs	r3, r7
    1f70:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1f72:	6800      	ldr	r0, [r0, #0]
    1f74:	0023      	movs	r3, r4
    1f76:	3308      	adds	r3, #8
    1f78:	015b      	lsls	r3, r3, #5
    1f7a:	18c3      	adds	r3, r0, r3
    1f7c:	2080      	movs	r0, #128	; 0x80
    1f7e:	7118      	strb	r0, [r3, #4]
    1f80:	e016      	b.n	1fb0 <usb_device_endpoint_set_config+0x1f8>
    1f82:	0165      	lsls	r5, r4, #5
    1f84:	6803      	ldr	r3, [r0, #0]
    1f86:	469c      	mov	ip, r3
    1f88:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1f8a:	2380      	movs	r3, #128	; 0x80
    1f8c:	005b      	lsls	r3, r3, #1
    1f8e:	5cee      	ldrb	r6, [r5, r3]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    1f90:	3be4      	subs	r3, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1f92:	0776      	lsls	r6, r6, #29
    1f94:	d134      	bne.n	2000 <STACK_SIZE>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    1f96:	2680      	movs	r6, #128	; 0x80
    1f98:	0076      	lsls	r6, r6, #1
    1f9a:	5daf      	ldrb	r7, [r5, r6]
    1f9c:	3b18      	subs	r3, #24
    1f9e:	433b      	orrs	r3, r7
    1fa0:	55ab      	strb	r3, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1fa2:	6800      	ldr	r0, [r0, #0]
    1fa4:	0023      	movs	r3, r4
    1fa6:	3308      	adds	r3, #8
    1fa8:	015b      	lsls	r3, r3, #5
    1faa:	18c3      	adds	r3, r0, r3
    1fac:	2040      	movs	r0, #64	; 0x40
    1fae:	7158      	strb	r0, [r3, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    1fb0:	0fd2      	lsrs	r2, r2, #31
    1fb2:	784d      	ldrb	r5, [r1, #1]
    1fb4:	0063      	lsls	r3, r4, #1
    1fb6:	189b      	adds	r3, r3, r2
    1fb8:	011b      	lsls	r3, r3, #4
    1fba:	4813      	ldr	r0, [pc, #76]	; (2008 <STACK_SIZE+0x8>)
    1fbc:	18c3      	adds	r3, r0, r3
    1fbe:	685e      	ldr	r6, [r3, #4]
    1fc0:	2007      	movs	r0, #7
    1fc2:	4005      	ands	r5, r0
    1fc4:	072d      	lsls	r5, r5, #28
    1fc6:	4811      	ldr	r0, [pc, #68]	; (200c <STACK_SIZE+0xc>)
    1fc8:	4030      	ands	r0, r6
    1fca:	4328      	orrs	r0, r5
    1fcc:	6058      	str	r0, [r3, #4]

	if (true == ep_config->auto_zlp) {
    1fce:	788b      	ldrb	r3, [r1, #2]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d00b      	beq.n	1fec <usb_device_endpoint_set_config+0x234>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1fd4:	0063      	lsls	r3, r4, #1
    1fd6:	189a      	adds	r2, r3, r2
    1fd8:	0112      	lsls	r2, r2, #4
    1fda:	4c0b      	ldr	r4, [pc, #44]	; (2008 <STACK_SIZE+0x8>)
    1fdc:	18a2      	adds	r2, r4, r2
    1fde:	6853      	ldr	r3, [r2, #4]
    1fe0:	2180      	movs	r1, #128	; 0x80
    1fe2:	0609      	lsls	r1, r1, #24
    1fe4:	430b      	orrs	r3, r1
    1fe6:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    1fe8:	2300      	movs	r3, #0
    1fea:	e009      	b.n	2000 <STACK_SIZE>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1fec:	0063      	lsls	r3, r4, #1
    1fee:	189a      	adds	r2, r3, r2
    1ff0:	0112      	lsls	r2, r2, #4
    1ff2:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff4:	189a      	adds	r2, r3, r2
    1ff6:	6853      	ldr	r3, [r2, #4]
    1ff8:	005b      	lsls	r3, r3, #1
    1ffa:	085b      	lsrs	r3, r3, #1
    1ffc:	6053      	str	r3, [r2, #4]
	}

	return STATUS_OK;
    1ffe:	2300      	movs	r3, #0
}
    2000:	0018      	movs	r0, r3
    2002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2004:	000037fc 	.word	0x000037fc
    2008:	200005f0 	.word	0x200005f0
    200c:	8fffffff 	.word	0x8fffffff

00002010 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2010:	230f      	movs	r3, #15
    2012:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2014:	b249      	sxtb	r1, r1
    2016:	2900      	cmp	r1, #0
    2018:	da0a      	bge.n	2030 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    201a:	3308      	adds	r3, #8
    201c:	015b      	lsls	r3, r3, #5
    201e:	6802      	ldr	r2, [r0, #0]
    2020:	18d2      	adds	r2, r2, r3
    2022:	2180      	movs	r1, #128	; 0x80
    2024:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2026:	6802      	ldr	r2, [r0, #0]
    2028:	18d3      	adds	r3, r2, r3
    202a:	2202      	movs	r2, #2
    202c:	71da      	strb	r2, [r3, #7]
    202e:	e009      	b.n	2044 <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2030:	3308      	adds	r3, #8
    2032:	015b      	lsls	r3, r3, #5
    2034:	6802      	ldr	r2, [r0, #0]
    2036:	18d2      	adds	r2, r2, r3
    2038:	2140      	movs	r1, #64	; 0x40
    203a:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    203c:	6802      	ldr	r2, [r0, #0]
    203e:	18d3      	adds	r3, r2, r3
    2040:	2201      	movs	r2, #1
    2042:	71da      	strb	r2, [r3, #7]
	}
}
    2044:	4770      	bx	lr
    2046:	46c0      	nop			; (mov r8, r8)

00002048 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2048:	230f      	movs	r3, #15
    204a:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    204c:	b249      	sxtb	r1, r1
    204e:	2900      	cmp	r1, #0
    2050:	da07      	bge.n	2062 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2052:	6802      	ldr	r2, [r0, #0]
    2054:	3308      	adds	r3, #8
    2056:	015b      	lsls	r3, r3, #5
    2058:	18d3      	adds	r3, r2, r3
    205a:	7998      	ldrb	r0, [r3, #6]
    205c:	0680      	lsls	r0, r0, #26
    205e:	0fc0      	lsrs	r0, r0, #31
    2060:	e006      	b.n	2070 <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2062:	6802      	ldr	r2, [r0, #0]
    2064:	3308      	adds	r3, #8
    2066:	015b      	lsls	r3, r3, #5
    2068:	18d3      	adds	r3, r2, r3
    206a:	7998      	ldrb	r0, [r3, #6]
    206c:	06c0      	lsls	r0, r0, #27
    206e:	0fc0      	lsrs	r0, r0, #31
	}
}
    2070:	4770      	bx	lr
    2072:	46c0      	nop			; (mov r8, r8)

00002074 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2074:	230f      	movs	r3, #15
    2076:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2078:	b249      	sxtb	r1, r1
    207a:	2900      	cmp	r1, #0
    207c:	da06      	bge.n	208c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    207e:	6802      	ldr	r2, [r0, #0]
    2080:	3308      	adds	r3, #8
    2082:	015b      	lsls	r3, r3, #5
    2084:	18d3      	adds	r3, r2, r3
    2086:	2220      	movs	r2, #32
    2088:	715a      	strb	r2, [r3, #5]
    208a:	e005      	b.n	2098 <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    208c:	6802      	ldr	r2, [r0, #0]
    208e:	3308      	adds	r3, #8
    2090:	015b      	lsls	r3, r3, #5
    2092:	18d3      	adds	r3, r2, r3
    2094:	2210      	movs	r2, #16
    2096:	715a      	strb	r2, [r3, #5]
	}
}
    2098:	4770      	bx	lr
    209a:	46c0      	nop			; (mov r8, r8)

0000209c <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    209c:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    209e:	230f      	movs	r3, #15
    20a0:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    20a2:	b249      	sxtb	r1, r1
    20a4:	2900      	cmp	r1, #0
    20a6:	da1e      	bge.n	20e6 <usb_device_endpoint_clear_halt+0x4a>
    20a8:	0159      	lsls	r1, r3, #5
    20aa:	6802      	ldr	r2, [r0, #0]
    20ac:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    20ae:	2483      	movs	r4, #131	; 0x83
    20b0:	0064      	lsls	r4, r4, #1
    20b2:	5d14      	ldrb	r4, [r2, r4]
    20b4:	06a4      	lsls	r4, r4, #26
    20b6:	d534      	bpl.n	2122 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    20b8:	2520      	movs	r5, #32
    20ba:	2482      	movs	r4, #130	; 0x82
    20bc:	0064      	lsls	r4, r4, #1
    20be:	5515      	strb	r5, [r2, r4]
    20c0:	6802      	ldr	r2, [r0, #0]
    20c2:	4694      	mov	ip, r2
    20c4:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    20c6:	2208      	movs	r2, #8
    20c8:	32ff      	adds	r2, #255	; 0xff
    20ca:	5c8a      	ldrb	r2, [r1, r2]
    20cc:	0652      	lsls	r2, r2, #25
    20ce:	d528      	bpl.n	2122 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    20d0:	3cc4      	subs	r4, #196	; 0xc4
    20d2:	2208      	movs	r2, #8
    20d4:	32ff      	adds	r2, #255	; 0xff
    20d6:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    20d8:	6802      	ldr	r2, [r0, #0]
    20da:	3308      	adds	r3, #8
    20dc:	015b      	lsls	r3, r3, #5
    20de:	18d3      	adds	r3, r2, r3
    20e0:	2202      	movs	r2, #2
    20e2:	711a      	strb	r2, [r3, #4]
    20e4:	e01d      	b.n	2122 <usb_device_endpoint_clear_halt+0x86>
    20e6:	0159      	lsls	r1, r3, #5
    20e8:	6802      	ldr	r2, [r0, #0]
    20ea:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    20ec:	2483      	movs	r4, #131	; 0x83
    20ee:	0064      	lsls	r4, r4, #1
    20f0:	5d14      	ldrb	r4, [r2, r4]
    20f2:	06e4      	lsls	r4, r4, #27
    20f4:	d515      	bpl.n	2122 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    20f6:	2510      	movs	r5, #16
    20f8:	2482      	movs	r4, #130	; 0x82
    20fa:	0064      	lsls	r4, r4, #1
    20fc:	5515      	strb	r5, [r2, r4]
    20fe:	6802      	ldr	r2, [r0, #0]
    2100:	4694      	mov	ip, r2
    2102:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2104:	2208      	movs	r2, #8
    2106:	32ff      	adds	r2, #255	; 0xff
    2108:	5c8a      	ldrb	r2, [r1, r2]
    210a:	0692      	lsls	r2, r2, #26
    210c:	d509      	bpl.n	2122 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    210e:	3ce4      	subs	r4, #228	; 0xe4
    2110:	2208      	movs	r2, #8
    2112:	32ff      	adds	r2, #255	; 0xff
    2114:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2116:	6802      	ldr	r2, [r0, #0]
    2118:	3308      	adds	r3, #8
    211a:	015b      	lsls	r3, r3, #5
    211c:	18d3      	adds	r3, r2, r3
    211e:	2201      	movs	r2, #1
    2120:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2122:	bd30      	pop	{r4, r5, pc}

00002124 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2124:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2126:	000c      	movs	r4, r1
    2128:	3408      	adds	r4, #8
    212a:	0164      	lsls	r4, r4, #5
    212c:	6805      	ldr	r5, [r0, #0]
    212e:	5d64      	ldrb	r4, [r4, r5]
    2130:	0664      	lsls	r4, r4, #25
    2132:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2134:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2136:	2c00      	cmp	r4, #0
    2138:	d016      	beq.n	2168 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    213a:	014c      	lsls	r4, r1, #5
    213c:	4d0b      	ldr	r5, [pc, #44]	; (216c <usb_device_endpoint_write_buffer_job+0x48>)
    213e:	192c      	adds	r4, r5, r4
    2140:	0025      	movs	r5, r4
    2142:	6122      	str	r2, [r4, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2144:	6964      	ldr	r4, [r4, #20]
    2146:	4a0a      	ldr	r2, [pc, #40]	; (2170 <usb_device_endpoint_write_buffer_job+0x4c>)
    2148:	4022      	ands	r2, r4
    214a:	616a      	str	r2, [r5, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    214c:	696c      	ldr	r4, [r5, #20]
    214e:	049b      	lsls	r3, r3, #18
    2150:	0c9a      	lsrs	r2, r3, #18
    2152:	0ba3      	lsrs	r3, r4, #14
    2154:	039b      	lsls	r3, r3, #14
    2156:	4313      	orrs	r3, r2
    2158:	616b      	str	r3, [r5, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    215a:	6803      	ldr	r3, [r0, #0]
    215c:	3108      	adds	r1, #8
    215e:	0149      	lsls	r1, r1, #5
    2160:	1859      	adds	r1, r3, r1
    2162:	2380      	movs	r3, #128	; 0x80
    2164:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    2166:	2500      	movs	r5, #0
}
    2168:	0028      	movs	r0, r5
    216a:	bd30      	pop	{r4, r5, pc}
    216c:	200005f0 	.word	0x200005f0
    2170:	f0003fff 	.word	0xf0003fff

00002174 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2174:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2176:	000c      	movs	r4, r1
    2178:	3408      	adds	r4, #8
    217a:	0164      	lsls	r4, r4, #5
    217c:	6805      	ldr	r5, [r0, #0]
    217e:	5d64      	ldrb	r4, [r4, r5]
    2180:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2182:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2184:	2c00      	cmp	r4, #0
    2186:	d015      	beq.n	21b4 <usb_device_endpoint_read_buffer_job+0x40>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2188:	4d0b      	ldr	r5, [pc, #44]	; (21b8 <usb_device_endpoint_read_buffer_job+0x44>)
    218a:	014c      	lsls	r4, r1, #5
    218c:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    218e:	192c      	adds	r4, r5, r4
    2190:	6865      	ldr	r5, [r4, #4]
    2192:	049b      	lsls	r3, r3, #18
    2194:	091a      	lsrs	r2, r3, #4
    2196:	4b09      	ldr	r3, [pc, #36]	; (21bc <usb_device_endpoint_read_buffer_job+0x48>)
    2198:	402b      	ands	r3, r5
    219a:	4313      	orrs	r3, r2
    219c:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    219e:	6863      	ldr	r3, [r4, #4]
    21a0:	0b9b      	lsrs	r3, r3, #14
    21a2:	039b      	lsls	r3, r3, #14
    21a4:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    21a6:	6803      	ldr	r3, [r0, #0]
    21a8:	3108      	adds	r1, #8
    21aa:	0149      	lsls	r1, r1, #5
    21ac:	1859      	adds	r1, r3, r1
    21ae:	2340      	movs	r3, #64	; 0x40
    21b0:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    21b2:	2500      	movs	r5, #0
}
    21b4:	0028      	movs	r0, r5
    21b6:	bd30      	pop	{r4, r5, pc}
    21b8:	200005f0 	.word	0x200005f0
    21bc:	f0003fff 	.word	0xf0003fff

000021c0 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    21c0:	4b09      	ldr	r3, [pc, #36]	; (21e8 <usb_device_endpoint_setup_buffer_job+0x28>)
    21c2:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    21c4:	6859      	ldr	r1, [r3, #4]
    21c6:	4a09      	ldr	r2, [pc, #36]	; (21ec <usb_device_endpoint_setup_buffer_job+0x2c>)
    21c8:	400a      	ands	r2, r1
    21ca:	2180      	movs	r1, #128	; 0x80
    21cc:	0289      	lsls	r1, r1, #10
    21ce:	430a      	orrs	r2, r1
    21d0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    21d2:	685a      	ldr	r2, [r3, #4]
    21d4:	0b92      	lsrs	r2, r2, #14
    21d6:	0392      	lsls	r2, r2, #14
    21d8:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    21da:	6802      	ldr	r2, [r0, #0]
    21dc:	2140      	movs	r1, #64	; 0x40
    21de:	2382      	movs	r3, #130	; 0x82
    21e0:	005b      	lsls	r3, r3, #1
    21e2:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    21e4:	2000      	movs	r0, #0
    21e6:	4770      	bx	lr
    21e8:	200005f0 	.word	0x200005f0
    21ec:	f0003fff 	.word	0xf0003fff

000021f0 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    21f0:	6802      	ldr	r2, [r0, #0]
    21f2:	7811      	ldrb	r1, [r2, #0]
    21f4:	2302      	movs	r3, #2
    21f6:	430b      	orrs	r3, r1
    21f8:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    21fa:	6802      	ldr	r2, [r0, #0]
    21fc:	7893      	ldrb	r3, [r2, #2]
    21fe:	2b02      	cmp	r3, #2
    2200:	d0fc      	beq.n	21fc <usb_enable+0xc>
}
    2202:	4770      	bx	lr

00002204 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	465f      	mov	r7, fp
    2208:	4656      	mov	r6, sl
    220a:	464d      	mov	r5, r9
    220c:	4644      	mov	r4, r8
    220e:	b4f0      	push	{r4, r5, r6, r7}
    2210:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    2212:	4bcb      	ldr	r3, [pc, #812]	; (2540 <USB_Handler+0x33c>)
    2214:	681f      	ldr	r7, [r3, #0]
    2216:	683d      	ldr	r5, [r7, #0]
    2218:	782b      	ldrb	r3, [r5, #0]
    221a:	09db      	lsrs	r3, r3, #7
    221c:	d100      	bne.n	2220 <USB_Handler+0x1c>
    221e:	e15a      	b.n	24d6 <USB_Handler+0x2d2>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2220:	8c2b      	ldrh	r3, [r5, #32]
    2222:	b29b      	uxth	r3, r3
    2224:	2b00      	cmp	r3, #0
    2226:	d100      	bne.n	222a <USB_Handler+0x26>
    2228:	e0db      	b.n	23e2 <USB_Handler+0x1de>
    222a:	8c28      	ldrh	r0, [r5, #32]
    222c:	b280      	uxth	r0, r0
    222e:	4bc5      	ldr	r3, [pc, #788]	; (2544 <USB_Handler+0x340>)
    2230:	4798      	blx	r3
    2232:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    2234:	2c1f      	cmp	r4, #31
    2236:	d900      	bls.n	223a <USB_Handler+0x36>
    2238:	e0d3      	b.n	23e2 <USB_Handler+0x1de>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    223a:	0003      	movs	r3, r0
    223c:	3308      	adds	r3, #8
    223e:	015b      	lsls	r3, r3, #5
    2240:	18ed      	adds	r5, r5, r3
    2242:	79ed      	ldrb	r5, [r5, #7]
    2244:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2246:	07ab      	lsls	r3, r5, #30
    2248:	d051      	beq.n	22ee <USB_Handler+0xea>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    224a:	4abf      	ldr	r2, [pc, #764]	; (2548 <USB_Handler+0x344>)
    224c:	2301      	movs	r3, #1
    224e:	4083      	lsls	r3, r0
    2250:	6811      	ldr	r1, [r2, #0]
    2252:	4399      	bics	r1, r3
    2254:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2256:	0003      	movs	r3, r0
    2258:	3308      	adds	r3, #8
    225a:	015b      	lsls	r3, r3, #5
    225c:	683a      	ldr	r2, [r7, #0]
    225e:	4694      	mov	ip, r2
    2260:	4463      	add	r3, ip
    2262:	2203      	movs	r2, #3
    2264:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2266:	183b      	adds	r3, r7, r0
    2268:	33ae      	adds	r3, #174	; 0xae
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	07db      	lsls	r3, r3, #31
    226e:	d53e      	bpl.n	22ee <USB_Handler+0xea>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    2270:	4bb6      	ldr	r3, [pc, #728]	; (254c <USB_Handler+0x348>)
    2272:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2274:	683a      	ldr	r2, [r7, #0]
    2276:	0003      	movs	r3, r0
    2278:	3308      	adds	r3, #8
    227a:	015b      	lsls	r3, r3, #5
    227c:	5c9b      	ldrb	r3, [r3, r2]
    227e:	079b      	lsls	r3, r3, #30
    2280:	0f9b      	lsrs	r3, r3, #30
    2282:	2b01      	cmp	r3, #1
    2284:	d110      	bne.n	22a8 <USB_Handler+0xa4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2286:	0142      	lsls	r2, r0, #5
    2288:	4bb1      	ldr	r3, [pc, #708]	; (2550 <USB_Handler+0x34c>)
    228a:	189b      	adds	r3, r3, r2
    228c:	685a      	ldr	r2, [r3, #4]
    228e:	0492      	lsls	r2, r2, #18
    2290:	0c92      	lsrs	r2, r2, #18
    2292:	49ae      	ldr	r1, [pc, #696]	; (254c <USB_Handler+0x348>)
    2294:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2296:	685a      	ldr	r2, [r3, #4]
    2298:	0112      	lsls	r2, r2, #4
    229a:	0c92      	lsrs	r2, r2, #18
    229c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    229e:	685a      	ldr	r2, [r3, #4]
    22a0:	0b92      	lsrs	r2, r2, #14
    22a2:	0392      	lsls	r2, r2, #14
    22a4:	605a      	str	r2, [r3, #4]
    22a6:	e01a      	b.n	22de <USB_Handler+0xda>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    22a8:	0142      	lsls	r2, r0, #5
    22aa:	4ba9      	ldr	r3, [pc, #676]	; (2550 <USB_Handler+0x34c>)
    22ac:	189b      	adds	r3, r3, r2
    22ae:	685a      	ldr	r2, [r3, #4]
    22b0:	0112      	lsls	r2, r2, #4
    22b2:	0c92      	lsrs	r2, r2, #18
    22b4:	b290      	uxth	r0, r2
    22b6:	49a5      	ldr	r1, [pc, #660]	; (254c <USB_Handler+0x348>)
    22b8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    22ba:	685a      	ldr	r2, [r3, #4]
    22bc:	0492      	lsls	r2, r2, #18
    22be:	0c92      	lsrs	r2, r2, #18
    22c0:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    22c2:	6859      	ldr	r1, [r3, #4]
    22c4:	4aa3      	ldr	r2, [pc, #652]	; (2554 <USB_Handler+0x350>)
    22c6:	400a      	ands	r2, r1
    22c8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    22ca:	2800      	cmp	r0, #0
    22cc:	d107      	bne.n	22de <USB_Handler+0xda>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    22ce:	0163      	lsls	r3, r4, #5
    22d0:	4a9f      	ldr	r2, [pc, #636]	; (2550 <USB_Handler+0x34c>)
    22d2:	18d3      	adds	r3, r2, r3
    22d4:	685b      	ldr	r3, [r3, #4]
    22d6:	049b      	lsls	r3, r3, #18
    22d8:	0c9b      	lsrs	r3, r3, #18
    22da:	4a9c      	ldr	r2, [pc, #624]	; (254c <USB_Handler+0x348>)
    22dc:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    22de:	4b98      	ldr	r3, [pc, #608]	; (2540 <USB_Handler+0x33c>)
    22e0:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    22e2:	1ca3      	adds	r3, r4, #2
    22e4:	011b      	lsls	r3, r3, #4
    22e6:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    22e8:	685b      	ldr	r3, [r3, #4]
    22ea:	4998      	ldr	r1, [pc, #608]	; (254c <USB_Handler+0x348>)
    22ec:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    22ee:	076b      	lsls	r3, r5, #29
    22f0:	d50e      	bpl.n	2310 <USB_Handler+0x10c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    22f2:	4a95      	ldr	r2, [pc, #596]	; (2548 <USB_Handler+0x344>)
    22f4:	2301      	movs	r3, #1
    22f6:	40a3      	lsls	r3, r4
    22f8:	6811      	ldr	r1, [r2, #0]
    22fa:	4399      	bics	r1, r3
    22fc:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    22fe:	4b90      	ldr	r3, [pc, #576]	; (2540 <USB_Handler+0x33c>)
    2300:	681b      	ldr	r3, [r3, #0]
    2302:	681a      	ldr	r2, [r3, #0]
    2304:	0023      	movs	r3, r4
    2306:	3308      	adds	r3, #8
    2308:	015b      	lsls	r3, r3, #5
    230a:	18d3      	adds	r3, r2, r3
    230c:	2204      	movs	r2, #4
    230e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2310:	072b      	lsls	r3, r5, #28
    2312:	d521      	bpl.n	2358 <USB_Handler+0x154>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2314:	4a8c      	ldr	r2, [pc, #560]	; (2548 <USB_Handler+0x344>)
    2316:	2301      	movs	r3, #1
    2318:	40a3      	lsls	r3, r4
    231a:	6811      	ldr	r1, [r2, #0]
    231c:	4399      	bics	r1, r3
    231e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2320:	4b87      	ldr	r3, [pc, #540]	; (2540 <USB_Handler+0x33c>)
    2322:	6818      	ldr	r0, [r3, #0]
    2324:	0023      	movs	r3, r4
    2326:	3308      	adds	r3, #8
    2328:	015b      	lsls	r3, r3, #5
    232a:	6802      	ldr	r2, [r0, #0]
    232c:	4694      	mov	ip, r2
    232e:	4463      	add	r3, ip
    2330:	2208      	movs	r2, #8
    2332:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2334:	1903      	adds	r3, r0, r4
    2336:	33ae      	adds	r3, #174	; 0xae
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	079b      	lsls	r3, r3, #30
    233c:	d50c      	bpl.n	2358 <USB_Handler+0x154>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    233e:	4983      	ldr	r1, [pc, #524]	; (254c <USB_Handler+0x348>)
    2340:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    2342:	0163      	lsls	r3, r4, #5
    2344:	4a82      	ldr	r2, [pc, #520]	; (2550 <USB_Handler+0x34c>)
    2346:	18d3      	adds	r3, r2, r3
    2348:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    234a:	231f      	movs	r3, #31
    234c:	4013      	ands	r3, r2
    234e:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2350:	0123      	lsls	r3, r4, #4
    2352:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    2354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2356:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2358:	06eb      	lsls	r3, r5, #27
    235a:	d522      	bpl.n	23a2 <USB_Handler+0x19e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    235c:	4a7a      	ldr	r2, [pc, #488]	; (2548 <USB_Handler+0x344>)
    235e:	2301      	movs	r3, #1
    2360:	40a3      	lsls	r3, r4
    2362:	6811      	ldr	r1, [r2, #0]
    2364:	4399      	bics	r1, r3
    2366:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2368:	4b75      	ldr	r3, [pc, #468]	; (2540 <USB_Handler+0x33c>)
    236a:	6818      	ldr	r0, [r3, #0]
    236c:	0023      	movs	r3, r4
    236e:	3308      	adds	r3, #8
    2370:	015b      	lsls	r3, r3, #5
    2372:	6802      	ldr	r2, [r0, #0]
    2374:	4694      	mov	ip, r2
    2376:	4463      	add	r3, ip
    2378:	2210      	movs	r2, #16
    237a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    237c:	1903      	adds	r3, r0, r4
    237e:	33ae      	adds	r3, #174	; 0xae
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	075b      	lsls	r3, r3, #29
    2384:	d50d      	bpl.n	23a2 <USB_Handler+0x19e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    2386:	4a71      	ldr	r2, [pc, #452]	; (254c <USB_Handler+0x348>)
    2388:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    238a:	0163      	lsls	r3, r4, #5
    238c:	4970      	ldr	r1, [pc, #448]	; (2550 <USB_Handler+0x34c>)
    238e:	18cb      	adds	r3, r1, r3
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	011b      	lsls	r3, r3, #4
    2394:	0c9b      	lsrs	r3, r3, #18
    2396:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    2398:	0123      	lsls	r3, r4, #4
    239a:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    239e:	2100      	movs	r1, #0
    23a0:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    23a2:	06ab      	lsls	r3, r5, #26
    23a4:	d400      	bmi.n	23a8 <USB_Handler+0x1a4>
    23a6:	e1f2      	b.n	278e <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    23a8:	4a67      	ldr	r2, [pc, #412]	; (2548 <USB_Handler+0x344>)
    23aa:	2301      	movs	r3, #1
    23ac:	40a3      	lsls	r3, r4
    23ae:	6811      	ldr	r1, [r2, #0]
    23b0:	4399      	bics	r1, r3
    23b2:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    23b4:	4b62      	ldr	r3, [pc, #392]	; (2540 <USB_Handler+0x33c>)
    23b6:	6818      	ldr	r0, [r3, #0]
    23b8:	0023      	movs	r3, r4
    23ba:	3308      	adds	r3, #8
    23bc:	015b      	lsls	r3, r3, #5
    23be:	6802      	ldr	r2, [r0, #0]
    23c0:	4694      	mov	ip, r2
    23c2:	4463      	add	r3, ip
    23c4:	2220      	movs	r2, #32
    23c6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    23c8:	1903      	adds	r3, r0, r4
    23ca:	33ae      	adds	r3, #174	; 0xae
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	071b      	lsls	r3, r3, #28
    23d0:	d400      	bmi.n	23d4 <USB_Handler+0x1d0>
    23d2:	e1dc      	b.n	278e <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    23d4:	495d      	ldr	r1, [pc, #372]	; (254c <USB_Handler+0x348>)
    23d6:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    23d8:	0124      	lsls	r4, r4, #4
    23da:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    23dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    23de:	4798      	blx	r3
    23e0:	e1d5      	b.n	278e <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    23e2:	8bac      	ldrh	r4, [r5, #28]
    23e4:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    23e6:	0763      	lsls	r3, r4, #29
    23e8:	d508      	bpl.n	23fc <USB_Handler+0x1f8>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    23ea:	2304      	movs	r3, #4
    23ec:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    23ee:	33a1      	adds	r3, #161	; 0xa1
    23f0:	5cfb      	ldrb	r3, [r7, r3]
    23f2:	07db      	lsls	r3, r3, #31
    23f4:	d502      	bpl.n	23fc <USB_Handler+0x1f8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	0038      	movs	r0, r7
    23fa:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    23fc:	0723      	lsls	r3, r4, #28
    23fe:	d50d      	bpl.n	241c <USB_Handler+0x218>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2400:	2200      	movs	r2, #0
    2402:	4b51      	ldr	r3, [pc, #324]	; (2548 <USB_Handler+0x344>)
    2404:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    2406:	4b4e      	ldr	r3, [pc, #312]	; (2540 <USB_Handler+0x33c>)
    2408:	6818      	ldr	r0, [r3, #0]
    240a:	2308      	movs	r3, #8
    240c:	6802      	ldr	r2, [r0, #0]
    240e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    2410:	339d      	adds	r3, #157	; 0x9d
    2412:	5cc3      	ldrb	r3, [r0, r3]
    2414:	079b      	lsls	r3, r3, #30
    2416:	d501      	bpl.n	241c <USB_Handler+0x218>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    2418:	6883      	ldr	r3, [r0, #8]
    241a:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    241c:	0663      	lsls	r3, r4, #25
    241e:	d50a      	bpl.n	2436 <USB_Handler+0x232>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    2420:	4b47      	ldr	r3, [pc, #284]	; (2540 <USB_Handler+0x33c>)
    2422:	6818      	ldr	r0, [r3, #0]
    2424:	2340      	movs	r3, #64	; 0x40
    2426:	6802      	ldr	r2, [r0, #0]
    2428:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    242a:	3365      	adds	r3, #101	; 0x65
    242c:	5cc3      	ldrb	r3, [r0, r3]
    242e:	06db      	lsls	r3, r3, #27
    2430:	d501      	bpl.n	2436 <USB_Handler+0x232>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    2432:	6943      	ldr	r3, [r0, #20]
    2434:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    2436:	06a3      	lsls	r3, r4, #26
    2438:	d50a      	bpl.n	2450 <USB_Handler+0x24c>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    243a:	4b41      	ldr	r3, [pc, #260]	; (2540 <USB_Handler+0x33c>)
    243c:	6818      	ldr	r0, [r3, #0]
    243e:	2320      	movs	r3, #32
    2440:	6802      	ldr	r2, [r0, #0]
    2442:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    2444:	3385      	adds	r3, #133	; 0x85
    2446:	5cc3      	ldrb	r3, [r0, r3]
    2448:	071b      	lsls	r3, r3, #28
    244a:	d501      	bpl.n	2450 <USB_Handler+0x24c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    244c:	6903      	ldr	r3, [r0, #16]
    244e:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    2450:	06e3      	lsls	r3, r4, #27
    2452:	d50a      	bpl.n	246a <USB_Handler+0x266>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    2454:	4b3a      	ldr	r3, [pc, #232]	; (2540 <USB_Handler+0x33c>)
    2456:	6818      	ldr	r0, [r3, #0]
    2458:	2310      	movs	r3, #16
    245a:	6802      	ldr	r2, [r0, #0]
    245c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    245e:	3395      	adds	r3, #149	; 0x95
    2460:	5cc3      	ldrb	r3, [r0, r3]
    2462:	075b      	lsls	r3, r3, #29
    2464:	d501      	bpl.n	246a <USB_Handler+0x266>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    2466:	68c3      	ldr	r3, [r0, #12]
    2468:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    246a:	0623      	lsls	r3, r4, #24
    246c:	d50d      	bpl.n	248a <USB_Handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    246e:	2200      	movs	r2, #0
    2470:	4b35      	ldr	r3, [pc, #212]	; (2548 <USB_Handler+0x344>)
    2472:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    2474:	4b32      	ldr	r3, [pc, #200]	; (2540 <USB_Handler+0x33c>)
    2476:	6818      	ldr	r0, [r3, #0]
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	6802      	ldr	r2, [r0, #0]
    247c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    247e:	3325      	adds	r3, #37	; 0x25
    2480:	5cc3      	ldrb	r3, [r0, r3]
    2482:	069b      	lsls	r3, r3, #26
    2484:	d501      	bpl.n	248a <USB_Handler+0x286>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    2486:	6983      	ldr	r3, [r0, #24]
    2488:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    248a:	05e3      	lsls	r3, r4, #23
    248c:	d50e      	bpl.n	24ac <USB_Handler+0x2a8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    248e:	2200      	movs	r2, #0
    2490:	4b2d      	ldr	r3, [pc, #180]	; (2548 <USB_Handler+0x344>)
    2492:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    2494:	4b2a      	ldr	r3, [pc, #168]	; (2540 <USB_Handler+0x33c>)
    2496:	6818      	ldr	r0, [r3, #0]
    2498:	2380      	movs	r3, #128	; 0x80
    249a:	005b      	lsls	r3, r3, #1
    249c:	6802      	ldr	r2, [r0, #0]
    249e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    24a0:	3b5b      	subs	r3, #91	; 0x5b
    24a2:	5cc3      	ldrb	r3, [r0, r3]
    24a4:	065b      	lsls	r3, r3, #25
    24a6:	d501      	bpl.n	24ac <USB_Handler+0x2a8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    24a8:	69c3      	ldr	r3, [r0, #28]
    24aa:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    24ac:	05a3      	lsls	r3, r4, #22
    24ae:	d400      	bmi.n	24b2 <USB_Handler+0x2ae>
    24b0:	e16d      	b.n	278e <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    24b2:	2200      	movs	r2, #0
    24b4:	4b24      	ldr	r3, [pc, #144]	; (2548 <USB_Handler+0x344>)
    24b6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    24b8:	4b21      	ldr	r3, [pc, #132]	; (2540 <USB_Handler+0x33c>)
    24ba:	6818      	ldr	r0, [r3, #0]
    24bc:	2380      	movs	r3, #128	; 0x80
    24be:	009b      	lsls	r3, r3, #2
    24c0:	6802      	ldr	r2, [r0, #0]
    24c2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    24c4:	3b5c      	subs	r3, #92	; 0x5c
    24c6:	3bff      	subs	r3, #255	; 0xff
    24c8:	5cc3      	ldrb	r3, [r0, r3]
    24ca:	2b7f      	cmp	r3, #127	; 0x7f
    24cc:	d800      	bhi.n	24d0 <USB_Handler+0x2cc>
    24ce:	e15e      	b.n	278e <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    24d0:	6a03      	ldr	r3, [r0, #32]
    24d2:	4798      	blx	r3
    24d4:	e15b      	b.n	278e <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    24d6:	8c2e      	ldrh	r6, [r5, #32]
    24d8:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    24da:	2e00      	cmp	r6, #0
    24dc:	d140      	bne.n	2560 <USB_Handler+0x35c>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    24de:	8bae      	ldrh	r6, [r5, #28]
    24e0:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    24e2:	23ab      	movs	r3, #171	; 0xab
    24e4:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    24e6:	5afd      	ldrh	r5, [r7, r3]
    24e8:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    24ea:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    24ec:	5afb      	ldrh	r3, [r7, r3]
    24ee:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    24f0:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    24f2:	4f19      	ldr	r7, [pc, #100]	; (2558 <USB_Handler+0x354>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    24f4:	4b12      	ldr	r3, [pc, #72]	; (2540 <USB_Handler+0x33c>)
    24f6:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    24f8:	4698      	mov	r8, r3
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    24fa:	0063      	lsls	r3, r4, #1
    24fc:	5bdb      	ldrh	r3, [r3, r7]
    24fe:	4233      	tst	r3, r6
    2500:	d003      	beq.n	250a <USB_Handler+0x306>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2502:	464a      	mov	r2, r9
    2504:	6812      	ldr	r2, [r2, #0]
    2506:	6812      	ldr	r2, [r2, #0]
    2508:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    250a:	422b      	tst	r3, r5
    250c:	d013      	beq.n	2536 <USB_Handler+0x332>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    250e:	2c06      	cmp	r4, #6
    2510:	d107      	bne.n	2522 <USB_Handler+0x31e>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2512:	4b0f      	ldr	r3, [pc, #60]	; (2550 <USB_Handler+0x34c>)
    2514:	891b      	ldrh	r3, [r3, #8]
    2516:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    2518:	2380      	movs	r3, #128	; 0x80
    251a:	005b      	lsls	r3, r3, #1
    251c:	4013      	ands	r3, r2
    251e:	4a0f      	ldr	r2, [pc, #60]	; (255c <USB_Handler+0x358>)
    2520:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2522:	0023      	movs	r3, r4
    2524:	332e      	adds	r3, #46	; 0x2e
    2526:	009b      	lsls	r3, r3, #2
    2528:	4642      	mov	r2, r8
    252a:	6812      	ldr	r2, [r2, #0]
    252c:	589b      	ldr	r3, [r3, r2]
    252e:	490b      	ldr	r1, [pc, #44]	; (255c <USB_Handler+0x358>)
    2530:	4642      	mov	r2, r8
    2532:	6810      	ldr	r0, [r2, #0]
    2534:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2536:	3401      	adds	r4, #1
    2538:	2c07      	cmp	r4, #7
    253a:	d1de      	bne.n	24fa <USB_Handler+0x2f6>
    253c:	e127      	b.n	278e <USB_Handler+0x58a>
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000304 	.word	0x20000304
    2544:	00003741 	.word	0x00003741
    2548:	200002f8 	.word	0x200002f8
    254c:	200002f0 	.word	0x200002f0
    2550:	200005f0 	.word	0x200005f0
    2554:	f0003fff 	.word	0xf0003fff
    2558:	00003810 	.word	0x00003810
    255c:	200002ec 	.word	0x200002ec
    2560:	003c      	movs	r4, r7
    2562:	3459      	adds	r4, #89	; 0x59
    2564:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    2566:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    2568:	2201      	movs	r2, #1
    256a:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    256c:	325f      	adds	r2, #95	; 0x5f
    256e:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2570:	3a50      	subs	r2, #80	; 0x50
    2572:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2574:	3a0d      	subs	r2, #13
    2576:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2578:	46b8      	mov	r8, r7
    257a:	002f      	movs	r7, r5
    257c:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    257e:	9301      	str	r3, [sp, #4]
    2580:	0032      	movs	r2, r6
    2582:	411a      	asrs	r2, r3
    2584:	4661      	mov	r1, ip
    2586:	4211      	tst	r1, r2
    2588:	d100      	bne.n	258c <USB_Handler+0x388>
    258a:	e0fb      	b.n	2784 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    258c:	001a      	movs	r2, r3
    258e:	3208      	adds	r2, #8
    2590:	0152      	lsls	r2, r2, #5
    2592:	18ba      	adds	r2, r7, r2
    2594:	79d2      	ldrb	r2, [r2, #7]
    2596:	b2d2      	uxtb	r2, r2
    2598:	7a21      	ldrb	r1, [r4, #8]
    259a:	7825      	ldrb	r5, [r4, #0]
    259c:	4029      	ands	r1, r5
    259e:	4011      	ands	r1, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    25a0:	464d      	mov	r5, r9
    25a2:	4215      	tst	r5, r2
    25a4:	d02a      	beq.n	25fc <USB_Handler+0x3f8>
    25a6:	003d      	movs	r5, r7
    25a8:	4647      	mov	r7, r8
    25aa:	015b      	lsls	r3, r3, #5
    25ac:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    25ae:	2308      	movs	r3, #8
    25b0:	33ff      	adds	r3, #255	; 0xff
    25b2:	5ceb      	ldrb	r3, [r5, r3]
    25b4:	065b      	lsls	r3, r3, #25
    25b6:	d509      	bpl.n	25cc <USB_Handler+0x3c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    25b8:	2240      	movs	r2, #64	; 0x40
    25ba:	2308      	movs	r3, #8
    25bc:	33ff      	adds	r3, #255	; 0xff
    25be:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    25c0:	3b88      	subs	r3, #136	; 0x88
    25c2:	3bff      	subs	r3, #255	; 0xff
    25c4:	4303      	orrs	r3, r0
    25c6:	4a75      	ldr	r2, [pc, #468]	; (279c <USB_Handler+0x598>)
    25c8:	7193      	strb	r3, [r2, #6]
    25ca:	e00a      	b.n	25e2 <USB_Handler+0x3de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    25cc:	2308      	movs	r3, #8
    25ce:	33ff      	adds	r3, #255	; 0xff
    25d0:	5ceb      	ldrb	r3, [r5, r3]
    25d2:	069b      	lsls	r3, r3, #26
    25d4:	d505      	bpl.n	25e2 <USB_Handler+0x3de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    25d6:	2220      	movs	r2, #32
    25d8:	2308      	movs	r3, #8
    25da:	33ff      	adds	r3, #255	; 0xff
    25dc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    25de:	4b6f      	ldr	r3, [pc, #444]	; (279c <USB_Handler+0x598>)
    25e0:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    25e2:	2360      	movs	r3, #96	; 0x60
    25e4:	420b      	tst	r3, r1
    25e6:	d100      	bne.n	25ea <USB_Handler+0x3e6>
    25e8:	e0d1      	b.n	278e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    25ea:	9b01      	ldr	r3, [sp, #4]
    25ec:	011b      	lsls	r3, r3, #4
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	33e0      	adds	r3, #224	; 0xe0
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	4969      	ldr	r1, [pc, #420]	; (279c <USB_Handler+0x598>)
    25f6:	0038      	movs	r0, r7
    25f8:	4798      	blx	r3
    25fa:	e0c8      	b.n	278e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    25fc:	4655      	mov	r5, sl
    25fe:	4215      	tst	r5, r2
    2600:	d01f      	beq.n	2642 <USB_Handler+0x43e>
    2602:	003d      	movs	r5, r7
    2604:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    2606:	9a01      	ldr	r2, [sp, #4]
    2608:	0013      	movs	r3, r2
    260a:	3308      	adds	r3, #8
    260c:	015b      	lsls	r3, r3, #5
    260e:	18ed      	adds	r5, r5, r3
    2610:	2310      	movs	r3, #16
    2612:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2614:	18bb      	adds	r3, r7, r2
    2616:	3361      	adds	r3, #97	; 0x61
    2618:	33ff      	adds	r3, #255	; 0xff
    261a:	781b      	ldrb	r3, [r3, #0]
    261c:	06db      	lsls	r3, r3, #27
    261e:	d400      	bmi.n	2622 <USB_Handler+0x41e>
    2620:	e0b5      	b.n	278e <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2622:	0010      	movs	r0, r2
    2624:	0153      	lsls	r3, r2, #5
    2626:	4a5e      	ldr	r2, [pc, #376]	; (27a0 <USB_Handler+0x59c>)
    2628:	18d3      	adds	r3, r2, r3
    262a:	685b      	ldr	r3, [r3, #4]
    262c:	049b      	lsls	r3, r3, #18
    262e:	0c9b      	lsrs	r3, r3, #18
    2630:	495a      	ldr	r1, [pc, #360]	; (279c <USB_Handler+0x598>)
    2632:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2634:	0103      	lsls	r3, r0, #4
    2636:	18fb      	adds	r3, r7, r3
    2638:	33dc      	adds	r3, #220	; 0xdc
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	4640      	mov	r0, r8
    263e:	4798      	blx	r3
    2640:	e0a5      	b.n	278e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2642:	465d      	mov	r5, fp
    2644:	4215      	tst	r5, r2
    2646:	d03f      	beq.n	26c8 <USB_Handler+0x4c4>
    2648:	003d      	movs	r5, r7
    264a:	4647      	mov	r7, r8
    264c:	4680      	mov	r8, r0
    264e:	015b      	lsls	r3, r3, #5
    2650:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2652:	2308      	movs	r3, #8
    2654:	33ff      	adds	r3, #255	; 0xff
    2656:	5ceb      	ldrb	r3, [r5, r3]
    2658:	079b      	lsls	r3, r3, #30
    265a:	d512      	bpl.n	2682 <USB_Handler+0x47e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    265c:	2202      	movs	r2, #2
    265e:	2308      	movs	r3, #8
    2660:	33ff      	adds	r3, #255	; 0xff
    2662:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2664:	4a4d      	ldr	r2, [pc, #308]	; (279c <USB_Handler+0x598>)
    2666:	3b88      	subs	r3, #136	; 0x88
    2668:	3bff      	subs	r3, #255	; 0xff
    266a:	4303      	orrs	r3, r0
    266c:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	015b      	lsls	r3, r3, #5
    2672:	484b      	ldr	r0, [pc, #300]	; (27a0 <USB_Handler+0x59c>)
    2674:	18c3      	adds	r3, r0, r3
    2676:	3310      	adds	r3, #16
    2678:	685b      	ldr	r3, [r3, #4]
    267a:	049b      	lsls	r3, r3, #18
    267c:	0c9b      	lsrs	r3, r3, #18
    267e:	8053      	strh	r3, [r2, #2]
    2680:	e017      	b.n	26b2 <USB_Handler+0x4ae>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2682:	2308      	movs	r3, #8
    2684:	33ff      	adds	r3, #255	; 0xff
    2686:	5ceb      	ldrb	r3, [r5, r3]
    2688:	07db      	lsls	r3, r3, #31
    268a:	d512      	bpl.n	26b2 <USB_Handler+0x4ae>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    268c:	2201      	movs	r2, #1
    268e:	2308      	movs	r3, #8
    2690:	33ff      	adds	r3, #255	; 0xff
    2692:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2694:	4841      	ldr	r0, [pc, #260]	; (279c <USB_Handler+0x598>)
    2696:	4643      	mov	r3, r8
    2698:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    269a:	9b01      	ldr	r3, [sp, #4]
    269c:	015a      	lsls	r2, r3, #5
    269e:	4b40      	ldr	r3, [pc, #256]	; (27a0 <USB_Handler+0x59c>)
    26a0:	189b      	adds	r3, r3, r2
    26a2:	685a      	ldr	r2, [r3, #4]
    26a4:	0492      	lsls	r2, r2, #18
    26a6:	0c92      	lsrs	r2, r2, #18
    26a8:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    26aa:	685b      	ldr	r3, [r3, #4]
    26ac:	011b      	lsls	r3, r3, #4
    26ae:	0c9b      	lsrs	r3, r3, #18
    26b0:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    26b2:	078b      	lsls	r3, r1, #30
    26b4:	d06b      	beq.n	278e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	330d      	adds	r3, #13
    26ba:	011b      	lsls	r3, r3, #4
    26bc:	18fb      	adds	r3, r7, r3
    26be:	685b      	ldr	r3, [r3, #4]
    26c0:	4936      	ldr	r1, [pc, #216]	; (279c <USB_Handler+0x598>)
    26c2:	0038      	movs	r0, r7
    26c4:	4798      	blx	r3
    26c6:	e062      	b.n	278e <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    26c8:	250c      	movs	r5, #12
    26ca:	4215      	tst	r5, r2
    26cc:	d05a      	beq.n	2784 <USB_Handler+0x580>
    26ce:	003d      	movs	r5, r7
    26d0:	4647      	mov	r7, r8
    26d2:	4680      	mov	r8, r0
    26d4:	015b      	lsls	r3, r3, #5
    26d6:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    26d8:	2308      	movs	r3, #8
    26da:	33ff      	adds	r3, #255	; 0xff
    26dc:	5ceb      	ldrb	r3, [r5, r3]
    26de:	071b      	lsls	r3, r3, #28
    26e0:	d521      	bpl.n	2726 <USB_Handler+0x522>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    26e2:	2208      	movs	r2, #8
    26e4:	2308      	movs	r3, #8
    26e6:	33ff      	adds	r3, #255	; 0xff
    26e8:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    26ea:	9801      	ldr	r0, [sp, #4]
    26ec:	0143      	lsls	r3, r0, #5
    26ee:	4a2c      	ldr	r2, [pc, #176]	; (27a0 <USB_Handler+0x59c>)
    26f0:	18d3      	adds	r3, r2, r3
    26f2:	7e9b      	ldrb	r3, [r3, #26]
    26f4:	079b      	lsls	r3, r3, #30
    26f6:	d506      	bpl.n	2706 <USB_Handler+0x502>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    26f8:	0142      	lsls	r2, r0, #5
    26fa:	4b29      	ldr	r3, [pc, #164]	; (27a0 <USB_Handler+0x59c>)
    26fc:	189b      	adds	r3, r3, r2
    26fe:	7e9a      	ldrb	r2, [r3, #26]
    2700:	2002      	movs	r0, #2
    2702:	4382      	bics	r2, r0
    2704:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2706:	2380      	movs	r3, #128	; 0x80
    2708:	425b      	negs	r3, r3
    270a:	4642      	mov	r2, r8
    270c:	4313      	orrs	r3, r2
    270e:	4a23      	ldr	r2, [pc, #140]	; (279c <USB_Handler+0x598>)
    2710:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2712:	9b01      	ldr	r3, [sp, #4]
    2714:	3308      	adds	r3, #8
    2716:	015b      	lsls	r3, r3, #5
    2718:	683a      	ldr	r2, [r7, #0]
    271a:	4694      	mov	ip, r2
    271c:	4463      	add	r3, ip
    271e:	79db      	ldrb	r3, [r3, #7]
    2720:	079b      	lsls	r3, r3, #30
    2722:	d523      	bpl.n	276c <USB_Handler+0x568>
    2724:	e033      	b.n	278e <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2726:	2308      	movs	r3, #8
    2728:	33ff      	adds	r3, #255	; 0xff
    272a:	5ceb      	ldrb	r3, [r5, r3]
    272c:	075b      	lsls	r3, r3, #29
    272e:	d51d      	bpl.n	276c <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2730:	2204      	movs	r2, #4
    2732:	2308      	movs	r3, #8
    2734:	33ff      	adds	r3, #255	; 0xff
    2736:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2738:	9801      	ldr	r0, [sp, #4]
    273a:	0143      	lsls	r3, r0, #5
    273c:	4a18      	ldr	r2, [pc, #96]	; (27a0 <USB_Handler+0x59c>)
    273e:	18d3      	adds	r3, r2, r3
    2740:	7a9b      	ldrb	r3, [r3, #10]
    2742:	079b      	lsls	r3, r3, #30
    2744:	d506      	bpl.n	2754 <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2746:	0142      	lsls	r2, r0, #5
    2748:	4b15      	ldr	r3, [pc, #84]	; (27a0 <USB_Handler+0x59c>)
    274a:	189b      	adds	r3, r3, r2
    274c:	7a9a      	ldrb	r2, [r3, #10]
    274e:	2002      	movs	r0, #2
    2750:	4382      	bics	r2, r0
    2752:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2754:	4b11      	ldr	r3, [pc, #68]	; (279c <USB_Handler+0x598>)
    2756:	4642      	mov	r2, r8
    2758:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    275a:	9b01      	ldr	r3, [sp, #4]
    275c:	3308      	adds	r3, #8
    275e:	015b      	lsls	r3, r3, #5
    2760:	683a      	ldr	r2, [r7, #0]
    2762:	4694      	mov	ip, r2
    2764:	4463      	add	r3, ip
    2766:	79db      	ldrb	r3, [r3, #7]
    2768:	07db      	lsls	r3, r3, #31
    276a:	d410      	bmi.n	278e <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    276c:	230c      	movs	r3, #12
    276e:	420b      	tst	r3, r1
    2770:	d00d      	beq.n	278e <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	011b      	lsls	r3, r3, #4
    2776:	18fb      	adds	r3, r7, r3
    2778:	33d8      	adds	r3, #216	; 0xd8
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	4907      	ldr	r1, [pc, #28]	; (279c <USB_Handler+0x598>)
    277e:	0038      	movs	r0, r7
    2780:	4798      	blx	r3
    2782:	e004      	b.n	278e <USB_Handler+0x58a>
    2784:	3301      	adds	r3, #1
    2786:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2788:	2b08      	cmp	r3, #8
    278a:	d000      	beq.n	278e <USB_Handler+0x58a>
    278c:	e6f6      	b.n	257c <USB_Handler+0x378>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    278e:	b003      	add	sp, #12
    2790:	bc3c      	pop	{r2, r3, r4, r5}
    2792:	4690      	mov	r8, r2
    2794:	4699      	mov	r9, r3
    2796:	46a2      	mov	sl, r4
    2798:	46ab      	mov	fp, r5
    279a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    279c:	200002fc 	.word	0x200002fc
    27a0:	200005f0 	.word	0x200005f0

000027a4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    27a4:	2300      	movs	r3, #0
    27a6:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    27a8:	3301      	adds	r3, #1
    27aa:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    27ac:	2203      	movs	r2, #3
    27ae:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    27b0:	70c3      	strb	r3, [r0, #3]
}
    27b2:	4770      	bx	lr

000027b4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    27b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b6:	464f      	mov	r7, r9
    27b8:	4646      	mov	r6, r8
    27ba:	b4c0      	push	{r6, r7}
    27bc:	b083      	sub	sp, #12
    27be:	0004      	movs	r4, r0
    27c0:	000d      	movs	r5, r1
    27c2:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    27c4:	2300      	movs	r3, #0
    27c6:	4a64      	ldr	r2, [pc, #400]	; (2958 <usb_init+0x1a4>)
    27c8:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    27ca:	4a64      	ldr	r2, [pc, #400]	; (295c <usb_init+0x1a8>)
    27cc:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    27ce:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    27d0:	4863      	ldr	r0, [pc, #396]	; (2960 <usb_init+0x1ac>)
    27d2:	6982      	ldr	r2, [r0, #24]
    27d4:	2101      	movs	r1, #1
    27d6:	430a      	orrs	r2, r1
    27d8:	6182      	str	r2, [r0, #24]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    27da:	af01      	add	r7, sp, #4
    27dc:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    27de:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    27e0:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    27e2:	3306      	adds	r3, #6
    27e4:	4699      	mov	r9, r3
    27e6:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    27e8:	0039      	movs	r1, r7
    27ea:	2018      	movs	r0, #24
    27ec:	4b5d      	ldr	r3, [pc, #372]	; (2964 <usb_init+0x1b0>)
    27ee:	4698      	mov	r8, r3
    27f0:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    27f2:	464b      	mov	r3, r9
    27f4:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    27f6:	0039      	movs	r1, r7
    27f8:	2019      	movs	r0, #25
    27fa:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    27fc:	78b3      	ldrb	r3, [r6, #2]
    27fe:	466a      	mov	r2, sp
    2800:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2802:	4669      	mov	r1, sp
    2804:	2004      	movs	r0, #4
    2806:	4b58      	ldr	r3, [pc, #352]	; (2968 <usb_init+0x1b4>)
    2808:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    280a:	2004      	movs	r0, #4
    280c:	4b57      	ldr	r3, [pc, #348]	; (296c <usb_init+0x1b8>)
    280e:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2810:	782a      	ldrb	r2, [r5, #0]
    2812:	2301      	movs	r3, #1
    2814:	4313      	orrs	r3, r2
    2816:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2818:	78ab      	ldrb	r3, [r5, #2]
    281a:	07db      	lsls	r3, r3, #31
    281c:	d4fc      	bmi.n	2818 <usb_init+0x64>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    281e:	4b54      	ldr	r3, [pc, #336]	; (2970 <usb_init+0x1bc>)
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	039b      	lsls	r3, r3, #14
    2824:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2826:	2b1f      	cmp	r3, #31
    2828:	d100      	bne.n	282c <usb_init+0x78>
		pad_transn = 5;
    282a:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    282c:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    282e:	019a      	lsls	r2, r3, #6
    2830:	4b50      	ldr	r3, [pc, #320]	; (2974 <usb_init+0x1c0>)
    2832:	400b      	ands	r3, r1
    2834:	4313      	orrs	r3, r2
    2836:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2838:	4b4d      	ldr	r3, [pc, #308]	; (2970 <usb_init+0x1bc>)
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	025b      	lsls	r3, r3, #9
    283e:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2840:	2b1f      	cmp	r3, #31
    2842:	d100      	bne.n	2846 <usb_init+0x92>
		pad_transp = 29;
    2844:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2846:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2848:	211f      	movs	r1, #31
    284a:	438a      	bics	r2, r1
    284c:	4313      	orrs	r3, r2
    284e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2850:	4b47      	ldr	r3, [pc, #284]	; (2970 <usb_init+0x1bc>)
    2852:	681b      	ldr	r3, [r3, #0]
    2854:	019b      	lsls	r3, r3, #6
    2856:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2858:	2b07      	cmp	r3, #7
    285a:	d100      	bne.n	285e <usb_init+0xaa>
		pad_trim = 3;
    285c:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    285e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    2860:	031a      	lsls	r2, r3, #12
    2862:	4b45      	ldr	r3, [pc, #276]	; (2978 <usb_init+0x1c4>)
    2864:	400b      	ands	r3, r1
    2866:	4313      	orrs	r3, r2
    2868:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    286a:	7832      	ldrb	r2, [r6, #0]
    286c:	782b      	ldrb	r3, [r5, #0]
    286e:	01d2      	lsls	r2, r2, #7
    2870:	217f      	movs	r1, #127	; 0x7f
    2872:	400b      	ands	r3, r1
    2874:	4313      	orrs	r3, r2
    2876:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2878:	7872      	ldrb	r2, [r6, #1]
    287a:	782b      	ldrb	r3, [r5, #0]
    287c:	397e      	subs	r1, #126	; 0x7e
    287e:	400a      	ands	r2, r1
    2880:	0092      	lsls	r2, r2, #2
    2882:	3103      	adds	r1, #3
    2884:	438b      	bics	r3, r1
    2886:	4313      	orrs	r3, r2
    2888:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    288a:	4b3c      	ldr	r3, [pc, #240]	; (297c <usb_init+0x1c8>)
    288c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    288e:	78f3      	ldrb	r3, [r6, #3]
    2890:	2b01      	cmp	r3, #1
    2892:	d105      	bne.n	28a0 <usb_init+0xec>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2894:	6822      	ldr	r2, [r4, #0]
    2896:	8913      	ldrh	r3, [r2, #8]
    2898:	3108      	adds	r1, #8
    289a:	438b      	bics	r3, r1
    289c:	8113      	strh	r3, [r2, #8]
    289e:	e008      	b.n	28b2 <usb_init+0xfe>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    28a0:	2b00      	cmp	r3, #0
    28a2:	d106      	bne.n	28b2 <usb_init+0xfe>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    28a4:	6821      	ldr	r1, [r4, #0]
    28a6:	890b      	ldrh	r3, [r1, #8]
    28a8:	220c      	movs	r2, #12
    28aa:	4393      	bics	r3, r2
    28ac:	2204      	movs	r2, #4
    28ae:	4313      	orrs	r3, r2
    28b0:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    28b2:	2280      	movs	r2, #128	; 0x80
    28b4:	0052      	lsls	r2, r2, #1
    28b6:	2100      	movs	r1, #0
    28b8:	4830      	ldr	r0, [pc, #192]	; (297c <usb_init+0x1c8>)
    28ba:	4b31      	ldr	r3, [pc, #196]	; (2980 <usb_init+0x1cc>)
    28bc:	4798      	blx	r3
    28be:	1d22      	adds	r2, r4, #4
    28c0:	0023      	movs	r3, r4
    28c2:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    28c4:	2100      	movs	r1, #0
    28c6:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    28c8:	4293      	cmp	r3, r2
    28ca:	d1fc      	bne.n	28c6 <usb_init+0x112>
    28cc:	0021      	movs	r1, r4
    28ce:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    28d0:	2200      	movs	r2, #0
    28d2:	601a      	str	r2, [r3, #0]
    28d4:	605a      	str	r2, [r3, #4]
    28d6:	609a      	str	r2, [r3, #8]
    28d8:	60da      	str	r2, [r3, #12]
    28da:	3310      	adds	r3, #16
#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    28dc:	428b      	cmp	r3, r1
    28de:	d1f8      	bne.n	28d2 <usb_init+0x11e>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    28e0:	2300      	movs	r3, #0
    28e2:	22a4      	movs	r2, #164	; 0xa4
    28e4:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    28e6:	3201      	adds	r2, #1
    28e8:	54a3      	strb	r3, [r4, r2]
    28ea:	0023      	movs	r3, r4
    28ec:	33a6      	adds	r3, #166	; 0xa6
    28ee:	0021      	movs	r1, r4
    28f0:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    28f2:	2200      	movs	r2, #0
    28f4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    28f6:	721a      	strb	r2, [r3, #8]
    28f8:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    28fa:	4299      	cmp	r1, r3
    28fc:	d1fa      	bne.n	28f4 <usb_init+0x140>
    28fe:	0022      	movs	r2, r4
    2900:	32b8      	adds	r2, #184	; 0xb8
    2902:	0023      	movs	r3, r4
    2904:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2906:	2100      	movs	r1, #0
    2908:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    290a:	429a      	cmp	r2, r3
    290c:	d1fc      	bne.n	2908 <usb_init+0x154>
    290e:	0021      	movs	r1, r4
    2910:	3155      	adds	r1, #85	; 0x55
    2912:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2914:	2200      	movs	r2, #0
    2916:	601a      	str	r2, [r3, #0]
    2918:	605a      	str	r2, [r3, #4]
    291a:	609a      	str	r2, [r3, #8]
    291c:	60da      	str	r2, [r3, #12]
    291e:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    2920:	428b      	cmp	r3, r1
    2922:	d1f8      	bne.n	2916 <usb_init+0x162>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2924:	2300      	movs	r3, #0
    2926:	22aa      	movs	r2, #170	; 0xaa
    2928:	0052      	lsls	r2, r2, #1
    292a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    292c:	3202      	adds	r2, #2
    292e:	52a3      	strh	r3, [r4, r2]
    2930:	0023      	movs	r3, r4
    2932:	3359      	adds	r3, #89	; 0x59
    2934:	33ff      	adds	r3, #255	; 0xff
    2936:	3461      	adds	r4, #97	; 0x61
    2938:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    293a:	2200      	movs	r2, #0
    293c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    293e:	721a      	strb	r2, [r3, #8]
    2940:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    2942:	429c      	cmp	r4, r3
    2944:	d1fa      	bne.n	293c <usb_init+0x188>
    2946:	2240      	movs	r2, #64	; 0x40
    2948:	4b0e      	ldr	r3, [pc, #56]	; (2984 <usb_init+0x1d0>)
    294a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    294c:	2000      	movs	r0, #0
    294e:	b003      	add	sp, #12
    2950:	bc0c      	pop	{r2, r3}
    2952:	4690      	mov	r8, r2
    2954:	4699      	mov	r9, r3
    2956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2958:	200002f8 	.word	0x200002f8
    295c:	20000304 	.word	0x20000304
    2960:	40000400 	.word	0x40000400
    2964:	000032d9 	.word	0x000032d9
    2968:	000031dd 	.word	0x000031dd
    296c:	0000316d 	.word	0x0000316d
    2970:	0080601c 	.word	0x0080601c
    2974:	fffff83f 	.word	0xfffff83f
    2978:	ffff8fff 	.word	0xffff8fff
    297c:	200005f0 	.word	0x200005f0
    2980:	000037df 	.word	0x000037df
    2984:	e000e100 	.word	0xe000e100

00002988 <usb_app_init>:
/*!
* @brief @todo
* @return void
*/
void usb_app_init(void)
{
    2988:	b500      	push	{lr}
    298a:	b083      	sub	sp, #12
    struct port_config gpio_output   = { .direction = PORT_PIN_DIR_OUTPUT };
    struct port_config gpio_input_up = { .direction = PORT_PIN_DIR_INPUT, \
    .input_pull = PORT_PIN_PULL_UP };
    struct port_config gpio_input    = { .direction = PORT_PIN_DIR_INPUT, \
    298c:	2203      	movs	r2, #3
    298e:	2100      	movs	r1, #0
    2990:	a801      	add	r0, sp, #4
    2992:	4b05      	ldr	r3, [pc, #20]	; (29a8 <usb_app_init+0x20>)
    2994:	4798      	blx	r3
    .input_pull = PORT_PIN_PULL_NONE };    
    
    // Configure USB Vbus monitor as input without pullup
    port_pin_set_config(USB_VBUS_DET_PIN, &gpio_input);
    2996:	a901      	add	r1, sp, #4
    2998:	2016      	movs	r0, #22
    299a:	4b04      	ldr	r3, [pc, #16]	; (29ac <usb_app_init+0x24>)
    299c:	4798      	blx	r3
    
    udc_start();
    299e:	4b04      	ldr	r3, [pc, #16]	; (29b0 <usb_app_init+0x28>)
    29a0:	4798      	blx	r3
}
    29a2:	b003      	add	sp, #12
    29a4:	bd00      	pop	{pc}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	000037df 	.word	0x000037df
    29ac:	00002b81 	.word	0x00002b81
    29b0:	000008a5 	.word	0x000008a5

000029b4 <amp_init>:
/*!
* @brief @todo
* @return void
*/
void amp_init(void)
{
    29b4:	b530      	push	{r4, r5, lr}
    29b6:	b083      	sub	sp, #12
    
    struct port_config gpio_output   = { .direction = PORT_PIN_DIR_OUTPUT };
    29b8:	ac01      	add	r4, sp, #4
    29ba:	2203      	movs	r2, #3
    29bc:	2100      	movs	r1, #0
    29be:	0020      	movs	r0, r4
    29c0:	4b09      	ldr	r3, [pc, #36]	; (29e8 <amp_init+0x34>)
    29c2:	4798      	blx	r3
    29c4:	2301      	movs	r3, #1
    29c6:	7023      	strb	r3, [r4, #0]
   
    // Configure amplifier & audio related discretes as outputs
    port_pin_set_config(AMP_SHDN_PIN, &gpio_output);
    29c8:	0021      	movs	r1, r4
    29ca:	2024      	movs	r0, #36	; 0x24
    29cc:	4d07      	ldr	r5, [pc, #28]	; (29ec <amp_init+0x38>)
    29ce:	47a8      	blx	r5
    port_pin_set_config(VREF_PIN, &gpio_output);
    29d0:	0021      	movs	r1, r4
    29d2:	2003      	movs	r0, #3
    29d4:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29d6:	4b06      	ldr	r3, [pc, #24]	; (29f0 <amp_init+0x3c>)
    29d8:	001a      	movs	r2, r3
    29da:	3280      	adds	r2, #128	; 0x80
    29dc:	2110      	movs	r1, #16
    29de:	6151      	str	r1, [r2, #20]
    29e0:	2208      	movs	r2, #8
    29e2:	615a      	str	r2, [r3, #20]
    
    // Turn off amplifier and Vref input
    port_pin_set_output_level(AMP_SHDN_PIN, AMP_SHDN_ACTIVE);
    port_pin_set_output_level(VREF_PIN, VREF_INACTIVE); 
}
    29e4:	b003      	add	sp, #12
    29e6:	bd30      	pop	{r4, r5, pc}
    29e8:	000037df 	.word	0x000037df
    29ec:	00002b81 	.word	0x00002b81
    29f0:	40002800 	.word	0x40002800

000029f4 <flash_init>:
/*!
* @brief @todo
* @return void
*/
void flash_init(void)
{
    29f4:	b570      	push	{r4, r5, r6, lr}
    29f6:	b082      	sub	sp, #8
    struct port_config gpio_output   = { .direction = PORT_PIN_DIR_OUTPUT };  
    29f8:	ac01      	add	r4, sp, #4
    29fa:	2203      	movs	r2, #3
    29fc:	2100      	movs	r1, #0
    29fe:	0020      	movs	r0, r4
    2a00:	4b0b      	ldr	r3, [pc, #44]	; (2a30 <flash_init+0x3c>)
    2a02:	4798      	blx	r3
    2a04:	2601      	movs	r6, #1
    2a06:	7026      	strb	r6, [r4, #0]
    
    // Configure flash discretes as outputs
    port_pin_set_config(FLASH_CS_PIN, &gpio_output);
    2a08:	0021      	movs	r1, r4
    2a0a:	2020      	movs	r0, #32
    2a0c:	4d09      	ldr	r5, [pc, #36]	; (2a34 <flash_init+0x40>)
    2a0e:	47a8      	blx	r5
    port_pin_set_config(FLASH_HOLD_PIN, &gpio_output);
    2a10:	0021      	movs	r1, r4
    2a12:	203f      	movs	r0, #63	; 0x3f
    2a14:	47a8      	blx	r5
    port_pin_set_config(FLASH_WP_PIN, &gpio_output);
    2a16:	0021      	movs	r1, r4
    2a18:	203e      	movs	r0, #62	; 0x3e
    2a1a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a1c:	4b06      	ldr	r3, [pc, #24]	; (2a38 <flash_init+0x44>)
    2a1e:	619e      	str	r6, [r3, #24]
    2a20:	2280      	movs	r2, #128	; 0x80
    2a22:	0612      	lsls	r2, r2, #24
    2a24:	619a      	str	r2, [r3, #24]
    2a26:	2280      	movs	r2, #128	; 0x80
    2a28:	05d2      	lsls	r2, r2, #23
    2a2a:	619a      	str	r2, [r3, #24]
    
    // Set flash discretes to inactive states
    port_pin_set_output_level(FLASH_CS_PIN, FLASH_INACTIVE);
    port_pin_set_output_level(FLASH_HOLD_PIN, FLASH_INACTIVE);
    port_pin_set_output_level(FLASH_WP_PIN, FLASH_INACTIVE);
}
    2a2c:	b002      	add	sp, #8
    2a2e:	bd70      	pop	{r4, r5, r6, pc}
    2a30:	000037df 	.word	0x000037df
    2a34:	00002b81 	.word	0x00002b81
    2a38:	40002880 	.word	0x40002880

00002a3c <led_init>:
/*!
* @brief todo
* @return void
*/
void led_init(void)
{    
    2a3c:	b530      	push	{r4, r5, lr}
    2a3e:	b083      	sub	sp, #12
    struct port_config gpio_output   = { .direction = PORT_PIN_DIR_OUTPUT };
    2a40:	ac01      	add	r4, sp, #4
    2a42:	2203      	movs	r2, #3
    2a44:	2100      	movs	r1, #0
    2a46:	0020      	movs	r0, r4
    2a48:	4b23      	ldr	r3, [pc, #140]	; (2ad8 <led_init+0x9c>)
    2a4a:	4798      	blx	r3
    2a4c:	2301      	movs	r3, #1
    2a4e:	7023      	strb	r3, [r4, #0]
    
    // Configure LEDs as outputs
    port_pin_set_config(LED_R1_PIN, &gpio_output);
    2a50:	0021      	movs	r1, r4
    2a52:	2007      	movs	r0, #7
    2a54:	4d21      	ldr	r5, [pc, #132]	; (2adc <led_init+0xa0>)
    2a56:	47a8      	blx	r5
    port_pin_set_config(LED_G1_PIN, &gpio_output);
    2a58:	0021      	movs	r1, r4
    2a5a:	2006      	movs	r0, #6
    2a5c:	47a8      	blx	r5
    port_pin_set_config(LED_R2_PIN, &gpio_output);
    2a5e:	0021      	movs	r1, r4
    2a60:	2029      	movs	r0, #41	; 0x29
    2a62:	47a8      	blx	r5
    port_pin_set_config(LED_G2_PIN, &gpio_output);
    2a64:	0021      	movs	r1, r4
    2a66:	2028      	movs	r0, #40	; 0x28
    2a68:	47a8      	blx	r5
    port_pin_set_config(LED_R3_PIN, &gpio_output);
    2a6a:	0021      	movs	r1, r4
    2a6c:	2009      	movs	r0, #9
    2a6e:	47a8      	blx	r5
    port_pin_set_config(LED_G3_PIN, &gpio_output);
    2a70:	0021      	movs	r1, r4
    2a72:	2008      	movs	r0, #8
    2a74:	47a8      	blx	r5
    port_pin_set_config(LED_R4_PIN, &gpio_output);
    2a76:	0021      	movs	r1, r4
    2a78:	200b      	movs	r0, #11
    2a7a:	47a8      	blx	r5
    port_pin_set_config(LED_G4_PIN, &gpio_output);
    2a7c:	0021      	movs	r1, r4
    2a7e:	200a      	movs	r0, #10
    2a80:	47a8      	blx	r5
    port_pin_set_config(LED_R5_PIN, &gpio_output);
    2a82:	0021      	movs	r1, r4
    2a84:	202d      	movs	r0, #45	; 0x2d
    2a86:	47a8      	blx	r5
    port_pin_set_config(LED_G5_PIN, &gpio_output);
    2a88:	0021      	movs	r1, r4
    2a8a:	202c      	movs	r0, #44	; 0x2c
    2a8c:	47a8      	blx	r5
    port_pin_set_config(LED_R6_PIN, &gpio_output);
    2a8e:	0021      	movs	r1, r4
    2a90:	202b      	movs	r0, #43	; 0x2b
    2a92:	47a8      	blx	r5
    port_pin_set_config(LED_G6_PIN, &gpio_output);
    2a94:	0021      	movs	r1, r4
    2a96:	202a      	movs	r0, #42	; 0x2a
    2a98:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2a9a:	4b11      	ldr	r3, [pc, #68]	; (2ae0 <led_init+0xa4>)
    2a9c:	2280      	movs	r2, #128	; 0x80
    2a9e:	615a      	str	r2, [r3, #20]
    2aa0:	3a40      	subs	r2, #64	; 0x40
    2aa2:	615a      	str	r2, [r3, #20]
    2aa4:	001a      	movs	r2, r3
    2aa6:	3280      	adds	r2, #128	; 0x80
    2aa8:	2080      	movs	r0, #128	; 0x80
    2aaa:	0080      	lsls	r0, r0, #2
    2aac:	6150      	str	r0, [r2, #20]
    2aae:	2180      	movs	r1, #128	; 0x80
    2ab0:	0049      	lsls	r1, r1, #1
    2ab2:	6151      	str	r1, [r2, #20]
    2ab4:	6158      	str	r0, [r3, #20]
    2ab6:	6159      	str	r1, [r3, #20]
    2ab8:	2080      	movs	r0, #128	; 0x80
    2aba:	0100      	lsls	r0, r0, #4
    2abc:	6158      	str	r0, [r3, #20]
    2abe:	2180      	movs	r1, #128	; 0x80
    2ac0:	00c9      	lsls	r1, r1, #3
    2ac2:	6159      	str	r1, [r3, #20]
    2ac4:	2380      	movs	r3, #128	; 0x80
    2ac6:	019b      	lsls	r3, r3, #6
    2ac8:	6153      	str	r3, [r2, #20]
    2aca:	2380      	movs	r3, #128	; 0x80
    2acc:	015b      	lsls	r3, r3, #5
    2ace:	6153      	str	r3, [r2, #20]
    2ad0:	6150      	str	r0, [r2, #20]
    2ad2:	6151      	str	r1, [r2, #20]
    port_pin_set_output_level(LED_G4_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_R5_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_G5_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_R6_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_G6_PIN, LED_INACTIVE);
}
    2ad4:	b003      	add	sp, #12
    2ad6:	bd30      	pop	{r4, r5, pc}
    2ad8:	000037df 	.word	0x000037df
    2adc:	00002b81 	.word	0x00002b81
    2ae0:	40002800 	.word	0x40002800

00002ae4 <pb_init>:
/*!
* @brief @todo
* @return void
*/
void pb_init(void)
{
    2ae4:	b510      	push	{r4, lr}
    2ae6:	b082      	sub	sp, #8
    struct port_config gpio_output   = { .direction = PORT_PIN_DIR_OUTPUT };
    struct port_config gpio_input_up = { .direction = PORT_PIN_DIR_INPUT, \
    2ae8:	ac01      	add	r4, sp, #4
    2aea:	2203      	movs	r2, #3
    2aec:	2100      	movs	r1, #0
    2aee:	0020      	movs	r0, r4
    2af0:	4b04      	ldr	r3, [pc, #16]	; (2b04 <pb_init+0x20>)
    2af2:	4798      	blx	r3
    2af4:	2301      	movs	r3, #1
    2af6:	7063      	strb	r3, [r4, #1]
    .input_pull = PORT_PIN_PULL_UP };
    struct port_config gpio_input    = { .direction = PORT_PIN_DIR_INPUT, \
    .input_pull = PORT_PIN_PULL_NONE };
    
    // Configure pushbutton pin as input with pullup
    port_pin_set_config(PB_PIN, &gpio_input_up);
    2af8:	0021      	movs	r1, r4
    2afa:	201b      	movs	r0, #27
    2afc:	4b02      	ldr	r3, [pc, #8]	; (2b08 <pb_init+0x24>)
    2afe:	4798      	blx	r3
}
    2b00:	b002      	add	sp, #8
    2b02:	bd10      	pop	{r4, pc}
    2b04:	000037df 	.word	0x000037df
    2b08:	00002b81 	.word	0x00002b81

00002b0c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2b0c:	4b0c      	ldr	r3, [pc, #48]	; (2b40 <cpu_irq_enter_critical+0x34>)
    2b0e:	681b      	ldr	r3, [r3, #0]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d110      	bne.n	2b36 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2b14:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d109      	bne.n	2b30 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2b1c:	b672      	cpsid	i
    2b1e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2b22:	2200      	movs	r2, #0
    2b24:	4b07      	ldr	r3, [pc, #28]	; (2b44 <cpu_irq_enter_critical+0x38>)
    2b26:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2b28:	3201      	adds	r2, #1
    2b2a:	4b07      	ldr	r3, [pc, #28]	; (2b48 <cpu_irq_enter_critical+0x3c>)
    2b2c:	701a      	strb	r2, [r3, #0]
    2b2e:	e002      	b.n	2b36 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2b30:	2200      	movs	r2, #0
    2b32:	4b05      	ldr	r3, [pc, #20]	; (2b48 <cpu_irq_enter_critical+0x3c>)
    2b34:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2b36:	4a02      	ldr	r2, [pc, #8]	; (2b40 <cpu_irq_enter_critical+0x34>)
    2b38:	6813      	ldr	r3, [r2, #0]
    2b3a:	3301      	adds	r3, #1
    2b3c:	6013      	str	r3, [r2, #0]
}
    2b3e:	4770      	bx	lr
    2b40:	20000308 	.word	0x20000308
    2b44:	200000f4 	.word	0x200000f4
    2b48:	2000030c 	.word	0x2000030c

00002b4c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2b4c:	4b08      	ldr	r3, [pc, #32]	; (2b70 <cpu_irq_leave_critical+0x24>)
    2b4e:	681a      	ldr	r2, [r3, #0]
    2b50:	3a01      	subs	r2, #1
    2b52:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d109      	bne.n	2b6e <cpu_irq_leave_critical+0x22>
    2b5a:	4b06      	ldr	r3, [pc, #24]	; (2b74 <cpu_irq_leave_critical+0x28>)
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d005      	beq.n	2b6e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2b62:	2201      	movs	r2, #1
    2b64:	4b04      	ldr	r3, [pc, #16]	; (2b78 <cpu_irq_leave_critical+0x2c>)
    2b66:	701a      	strb	r2, [r3, #0]
    2b68:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2b6c:	b662      	cpsie	i
	}
}
    2b6e:	4770      	bx	lr
    2b70:	20000308 	.word	0x20000308
    2b74:	2000030c 	.word	0x2000030c
    2b78:	200000f4 	.word	0x200000f4

00002b7c <system_board_init>:
// 	port_pin_set_output_level(AT86RFX_RST_PIN, true);
// 	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
// 	pin_conf.direction  = PORT_PIN_DIR_INPUT;
// 	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
// #endif	
}
    2b7c:	4770      	bx	lr
    2b7e:	46c0      	nop			; (mov r8, r8)

00002b80 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2b80:	b500      	push	{lr}
    2b82:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b84:	ab01      	add	r3, sp, #4
    2b86:	2280      	movs	r2, #128	; 0x80
    2b88:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2b8a:	780a      	ldrb	r2, [r1, #0]
    2b8c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2b8e:	784a      	ldrb	r2, [r1, #1]
    2b90:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2b92:	788a      	ldrb	r2, [r1, #2]
    2b94:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2b96:	0019      	movs	r1, r3
    2b98:	4b01      	ldr	r3, [pc, #4]	; (2ba0 <port_pin_set_config+0x20>)
    2b9a:	4798      	blx	r3
}
    2b9c:	b003      	add	sp, #12
    2b9e:	bd00      	pop	{pc}
    2ba0:	000032d9 	.word	0x000032d9

00002ba4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2ba4:	b510      	push	{r4, lr}
	switch (clock_source) {
    2ba6:	2808      	cmp	r0, #8
    2ba8:	d803      	bhi.n	2bb2 <system_clock_source_get_hz+0xe>
    2baa:	0080      	lsls	r0, r0, #2
    2bac:	4b1c      	ldr	r3, [pc, #112]	; (2c20 <system_clock_source_get_hz+0x7c>)
    2bae:	581b      	ldr	r3, [r3, r0]
    2bb0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2bb2:	2000      	movs	r0, #0
    2bb4:	e032      	b.n	2c1c <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2bb6:	4b1b      	ldr	r3, [pc, #108]	; (2c24 <system_clock_source_get_hz+0x80>)
    2bb8:	6918      	ldr	r0, [r3, #16]
    2bba:	e02f      	b.n	2c1c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2bbc:	4b1a      	ldr	r3, [pc, #104]	; (2c28 <system_clock_source_get_hz+0x84>)
    2bbe:	7d18      	ldrb	r0, [r3, #20]
    2bc0:	0700      	lsls	r0, r0, #28
    2bc2:	0f80      	lsrs	r0, r0, #30
    2bc4:	3001      	adds	r0, #1
    2bc6:	4b19      	ldr	r3, [pc, #100]	; (2c2c <system_clock_source_get_hz+0x88>)
    2bc8:	4358      	muls	r0, r3
    2bca:	e027      	b.n	2c1c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2bcc:	4b15      	ldr	r3, [pc, #84]	; (2c24 <system_clock_source_get_hz+0x80>)
    2bce:	6958      	ldr	r0, [r3, #20]
    2bd0:	e024      	b.n	2c1c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2bd2:	4b14      	ldr	r3, [pc, #80]	; (2c24 <system_clock_source_get_hz+0x80>)
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	2002      	movs	r0, #2
    2bd8:	4018      	ands	r0, r3
    2bda:	d01f      	beq.n	2c1c <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2bdc:	4912      	ldr	r1, [pc, #72]	; (2c28 <system_clock_source_get_hz+0x84>)
    2bde:	2280      	movs	r2, #128	; 0x80
    2be0:	0052      	lsls	r2, r2, #1
    2be2:	68cb      	ldr	r3, [r1, #12]
    2be4:	4213      	tst	r3, r2
    2be6:	d0fc      	beq.n	2be2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2be8:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <system_clock_source_get_hz+0x80>)
    2bea:	681b      	ldr	r3, [r3, #0]
    2bec:	075b      	lsls	r3, r3, #29
    2bee:	d514      	bpl.n	2c1a <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2bf0:	2000      	movs	r0, #0
    2bf2:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <system_clock_source_get_hz+0x8c>)
    2bf4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2bf6:	4b0b      	ldr	r3, [pc, #44]	; (2c24 <system_clock_source_get_hz+0x80>)
    2bf8:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2bfa:	041b      	lsls	r3, r3, #16
    2bfc:	0c1b      	lsrs	r3, r3, #16
    2bfe:	4358      	muls	r0, r3
    2c00:	e00c      	b.n	2c1c <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2c02:	2328      	movs	r3, #40	; 0x28
    2c04:	4a08      	ldr	r2, [pc, #32]	; (2c28 <system_clock_source_get_hz+0x84>)
    2c06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2c08:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2c0a:	079b      	lsls	r3, r3, #30
    2c0c:	d506      	bpl.n	2c1c <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    2c0e:	4b05      	ldr	r3, [pc, #20]	; (2c24 <system_clock_source_get_hz+0x80>)
    2c10:	68d8      	ldr	r0, [r3, #12]
    2c12:	e003      	b.n	2c1c <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2c14:	2080      	movs	r0, #128	; 0x80
    2c16:	0200      	lsls	r0, r0, #8
    2c18:	e000      	b.n	2c1c <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2c1a:	4806      	ldr	r0, [pc, #24]	; (2c34 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    2c1c:	bd10      	pop	{r4, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	00003824 	.word	0x00003824
    2c24:	20000310 	.word	0x20000310
    2c28:	40000c00 	.word	0x40000c00
    2c2c:	003d0900 	.word	0x003d0900
    2c30:	00003201 	.word	0x00003201
    2c34:	02dc6c00 	.word	0x02dc6c00

00002c38 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    2c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c3a:	4647      	mov	r7, r8
    2c3c:	b480      	push	{r7}
    2c3e:	0001      	movs	r1, r0
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    2c40:	4b28      	ldr	r3, [pc, #160]	; (2ce4 <system_clock_source_xosc_set_config+0xac>)
    2c42:	8a1b      	ldrh	r3, [r3, #16]
    2c44:	469c      	mov	ip, r3
    2c46:	055a      	lsls	r2, r3, #21
    2c48:	0f52      	lsrs	r2, r2, #29

	temp.bit.STARTUP = config->startup_time;
    2c4a:	7843      	ldrb	r3, [r0, #1]
    2c4c:	240f      	movs	r4, #15
    2c4e:	401c      	ands	r4, r3

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2c50:	7806      	ldrb	r6, [r0, #0]
    2c52:	4273      	negs	r3, r6
    2c54:	415e      	adcs	r6, r3
    2c56:	b2f6      	uxtb	r6, r6
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    2c58:	7883      	ldrb	r3, [r0, #2]
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    2c5a:	0015      	movs	r5, r2
	}

	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d115      	bne.n	2c8c <system_clock_source_xosc_set_config+0x54>
		if (config->frequency <= 2000000) {
    2c60:	6840      	ldr	r0, [r0, #4]
			temp.bit.GAIN = 0;
    2c62:	2500      	movs	r5, #0

	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
    2c64:	4f20      	ldr	r7, [pc, #128]	; (2ce8 <system_clock_source_xosc_set_config+0xb0>)
    2c66:	42b8      	cmp	r0, r7
    2c68:	d910      	bls.n	2c8c <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
    2c6a:	3501      	adds	r5, #1

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
    2c6c:	4f1f      	ldr	r7, [pc, #124]	; (2cec <system_clock_source_xosc_set_config+0xb4>)
    2c6e:	42b8      	cmp	r0, r7
    2c70:	d90c      	bls.n	2c8c <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
    2c72:	3501      	adds	r5, #1
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
    2c74:	4f1e      	ldr	r7, [pc, #120]	; (2cf0 <system_clock_source_xosc_set_config+0xb8>)
    2c76:	42b8      	cmp	r0, r7
    2c78:	d908      	bls.n	2c8c <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
    2c7a:	3501      	adds	r5, #1
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
    2c7c:	4f1d      	ldr	r7, [pc, #116]	; (2cf4 <system_clock_source_xosc_set_config+0xbc>)
    2c7e:	42b8      	cmp	r0, r7
    2c80:	d904      	bls.n	2c8c <system_clock_source_xosc_set_config+0x54>
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    2c82:	0015      	movs	r5, r2
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
		} else if (config->frequency <= 32000000) {
    2c84:	4a1c      	ldr	r2, [pc, #112]	; (2cf8 <system_clock_source_xosc_set_config+0xc0>)
    2c86:	4290      	cmp	r0, r2
    2c88:	d800      	bhi.n	2c8c <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 4;
    2c8a:	2504      	movs	r5, #4
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
    2c8c:	7a4f      	ldrb	r7, [r1, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c8e:	7a0a      	ldrb	r2, [r1, #8]
    2c90:	4690      	mov	r8, r2

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    2c92:	6849      	ldr	r1, [r1, #4]
    2c94:	4a19      	ldr	r2, [pc, #100]	; (2cfc <system_clock_source_xosc_set_config+0xc4>)
    2c96:	6111      	str	r1, [r2, #16]

	OSCCTRL->XOSCCTRL = temp;
    2c98:	2201      	movs	r2, #1
    2c9a:	00b6      	lsls	r6, r6, #2
    2c9c:	2104      	movs	r1, #4
    2c9e:	4660      	mov	r0, ip
    2ca0:	4388      	bics	r0, r1
    2ca2:	0001      	movs	r1, r0
    2ca4:	4331      	orrs	r1, r6
    2ca6:	4640      	mov	r0, r8
    2ca8:	4010      	ands	r0, r2
    2caa:	0180      	lsls	r0, r0, #6
    2cac:	2640      	movs	r6, #64	; 0x40
    2cae:	43b1      	bics	r1, r6
    2cb0:	4301      	orrs	r1, r0
    2cb2:	0038      	movs	r0, r7
    2cb4:	4010      	ands	r0, r2
    2cb6:	01c0      	lsls	r0, r0, #7
    2cb8:	3640      	adds	r6, #64	; 0x40
    2cba:	43b1      	bics	r1, r6
    2cbc:	4301      	orrs	r1, r0
    2cbe:	022d      	lsls	r5, r5, #8
    2cc0:	480f      	ldr	r0, [pc, #60]	; (2d00 <system_clock_source_xosc_set_config+0xc8>)
    2cc2:	4001      	ands	r1, r0
    2cc4:	4329      	orrs	r1, r5
    2cc6:	4013      	ands	r3, r2
    2cc8:	02da      	lsls	r2, r3, #11
    2cca:	4b0e      	ldr	r3, [pc, #56]	; (2d04 <system_clock_source_xosc_set_config+0xcc>)
    2ccc:	400b      	ands	r3, r1
    2cce:	4313      	orrs	r3, r2
    2cd0:	0324      	lsls	r4, r4, #12
    2cd2:	051b      	lsls	r3, r3, #20
    2cd4:	0d1b      	lsrs	r3, r3, #20
    2cd6:	4323      	orrs	r3, r4
    2cd8:	4a02      	ldr	r2, [pc, #8]	; (2ce4 <system_clock_source_xosc_set_config+0xac>)
    2cda:	8213      	strh	r3, [r2, #16]
}
    2cdc:	bc04      	pop	{r2}
    2cde:	4690      	mov	r8, r2
    2ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	40000c00 	.word	0x40000c00
    2ce8:	001e8480 	.word	0x001e8480
    2cec:	003d0900 	.word	0x003d0900
    2cf0:	007a1200 	.word	0x007a1200
    2cf4:	00f42400 	.word	0x00f42400
    2cf8:	01e84800 	.word	0x01e84800
    2cfc:	20000310 	.word	0x20000310
    2d00:	fffff8ff 	.word	0xfffff8ff
    2d04:	fffff7ff 	.word	0xfffff7ff

00002d08 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d0a:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    2d0c:	68c6      	ldr	r6, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    2d0e:	7d03      	ldrb	r3, [r0, #20]
    2d10:	2b01      	cmp	r3, #1
    2d12:	d106      	bne.n	2d22 <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    2d14:	8a01      	ldrh	r1, [r0, #16]
    2d16:	3101      	adds	r1, #1
    2d18:	0049      	lsls	r1, r1, #1
    2d1a:	0030      	movs	r0, r6
    2d1c:	4b29      	ldr	r3, [pc, #164]	; (2dc4 <system_clock_source_dpll_set_config+0xbc>)
    2d1e:	4798      	blx	r3
    2d20:	0006      	movs	r6, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2d22:	68a3      	ldr	r3, [r4, #8]
    2d24:	0118      	lsls	r0, r3, #4
    2d26:	0031      	movs	r1, r6
    2d28:	4b26      	ldr	r3, [pc, #152]	; (2dc4 <system_clock_source_dpll_set_config+0xbc>)
    2d2a:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    2d2c:	270f      	movs	r7, #15
    2d2e:	4007      	ands	r7, r0
	tmpldr = (tmpldr >> 4) - 1;
    2d30:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    2d32:	7823      	ldrb	r3, [r4, #0]
    2d34:	01da      	lsls	r2, r3, #7
    2d36:	7863      	ldrb	r3, [r4, #1]
    2d38:	019b      	lsls	r3, r3, #6
    2d3a:	4313      	orrs	r3, r2
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	4a22      	ldr	r2, [pc, #136]	; (2dc8 <system_clock_source_dpll_set_config+0xc0>)
    2d40:	2128      	movs	r1, #40	; 0x28
    2d42:	5453      	strb	r3, [r2, r1]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2d44:	0439      	lsls	r1, r7, #16
    2d46:	1e43      	subs	r3, r0, #1
    2d48:	051b      	lsls	r3, r3, #20
    2d4a:	0d1b      	lsrs	r3, r3, #20
    2d4c:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    2d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    2d50:	0015      	movs	r5, r2
    2d52:	2138      	movs	r1, #56	; 0x38
    2d54:	2204      	movs	r2, #4
    2d56:	5c6b      	ldrb	r3, [r5, r1]
    2d58:	4213      	tst	r3, r2
    2d5a:	d1fc      	bne.n	2d56 <system_clock_source_dpll_set_config+0x4e>
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2d5c:	78a1      	ldrb	r1, [r4, #2]
    2d5e:	0309      	lsls	r1, r1, #12
    2d60:	78e3      	ldrb	r3, [r4, #3]
    2d62:	00db      	lsls	r3, r3, #3
    2d64:	4319      	orrs	r1, r3
    2d66:	7923      	ldrb	r3, [r4, #4]
    2d68:	009b      	lsls	r3, r3, #2
    2d6a:	4319      	orrs	r1, r3
    2d6c:	7ca3      	ldrb	r3, [r4, #18]
    2d6e:	2203      	movs	r2, #3
    2d70:	4694      	mov	ip, r2
    2d72:	4013      	ands	r3, r2
    2d74:	4319      	orrs	r1, r3
    2d76:	8a25      	ldrh	r5, [r4, #16]
    2d78:	042d      	lsls	r5, r5, #16
    2d7a:	4a14      	ldr	r2, [pc, #80]	; (2dcc <system_clock_source_dpll_set_config+0xc4>)
    2d7c:	002b      	movs	r3, r5
    2d7e:	4013      	ands	r3, r2
    2d80:	4319      	orrs	r1, r3
    2d82:	7ce3      	ldrb	r3, [r4, #19]
    2d84:	021b      	lsls	r3, r3, #8
    2d86:	22e0      	movs	r2, #224	; 0xe0
    2d88:	00d2      	lsls	r2, r2, #3
    2d8a:	4013      	ands	r3, r2
    2d8c:	4319      	orrs	r1, r3
    2d8e:	7d22      	ldrb	r2, [r4, #20]
    2d90:	0112      	lsls	r2, r2, #4
    2d92:	2330      	movs	r3, #48	; 0x30
    2d94:	4013      	ands	r3, r2
    2d96:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    2d98:	4a0b      	ldr	r2, [pc, #44]	; (2dc8 <system_clock_source_dpll_set_config+0xc0>)
    2d9a:	6313      	str	r3, [r2, #48]	; 0x30
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    2d9c:	7d63      	ldrb	r3, [r4, #21]
    2d9e:	4661      	mov	r1, ip
    2da0:	400b      	ands	r3, r1
    2da2:	3131      	adds	r1, #49	; 0x31
    2da4:	5453      	strb	r3, [r2, r1]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    2da6:	0015      	movs	r5, r2
    2da8:	3104      	adds	r1, #4
    2daa:	2208      	movs	r2, #8
    2dac:	5c6b      	ldrb	r3, [r5, r1]
    2dae:	4213      	tst	r3, r2
    2db0:	d1fc      	bne.n	2dac <system_clock_source_dpll_set_config+0xa4>
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
    2db2:	0100      	lsls	r0, r0, #4
    2db4:	19c7      	adds	r7, r0, r7
    2db6:	437e      	muls	r6, r7
    2db8:	7d63      	ldrb	r3, [r4, #21]
    2dba:	3304      	adds	r3, #4
    2dbc:	40de      	lsrs	r6, r3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    2dbe:	4b04      	ldr	r3, [pc, #16]	; (2dd0 <system_clock_source_dpll_set_config+0xc8>)
    2dc0:	60de      	str	r6, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
}
    2dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dc4:	00003455 	.word	0x00003455
    2dc8:	40000c00 	.word	0x40000c00
    2dcc:	07ff0000 	.word	0x07ff0000
    2dd0:	20000310 	.word	0x20000310

00002dd4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2dd4:	2808      	cmp	r0, #8
    2dd6:	d803      	bhi.n	2de0 <system_clock_source_enable+0xc>
    2dd8:	0080      	lsls	r0, r0, #2
    2dda:	4b29      	ldr	r3, [pc, #164]	; (2e80 <system_clock_source_enable+0xac>)
    2ddc:	581b      	ldr	r3, [r3, r0]
    2dde:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2de0:	2017      	movs	r0, #23
    2de2:	e04b      	b.n	2e7c <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2de4:	4a27      	ldr	r2, [pc, #156]	; (2e84 <system_clock_source_enable+0xb0>)
    2de6:	7d11      	ldrb	r1, [r2, #20]
    2de8:	2302      	movs	r3, #2
    2dea:	430b      	orrs	r3, r1
    2dec:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2dee:	2000      	movs	r0, #0
    2df0:	e044      	b.n	2e7c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2df2:	4a25      	ldr	r2, [pc, #148]	; (2e88 <system_clock_source_enable+0xb4>)
    2df4:	6991      	ldr	r1, [r2, #24]
    2df6:	2302      	movs	r3, #2
    2df8:	430b      	orrs	r3, r1
    2dfa:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2dfc:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    2dfe:	e03d      	b.n	2e7c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2e00:	4a20      	ldr	r2, [pc, #128]	; (2e84 <system_clock_source_enable+0xb0>)
    2e02:	8a11      	ldrh	r1, [r2, #16]
    2e04:	2302      	movs	r3, #2
    2e06:	430b      	orrs	r3, r1
    2e08:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2e0a:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    2e0c:	e036      	b.n	2e7c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2e0e:	4a1e      	ldr	r2, [pc, #120]	; (2e88 <system_clock_source_enable+0xb4>)
    2e10:	6951      	ldr	r1, [r2, #20]
    2e12:	2302      	movs	r3, #2
    2e14:	430b      	orrs	r3, r1
    2e16:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2e18:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    2e1a:	e02f      	b.n	2e7c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2e1c:	491b      	ldr	r1, [pc, #108]	; (2e8c <system_clock_source_enable+0xb8>)
    2e1e:	680b      	ldr	r3, [r1, #0]
    2e20:	2202      	movs	r2, #2
    2e22:	4313      	orrs	r3, r2
    2e24:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2e26:	4b17      	ldr	r3, [pc, #92]	; (2e84 <system_clock_source_enable+0xb0>)
    2e28:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2e2a:	0019      	movs	r1, r3
    2e2c:	32fe      	adds	r2, #254	; 0xfe
    2e2e:	68cb      	ldr	r3, [r1, #12]
    2e30:	4213      	tst	r3, r2
    2e32:	d0fc      	beq.n	2e2e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e34:	4a15      	ldr	r2, [pc, #84]	; (2e8c <system_clock_source_enable+0xb8>)
    2e36:	6891      	ldr	r1, [r2, #8]
    2e38:	4b12      	ldr	r3, [pc, #72]	; (2e84 <system_clock_source_enable+0xb0>)
    2e3a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e3c:	6852      	ldr	r2, [r2, #4]
    2e3e:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    2e40:	2200      	movs	r2, #0
    2e42:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2e44:	0019      	movs	r1, r3
    2e46:	3201      	adds	r2, #1
    2e48:	32ff      	adds	r2, #255	; 0xff
    2e4a:	68cb      	ldr	r3, [r1, #12]
    2e4c:	4213      	tst	r3, r2
    2e4e:	d0fc      	beq.n	2e4a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e50:	4b0e      	ldr	r3, [pc, #56]	; (2e8c <system_clock_source_enable+0xb8>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	b29b      	uxth	r3, r3
    2e56:	4a0b      	ldr	r2, [pc, #44]	; (2e84 <system_clock_source_enable+0xb0>)
    2e58:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e00e      	b.n	2e7c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2e5e:	4909      	ldr	r1, [pc, #36]	; (2e84 <system_clock_source_enable+0xb0>)
    2e60:	2228      	movs	r2, #40	; 0x28
    2e62:	5c88      	ldrb	r0, [r1, r2]
    2e64:	2302      	movs	r3, #2
    2e66:	4303      	orrs	r3, r0
    2e68:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2e6a:	0008      	movs	r0, r1
    2e6c:	2138      	movs	r1, #56	; 0x38
    2e6e:	3a26      	subs	r2, #38	; 0x26
    2e70:	5c43      	ldrb	r3, [r0, r1]
    2e72:	4213      	tst	r3, r2
    2e74:	d1fc      	bne.n	2e70 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2e76:	2000      	movs	r0, #0
    2e78:	e000      	b.n	2e7c <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2e7a:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    2e7c:	4770      	bx	lr
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	00003848 	.word	0x00003848
    2e84:	40000c00 	.word	0x40000c00
    2e88:	40001000 	.word	0x40001000
    2e8c:	20000310 	.word	0x20000310

00002e90 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e92:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2e94:	2280      	movs	r2, #128	; 0x80
    2e96:	0052      	lsls	r2, r2, #1
    2e98:	4b47      	ldr	r3, [pc, #284]	; (2fb8 <system_clock_init+0x128>)
    2e9a:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2e9c:	3afd      	subs	r2, #253	; 0xfd
    2e9e:	4b47      	ldr	r3, [pc, #284]	; (2fbc <system_clock_init+0x12c>)
    2ea0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2ea2:	4a47      	ldr	r2, [pc, #284]	; (2fc0 <system_clock_init+0x130>)
    2ea4:	6853      	ldr	r3, [r2, #4]
    2ea6:	211e      	movs	r1, #30
    2ea8:	438b      	bics	r3, r1
    2eaa:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	05db      	lsls	r3, r3, #23
    2eb0:	789b      	ldrb	r3, [r3, #2]
    2eb2:	2b02      	cmp	r3, #2
    2eb4:	d00f      	beq.n	2ed6 <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2eb6:	2380      	movs	r3, #128	; 0x80
    2eb8:	05db      	lsls	r3, r3, #23
    2eba:	789b      	ldrb	r3, [r3, #2]
    2ebc:	b25b      	sxtb	r3, r3
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	db09      	blt.n	2ed6 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2ec2:	2380      	movs	r3, #128	; 0x80
    2ec4:	05db      	lsls	r3, r3, #23
    2ec6:	2201      	movs	r2, #1
    2ec8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2eca:	3201      	adds	r2, #1
    2ecc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2ece:	001a      	movs	r2, r3
    2ed0:	7993      	ldrb	r3, [r2, #6]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d0fc      	beq.n	2ed0 <system_clock_init+0x40>
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ed6:	a809      	add	r0, sp, #36	; 0x24
    2ed8:	2400      	movs	r4, #0
    2eda:	7004      	strb	r4, [r0, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
	config->auto_gain_control = true;
    2edc:	2501      	movs	r5, #1
    2ede:	7085      	strb	r5, [r0, #2]
	config->frequency         = 12000000UL;
    2ee0:	4e38      	ldr	r6, [pc, #224]	; (2fc4 <system_clock_init+0x134>)
    2ee2:	6046      	str	r6, [r0, #4]
	config->run_in_standby    = false;
    2ee4:	7204      	strb	r4, [r0, #8]
	config->on_demand         = true;
    2ee6:	7245      	strb	r5, [r0, #9]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    2ee8:	230f      	movs	r3, #15
    2eea:	7043      	strb	r3, [r0, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;

	system_clock_source_xosc_set_config(&xosc_conf);
    2eec:	4b36      	ldr	r3, [pc, #216]	; (2fc8 <system_clock_init+0x138>)
    2eee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    2ef0:	2000      	movs	r0, #0
    2ef2:	4f36      	ldr	r7, [pc, #216]	; (2fcc <system_clock_init+0x13c>)
    2ef4:	47b8      	blx	r7
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    2ef6:	4b30      	ldr	r3, [pc, #192]	; (2fb8 <system_clock_init+0x128>)
    2ef8:	7d1a      	ldrb	r2, [r3, #20]
    2efa:	2180      	movs	r1, #128	; 0x80
    2efc:	4249      	negs	r1, r1
    2efe:	430a      	orrs	r2, r1
    2f00:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    2f02:	7d1a      	ldrb	r2, [r3, #20]
    2f04:	31c0      	adds	r1, #192	; 0xc0
    2f06:	438a      	bics	r2, r1
    2f08:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2f0a:	4b31      	ldr	r3, [pc, #196]	; (2fd0 <system_clock_init+0x140>)
    2f0c:	4798      	blx	r3
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
	config->lock_bypass         = false;
    2f0e:	a803      	add	r0, sp, #12
    2f10:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    2f12:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    2f14:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    2f16:	4b2f      	ldr	r3, [pc, #188]	; (2fd4 <system_clock_init+0x144>)
    2f18:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    2f1a:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    2f1c:	7544      	strb	r4, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    2f1e:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    2f20:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    2f22:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    2f24:	2301      	movs	r3, #1
    2f26:	7043      	strb	r3, [r0, #1]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    2f28:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    2f2a:	60c6      	str	r6, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    2f2c:	4b2a      	ldr	r3, [pc, #168]	; (2fd8 <system_clock_init+0x148>)
    2f2e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    2f30:	2008      	movs	r0, #8
    2f32:	47b8      	blx	r7
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    2f34:	4820      	ldr	r0, [pc, #128]	; (2fb8 <system_clock_init+0x128>)
    2f36:	213c      	movs	r1, #60	; 0x3c
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2f38:	2203      	movs	r2, #3
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    2f3a:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2f3c:	4013      	ands	r3, r2
    2f3e:	2b03      	cmp	r3, #3
    2f40:	d1fb      	bne.n	2f3a <system_clock_init+0xaa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    2f42:	491d      	ldr	r1, [pc, #116]	; (2fb8 <system_clock_init+0x128>)
    2f44:	2228      	movs	r2, #40	; 0x28
    2f46:	5c8b      	ldrb	r3, [r1, r2]
    2f48:	2080      	movs	r0, #128	; 0x80
    2f4a:	4240      	negs	r0, r0
    2f4c:	4303      	orrs	r3, r0
    2f4e:	548b      	strb	r3, [r1, r2]
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2f50:	4c22      	ldr	r4, [pc, #136]	; (2fdc <system_clock_init+0x14c>)
    2f52:	2301      	movs	r3, #1
    2f54:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2f56:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2f58:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f5a:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    2f5c:	2300      	movs	r3, #0
    2f5e:	466a      	mov	r2, sp
    2f60:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2f62:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    2f64:	7253      	strb	r3, [r2, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2f66:	7013      	strb	r3, [r2, #0]
    2f68:	4669      	mov	r1, sp
    2f6a:	2000      	movs	r0, #0
    2f6c:	4b1c      	ldr	r3, [pc, #112]	; (2fe0 <system_clock_init+0x150>)
    2f6e:	4798      	blx	r3
    2f70:	2000      	movs	r0, #0
    2f72:	4b1c      	ldr	r3, [pc, #112]	; (2fe4 <system_clock_init+0x154>)
    2f74:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2f76:	2000      	movs	r0, #0
    2f78:	4b1b      	ldr	r3, [pc, #108]	; (2fe8 <system_clock_init+0x158>)
    2f7a:	4798      	blx	r3
    2f7c:	7921      	ldrb	r1, [r4, #4]
    2f7e:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    2f80:	4b1a      	ldr	r3, [pc, #104]	; (2fec <system_clock_init+0x15c>)
    2f82:	4798      	blx	r3
    2f84:	4b0f      	ldr	r3, [pc, #60]	; (2fc4 <system_clock_init+0x134>)
    2f86:	4298      	cmp	r0, r3
    2f88:	d814      	bhi.n	2fb4 <system_clock_init+0x124>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2f8a:	2380      	movs	r3, #128	; 0x80
    2f8c:	05db      	lsls	r3, r3, #23
    2f8e:	789b      	ldrb	r3, [r3, #2]
    2f90:	2b00      	cmp	r3, #0
    2f92:	d00f      	beq.n	2fb4 <system_clock_init+0x124>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	05db      	lsls	r3, r3, #23
    2f98:	789b      	ldrb	r3, [r3, #2]
    2f9a:	b25b      	sxtb	r3, r3
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	db09      	blt.n	2fb4 <system_clock_init+0x124>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2fa0:	2380      	movs	r3, #128	; 0x80
    2fa2:	05db      	lsls	r3, r3, #23
    2fa4:	2201      	movs	r2, #1
    2fa6:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2fa8:	2200      	movs	r2, #0
    2faa:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2fac:	001a      	movs	r2, r3
    2fae:	7993      	ldrb	r3, [r2, #6]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d0fc      	beq.n	2fae <system_clock_init+0x11e>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    2fb4:	b00d      	add	sp, #52	; 0x34
    2fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb8:	40000c00 	.word	0x40000c00
    2fbc:	40001400 	.word	0x40001400
    2fc0:	41004000 	.word	0x41004000
    2fc4:	00b71b00 	.word	0x00b71b00
    2fc8:	00002c39 	.word	0x00002c39
    2fcc:	00002dd5 	.word	0x00002dd5
    2fd0:	00002ff1 	.word	0x00002ff1
    2fd4:	02dc6c00 	.word	0x02dc6c00
    2fd8:	00002d09 	.word	0x00002d09
    2fdc:	40000400 	.word	0x40000400
    2fe0:	00003015 	.word	0x00003015
    2fe4:	000030c1 	.word	0x000030c1
    2fe8:	00003101 	.word	0x00003101
    2fec:	00003455 	.word	0x00003455

00002ff0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    2ff0:	4a06      	ldr	r2, [pc, #24]	; (300c <system_gclk_init+0x1c>)
    2ff2:	6951      	ldr	r1, [r2, #20]
    2ff4:	2340      	movs	r3, #64	; 0x40
    2ff6:	430b      	orrs	r3, r1
    2ff8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2ffa:	2201      	movs	r2, #1
    2ffc:	4b04      	ldr	r3, [pc, #16]	; (3010 <system_gclk_init+0x20>)
    2ffe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3000:	0019      	movs	r1, r3
    3002:	780b      	ldrb	r3, [r1, #0]
    3004:	4213      	tst	r3, r2
    3006:	d1fc      	bne.n	3002 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3008:	4770      	bx	lr
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	40000400 	.word	0x40000400
    3010:	40001800 	.word	0x40001800

00003014 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3018:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    301a:	784b      	ldrb	r3, [r1, #1]
    301c:	2b00      	cmp	r3, #0
    301e:	d002      	beq.n	3026 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	00db      	lsls	r3, r3, #3
    3024:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3026:	7a4b      	ldrb	r3, [r1, #9]
    3028:	2b00      	cmp	r3, #0
    302a:	d002      	beq.n	3032 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    302c:	2380      	movs	r3, #128	; 0x80
    302e:	011b      	lsls	r3, r3, #4
    3030:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3032:	684a      	ldr	r2, [r1, #4]
    3034:	2a01      	cmp	r2, #1
    3036:	d917      	bls.n	3068 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3038:	1e53      	subs	r3, r2, #1
    303a:	421a      	tst	r2, r3
    303c:	d10f      	bne.n	305e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    303e:	2a02      	cmp	r2, #2
    3040:	d906      	bls.n	3050 <system_gclk_gen_set_config+0x3c>
    3042:	2302      	movs	r3, #2
    3044:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    3046:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3048:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    304a:	429a      	cmp	r2, r3
    304c:	d8fb      	bhi.n	3046 <system_gclk_gen_set_config+0x32>
    304e:	e000      	b.n	3052 <system_gclk_gen_set_config+0x3e>
    3050:	2000      	movs	r0, #0
    3052:	2380      	movs	r3, #128	; 0x80
    3054:	015b      	lsls	r3, r3, #5
    3056:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3058:	0400      	lsls	r0, r0, #16
    305a:	4304      	orrs	r4, r0
    305c:	e004      	b.n	3068 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    305e:	0412      	lsls	r2, r2, #16
    3060:	2380      	movs	r3, #128	; 0x80
    3062:	009b      	lsls	r3, r3, #2
    3064:	431a      	orrs	r2, r3
    3066:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3068:	7a0b      	ldrb	r3, [r1, #8]
    306a:	2b00      	cmp	r3, #0
    306c:	d002      	beq.n	3074 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    306e:	2380      	movs	r3, #128	; 0x80
    3070:	019b      	lsls	r3, r3, #6
    3072:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3074:	2604      	movs	r6, #4
    3076:	40ae      	lsls	r6, r5
    3078:	490d      	ldr	r1, [pc, #52]	; (30b0 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    307a:	4a0e      	ldr	r2, [pc, #56]	; (30b4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    307c:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    307e:	4013      	ands	r3, r2
    3080:	421e      	tst	r6, r3
    3082:	d1fb      	bne.n	307c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3084:	4b0c      	ldr	r3, [pc, #48]	; (30b8 <system_gclk_gen_set_config+0xa4>)
    3086:	4798      	blx	r3
    3088:	00ad      	lsls	r5, r5, #2
    308a:	4b09      	ldr	r3, [pc, #36]	; (30b0 <system_gclk_gen_set_config+0x9c>)
    308c:	469c      	mov	ip, r3
    308e:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3090:	6a28      	ldr	r0, [r5, #32]
    3092:	2380      	movs	r3, #128	; 0x80
    3094:	005b      	lsls	r3, r3, #1
    3096:	4018      	ands	r0, r3
    3098:	4320      	orrs	r0, r4
    309a:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    309c:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    309e:	4a05      	ldr	r2, [pc, #20]	; (30b4 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    30a0:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    30a2:	4013      	ands	r3, r2
    30a4:	421e      	tst	r6, r3
    30a6:	d1fb      	bne.n	30a0 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    30a8:	4b04      	ldr	r3, [pc, #16]	; (30bc <system_gclk_gen_set_config+0xa8>)
    30aa:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    30ac:	bd70      	pop	{r4, r5, r6, pc}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	40001800 	.word	0x40001800
    30b4:	000007fc 	.word	0x000007fc
    30b8:	00002b0d 	.word	0x00002b0d
    30bc:	00002b4d 	.word	0x00002b4d

000030c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    30c0:	b510      	push	{r4, lr}
    30c2:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    30c4:	2204      	movs	r2, #4
    30c6:	4082      	lsls	r2, r0
    30c8:	4809      	ldr	r0, [pc, #36]	; (30f0 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    30ca:	490a      	ldr	r1, [pc, #40]	; (30f4 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    30cc:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    30ce:	400b      	ands	r3, r1
    30d0:	421a      	tst	r2, r3
    30d2:	d1fb      	bne.n	30cc <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    30d4:	4b08      	ldr	r3, [pc, #32]	; (30f8 <system_gclk_gen_enable+0x38>)
    30d6:	4798      	blx	r3
    30d8:	00a4      	lsls	r4, r4, #2
    30da:	4b05      	ldr	r3, [pc, #20]	; (30f0 <system_gclk_gen_enable+0x30>)
    30dc:	469c      	mov	ip, r3
    30de:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    30e0:	6a23      	ldr	r3, [r4, #32]
    30e2:	2280      	movs	r2, #128	; 0x80
    30e4:	0052      	lsls	r2, r2, #1
    30e6:	4313      	orrs	r3, r2
    30e8:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    30ea:	4b04      	ldr	r3, [pc, #16]	; (30fc <system_gclk_gen_enable+0x3c>)
    30ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30ee:	bd10      	pop	{r4, pc}
    30f0:	40001800 	.word	0x40001800
    30f4:	000007fc 	.word	0x000007fc
    30f8:	00002b0d 	.word	0x00002b0d
    30fc:	00002b4d 	.word	0x00002b4d

00003100 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3102:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3104:	2204      	movs	r2, #4
    3106:	4082      	lsls	r2, r0
    3108:	4812      	ldr	r0, [pc, #72]	; (3154 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    310a:	4913      	ldr	r1, [pc, #76]	; (3158 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    310c:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    310e:	400b      	ands	r3, r1
    3110:	421a      	tst	r2, r3
    3112:	d1fb      	bne.n	310c <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3114:	4b11      	ldr	r3, [pc, #68]	; (315c <system_gclk_gen_get_hz+0x5c>)
    3116:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3118:	4f0e      	ldr	r7, [pc, #56]	; (3154 <system_gclk_gen_get_hz+0x54>)
    311a:	3408      	adds	r4, #8
    311c:	00a4      	lsls	r4, r4, #2
    311e:	59e0      	ldr	r0, [r4, r7]
    3120:	0700      	lsls	r0, r0, #28
    3122:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3124:	4b0e      	ldr	r3, [pc, #56]	; (3160 <system_gclk_gen_get_hz+0x60>)
    3126:	4798      	blx	r3
    3128:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    312a:	59e5      	ldr	r5, [r4, r7]
    312c:	04ed      	lsls	r5, r5, #19
    312e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3130:	59e4      	ldr	r4, [r4, r7]
    3132:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3134:	4b0b      	ldr	r3, [pc, #44]	; (3164 <system_gclk_gen_get_hz+0x64>)
    3136:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3138:	2d00      	cmp	r5, #0
    313a:	d107      	bne.n	314c <system_gclk_gen_get_hz+0x4c>
    313c:	2c01      	cmp	r4, #1
    313e:	d907      	bls.n	3150 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3140:	0021      	movs	r1, r4
    3142:	0030      	movs	r0, r6
    3144:	4b08      	ldr	r3, [pc, #32]	; (3168 <system_gclk_gen_get_hz+0x68>)
    3146:	4798      	blx	r3
    3148:	0006      	movs	r6, r0
    314a:	e001      	b.n	3150 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    314c:	3401      	adds	r4, #1
    314e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3150:	0030      	movs	r0, r6
    3152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3154:	40001800 	.word	0x40001800
    3158:	000007fc 	.word	0x000007fc
    315c:	00002b0d 	.word	0x00002b0d
    3160:	00002ba5 	.word	0x00002ba5
    3164:	00002b4d 	.word	0x00002b4d
    3168:	00003455 	.word	0x00003455

0000316c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    316c:	b510      	push	{r4, lr}
    316e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3170:	4b09      	ldr	r3, [pc, #36]	; (3198 <system_gclk_chan_enable+0x2c>)
    3172:	4798      	blx	r3
    3174:	00a0      	lsls	r0, r4, #2
    3176:	4b09      	ldr	r3, [pc, #36]	; (319c <system_gclk_chan_enable+0x30>)
    3178:	469c      	mov	ip, r3
    317a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    317c:	2280      	movs	r2, #128	; 0x80
    317e:	5881      	ldr	r1, [r0, r2]
    3180:	2340      	movs	r3, #64	; 0x40
    3182:	430b      	orrs	r3, r1
    3184:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3186:	2180      	movs	r1, #128	; 0x80
    3188:	3a40      	subs	r2, #64	; 0x40
    318a:	5843      	ldr	r3, [r0, r1]
    318c:	421a      	tst	r2, r3
    318e:	d0fc      	beq.n	318a <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3190:	4b03      	ldr	r3, [pc, #12]	; (31a0 <system_gclk_chan_enable+0x34>)
    3192:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3194:	bd10      	pop	{r4, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	00002b0d 	.word	0x00002b0d
    319c:	40001800 	.word	0x40001800
    31a0:	00002b4d 	.word	0x00002b4d

000031a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    31a4:	b510      	push	{r4, lr}
    31a6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    31a8:	4b09      	ldr	r3, [pc, #36]	; (31d0 <system_gclk_chan_disable+0x2c>)
    31aa:	4798      	blx	r3
    31ac:	00a0      	lsls	r0, r4, #2
    31ae:	4b09      	ldr	r3, [pc, #36]	; (31d4 <system_gclk_chan_disable+0x30>)
    31b0:	469c      	mov	ip, r3
    31b2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    31b4:	2280      	movs	r2, #128	; 0x80
    31b6:	5883      	ldr	r3, [r0, r2]
    31b8:	2140      	movs	r1, #64	; 0x40
    31ba:	438b      	bics	r3, r1
    31bc:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    31be:	3140      	adds	r1, #64	; 0x40
    31c0:	3a40      	subs	r2, #64	; 0x40
    31c2:	5843      	ldr	r3, [r0, r1]
    31c4:	421a      	tst	r2, r3
    31c6:	d1fc      	bne.n	31c2 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    31c8:	4b03      	ldr	r3, [pc, #12]	; (31d8 <system_gclk_chan_disable+0x34>)
    31ca:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    31cc:	bd10      	pop	{r4, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	00002b0d 	.word	0x00002b0d
    31d4:	40001800 	.word	0x40001800
    31d8:	00002b4d 	.word	0x00002b4d

000031dc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    31dc:	b570      	push	{r4, r5, r6, lr}
    31de:	0004      	movs	r4, r0
    31e0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    31e2:	4b05      	ldr	r3, [pc, #20]	; (31f8 <system_gclk_chan_set_config+0x1c>)
    31e4:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    31e6:	782b      	ldrb	r3, [r5, #0]
    31e8:	220f      	movs	r2, #15
    31ea:	4013      	ands	r3, r2
    31ec:	3420      	adds	r4, #32
    31ee:	00a4      	lsls	r4, r4, #2
    31f0:	4a02      	ldr	r2, [pc, #8]	; (31fc <system_gclk_chan_set_config+0x20>)
    31f2:	50a3      	str	r3, [r4, r2]


}
    31f4:	bd70      	pop	{r4, r5, r6, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	000031a5 	.word	0x000031a5
    31fc:	40001800 	.word	0x40001800

00003200 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3200:	b510      	push	{r4, lr}
    3202:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3204:	4b06      	ldr	r3, [pc, #24]	; (3220 <system_gclk_chan_get_hz+0x20>)
    3206:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3208:	3420      	adds	r4, #32
    320a:	00a4      	lsls	r4, r4, #2
    320c:	4b05      	ldr	r3, [pc, #20]	; (3224 <system_gclk_chan_get_hz+0x24>)
    320e:	58e4      	ldr	r4, [r4, r3]
    3210:	0724      	lsls	r4, r4, #28
    3212:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3214:	4b04      	ldr	r3, [pc, #16]	; (3228 <system_gclk_chan_get_hz+0x28>)
    3216:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3218:	0020      	movs	r0, r4
    321a:	4b04      	ldr	r3, [pc, #16]	; (322c <system_gclk_chan_get_hz+0x2c>)
    321c:	4798      	blx	r3
}
    321e:	bd10      	pop	{r4, pc}
    3220:	00002b0d 	.word	0x00002b0d
    3224:	40001800 	.word	0x40001800
    3228:	00002b4d 	.word	0x00002b4d
    322c:	00003101 	.word	0x00003101

00003230 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3230:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3232:	78d3      	ldrb	r3, [r2, #3]
    3234:	2b00      	cmp	r3, #0
    3236:	d11e      	bne.n	3276 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3238:	7813      	ldrb	r3, [r2, #0]
    323a:	2b80      	cmp	r3, #128	; 0x80
    323c:	d004      	beq.n	3248 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    323e:	061b      	lsls	r3, r3, #24
    3240:	2480      	movs	r4, #128	; 0x80
    3242:	0264      	lsls	r4, r4, #9
    3244:	4323      	orrs	r3, r4
    3246:	e000      	b.n	324a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3248:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    324a:	7854      	ldrb	r4, [r2, #1]
    324c:	2502      	movs	r5, #2
    324e:	43ac      	bics	r4, r5
    3250:	d10a      	bne.n	3268 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3252:	7894      	ldrb	r4, [r2, #2]
    3254:	2c00      	cmp	r4, #0
    3256:	d103      	bne.n	3260 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3258:	2480      	movs	r4, #128	; 0x80
    325a:	02a4      	lsls	r4, r4, #10
    325c:	4323      	orrs	r3, r4
    325e:	e002      	b.n	3266 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3260:	24c0      	movs	r4, #192	; 0xc0
    3262:	02e4      	lsls	r4, r4, #11
    3264:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3266:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3268:	7854      	ldrb	r4, [r2, #1]
    326a:	3c01      	subs	r4, #1
    326c:	2c01      	cmp	r4, #1
    326e:	d812      	bhi.n	3296 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3270:	4c18      	ldr	r4, [pc, #96]	; (32d4 <_system_pinmux_config+0xa4>)
    3272:	4023      	ands	r3, r4
    3274:	e00f      	b.n	3296 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3276:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3278:	040b      	lsls	r3, r1, #16
    327a:	0c1b      	lsrs	r3, r3, #16
    327c:	24a0      	movs	r4, #160	; 0xa0
    327e:	05e4      	lsls	r4, r4, #23
    3280:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3282:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3284:	0c0b      	lsrs	r3, r1, #16
    3286:	24d0      	movs	r4, #208	; 0xd0
    3288:	0624      	lsls	r4, r4, #24
    328a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    328c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    328e:	78d3      	ldrb	r3, [r2, #3]
    3290:	2b00      	cmp	r3, #0
    3292:	d018      	beq.n	32c6 <_system_pinmux_config+0x96>
    3294:	e01c      	b.n	32d0 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3296:	040c      	lsls	r4, r1, #16
    3298:	0c24      	lsrs	r4, r4, #16
    329a:	25a0      	movs	r5, #160	; 0xa0
    329c:	05ed      	lsls	r5, r5, #23
    329e:	432c      	orrs	r4, r5
    32a0:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32a2:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    32a4:	0c0c      	lsrs	r4, r1, #16
    32a6:	25d0      	movs	r5, #208	; 0xd0
    32a8:	062d      	lsls	r5, r5, #24
    32aa:	432c      	orrs	r4, r5
    32ac:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32ae:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    32b0:	78d4      	ldrb	r4, [r2, #3]
    32b2:	2c00      	cmp	r4, #0
    32b4:	d10c      	bne.n	32d0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    32b6:	035b      	lsls	r3, r3, #13
    32b8:	d505      	bpl.n	32c6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    32ba:	7893      	ldrb	r3, [r2, #2]
    32bc:	2b01      	cmp	r3, #1
    32be:	d101      	bne.n	32c4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    32c0:	6181      	str	r1, [r0, #24]
    32c2:	e000      	b.n	32c6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    32c4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32c6:	7853      	ldrb	r3, [r2, #1]
    32c8:	3b01      	subs	r3, #1
    32ca:	2b01      	cmp	r3, #1
    32cc:	d800      	bhi.n	32d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    32ce:	6081      	str	r1, [r0, #8]
		}
	}
}
    32d0:	bd30      	pop	{r4, r5, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	fffbffff 	.word	0xfffbffff

000032d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    32d8:	b510      	push	{r4, lr}
    32da:	0003      	movs	r3, r0
    32dc:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    32de:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    32e0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    32e2:	2900      	cmp	r1, #0
    32e4:	d104      	bne.n	32f0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    32e6:	0958      	lsrs	r0, r3, #5
    32e8:	01c0      	lsls	r0, r0, #7
    32ea:	4905      	ldr	r1, [pc, #20]	; (3300 <system_pinmux_pin_set_config+0x28>)
    32ec:	468c      	mov	ip, r1
    32ee:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    32f0:	211f      	movs	r1, #31
    32f2:	400b      	ands	r3, r1
    32f4:	391e      	subs	r1, #30
    32f6:	4099      	lsls	r1, r3
    32f8:	4b02      	ldr	r3, [pc, #8]	; (3304 <system_pinmux_pin_set_config+0x2c>)
    32fa:	4798      	blx	r3
}
    32fc:	bd10      	pop	{r4, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	40002800 	.word	0x40002800
    3304:	00003231 	.word	0x00003231

00003308 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3308:	4770      	bx	lr
    330a:	46c0      	nop			; (mov r8, r8)

0000330c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    330c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    330e:	4b05      	ldr	r3, [pc, #20]	; (3324 <system_init+0x18>)
    3310:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3312:	4b05      	ldr	r3, [pc, #20]	; (3328 <system_init+0x1c>)
    3314:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3316:	4b05      	ldr	r3, [pc, #20]	; (332c <system_init+0x20>)
    3318:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    331a:	4b05      	ldr	r3, [pc, #20]	; (3330 <system_init+0x24>)
    331c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    331e:	4b05      	ldr	r3, [pc, #20]	; (3334 <system_init+0x28>)
    3320:	4798      	blx	r3
}
    3322:	bd10      	pop	{r4, pc}
    3324:	00002e91 	.word	0x00002e91
    3328:	00002b7d 	.word	0x00002b7d
    332c:	00003309 	.word	0x00003309
    3330:	00000e01 	.word	0x00000e01
    3334:	00003309 	.word	0x00003309

00003338 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3338:	e7fe      	b.n	3338 <Dummy_Handler>
    333a:	46c0      	nop			; (mov r8, r8)

0000333c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    333c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    333e:	4b1d      	ldr	r3, [pc, #116]	; (33b4 <Reset_Handler+0x78>)
    3340:	4a1d      	ldr	r2, [pc, #116]	; (33b8 <Reset_Handler+0x7c>)
    3342:	429a      	cmp	r2, r3
    3344:	d003      	beq.n	334e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    3346:	4b1d      	ldr	r3, [pc, #116]	; (33bc <Reset_Handler+0x80>)
    3348:	4a1a      	ldr	r2, [pc, #104]	; (33b4 <Reset_Handler+0x78>)
    334a:	429a      	cmp	r2, r3
    334c:	d304      	bcc.n	3358 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    334e:	4b1c      	ldr	r3, [pc, #112]	; (33c0 <Reset_Handler+0x84>)
    3350:	4a1c      	ldr	r2, [pc, #112]	; (33c4 <Reset_Handler+0x88>)
    3352:	429a      	cmp	r2, r3
    3354:	d310      	bcc.n	3378 <Reset_Handler+0x3c>
    3356:	e01e      	b.n	3396 <Reset_Handler+0x5a>
    3358:	4a1b      	ldr	r2, [pc, #108]	; (33c8 <Reset_Handler+0x8c>)
    335a:	4b18      	ldr	r3, [pc, #96]	; (33bc <Reset_Handler+0x80>)
    335c:	3303      	adds	r3, #3
    335e:	1a9b      	subs	r3, r3, r2
    3360:	089b      	lsrs	r3, r3, #2
    3362:	3301      	adds	r3, #1
    3364:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3366:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3368:	4812      	ldr	r0, [pc, #72]	; (33b4 <Reset_Handler+0x78>)
    336a:	4913      	ldr	r1, [pc, #76]	; (33b8 <Reset_Handler+0x7c>)
    336c:	588c      	ldr	r4, [r1, r2]
    336e:	5084      	str	r4, [r0, r2]
    3370:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3372:	429a      	cmp	r2, r3
    3374:	d1fa      	bne.n	336c <Reset_Handler+0x30>
    3376:	e7ea      	b.n	334e <Reset_Handler+0x12>
    3378:	4a14      	ldr	r2, [pc, #80]	; (33cc <Reset_Handler+0x90>)
    337a:	4b11      	ldr	r3, [pc, #68]	; (33c0 <Reset_Handler+0x84>)
    337c:	3303      	adds	r3, #3
    337e:	1a9b      	subs	r3, r3, r2
    3380:	089b      	lsrs	r3, r3, #2
    3382:	3301      	adds	r3, #1
    3384:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3386:	2200      	movs	r2, #0
                *pDest++ = 0;
    3388:	480e      	ldr	r0, [pc, #56]	; (33c4 <Reset_Handler+0x88>)
    338a:	2100      	movs	r1, #0
    338c:	1814      	adds	r4, r2, r0
    338e:	6021      	str	r1, [r4, #0]
    3390:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3392:	429a      	cmp	r2, r3
    3394:	d1fa      	bne.n	338c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3396:	4a0e      	ldr	r2, [pc, #56]	; (33d0 <Reset_Handler+0x94>)
    3398:	21ff      	movs	r1, #255	; 0xff
    339a:	4b0e      	ldr	r3, [pc, #56]	; (33d4 <Reset_Handler+0x98>)
    339c:	438b      	bics	r3, r1
    339e:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    33a0:	4a0d      	ldr	r2, [pc, #52]	; (33d8 <Reset_Handler+0x9c>)
    33a2:	6851      	ldr	r1, [r2, #4]
    33a4:	2380      	movs	r3, #128	; 0x80
    33a6:	430b      	orrs	r3, r1
    33a8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    33aa:	4b0c      	ldr	r3, [pc, #48]	; (33dc <Reset_Handler+0xa0>)
    33ac:	4798      	blx	r3

        /* Branch to main function */
        main();
    33ae:	4b0c      	ldr	r3, [pc, #48]	; (33e0 <Reset_Handler+0xa4>)
    33b0:	4798      	blx	r3
    33b2:	e7fe      	b.n	33b2 <Reset_Handler+0x76>
    33b4:	20000000 	.word	0x20000000
    33b8:	0000388c 	.word	0x0000388c
    33bc:	200000f8 	.word	0x200000f8
    33c0:	200006f0 	.word	0x200006f0
    33c4:	200000f8 	.word	0x200000f8
    33c8:	20000004 	.word	0x20000004
    33cc:	200000fc 	.word	0x200000fc
    33d0:	e000ed00 	.word	0xe000ed00
    33d4:	00000000 	.word	0x00000000
    33d8:	41004000 	.word	0x41004000
    33dc:	00003781 	.word	0x00003781
    33e0:	00003411 	.word	0x00003411

000033e4 <snowflake_init>:
        }            
	}
}

void snowflake_init()
{
    33e4:	b510      	push	{r4, lr}
    //delay_init();    
    led_init();
    33e6:	4b05      	ldr	r3, [pc, #20]	; (33fc <snowflake_init+0x18>)
    33e8:	4798      	blx	r3
    pb_init();
    33ea:	4b05      	ldr	r3, [pc, #20]	; (3400 <snowflake_init+0x1c>)
    33ec:	4798      	blx	r3
    flash_init();
    33ee:	4b05      	ldr	r3, [pc, #20]	; (3404 <snowflake_init+0x20>)
    33f0:	4798      	blx	r3
    usb_app_init();
    33f2:	4b05      	ldr	r3, [pc, #20]	; (3408 <snowflake_init+0x24>)
    33f4:	4798      	blx	r3
    amp_init();
    33f6:	4b05      	ldr	r3, [pc, #20]	; (340c <snowflake_init+0x28>)
    33f8:	4798      	blx	r3
    33fa:	bd10      	pop	{r4, pc}
    33fc:	00002a3d 	.word	0x00002a3d
    3400:	00002ae5 	.word	0x00002ae5
    3404:	000029f5 	.word	0x000029f5
    3408:	00002989 	.word	0x00002989
    340c:	000029b5 	.word	0x000029b5

00003410 <main>:
#include "usb_app.h"

void snowflake_init(void);

int main(void)
{
    3410:	b510      	push	{r4, lr}
	system_init();      // Generic ASF initializations    
    3412:	4b0a      	ldr	r3, [pc, #40]	; (343c <main+0x2c>)
    3414:	4798      	blx	r3
    snowflake_init();   // Project and board specific initializations
    3416:	4b0a      	ldr	r3, [pc, #40]	; (3440 <main+0x30>)
    3418:	4798      	blx	r3
    
    irq_initialize_vectors();
    cpu_irq_enable();
    341a:	2201      	movs	r2, #1
    341c:	4b09      	ldr	r3, [pc, #36]	; (3444 <main+0x34>)
    341e:	701a      	strb	r2, [r3, #0]
    3420:	f3bf 8f5f 	dmb	sy
    3424:	b662      	cpsie	i
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3426:	327f      	adds	r2, #127	; 0x7f
    3428:	4b07      	ldr	r3, [pc, #28]	; (3448 <main+0x38>)
    342a:	61da      	str	r2, [r3, #28]

	while(1) 
    {  
        //delay_ms(1000);
        port_pin_toggle_output_level(LED_R1_PIN);
        udi_cdc_putc('A');
    342c:	2041      	movs	r0, #65	; 0x41
    342e:	4b07      	ldr	r3, [pc, #28]	; (344c <main+0x3c>)
    3430:	4798      	blx	r3
    3432:	4a07      	ldr	r2, [pc, #28]	; (3450 <main+0x40>)
    3434:	2380      	movs	r3, #128	; 0x80
    3436:	009b      	lsls	r3, r3, #2
    3438:	61d3      	str	r3, [r2, #28]
    343a:	e7fd      	b.n	3438 <main+0x28>
    343c:	0000330d 	.word	0x0000330d
    3440:	000033e5 	.word	0x000033e5
    3444:	200000f4 	.word	0x200000f4
    3448:	40002800 	.word	0x40002800
    344c:	00000701 	.word	0x00000701
    3450:	40002880 	.word	0x40002880

00003454 <__aeabi_uidiv>:
    3454:	2200      	movs	r2, #0
    3456:	0843      	lsrs	r3, r0, #1
    3458:	428b      	cmp	r3, r1
    345a:	d374      	bcc.n	3546 <__aeabi_uidiv+0xf2>
    345c:	0903      	lsrs	r3, r0, #4
    345e:	428b      	cmp	r3, r1
    3460:	d35f      	bcc.n	3522 <__aeabi_uidiv+0xce>
    3462:	0a03      	lsrs	r3, r0, #8
    3464:	428b      	cmp	r3, r1
    3466:	d344      	bcc.n	34f2 <__aeabi_uidiv+0x9e>
    3468:	0b03      	lsrs	r3, r0, #12
    346a:	428b      	cmp	r3, r1
    346c:	d328      	bcc.n	34c0 <__aeabi_uidiv+0x6c>
    346e:	0c03      	lsrs	r3, r0, #16
    3470:	428b      	cmp	r3, r1
    3472:	d30d      	bcc.n	3490 <__aeabi_uidiv+0x3c>
    3474:	22ff      	movs	r2, #255	; 0xff
    3476:	0209      	lsls	r1, r1, #8
    3478:	ba12      	rev	r2, r2
    347a:	0c03      	lsrs	r3, r0, #16
    347c:	428b      	cmp	r3, r1
    347e:	d302      	bcc.n	3486 <__aeabi_uidiv+0x32>
    3480:	1212      	asrs	r2, r2, #8
    3482:	0209      	lsls	r1, r1, #8
    3484:	d065      	beq.n	3552 <__aeabi_uidiv+0xfe>
    3486:	0b03      	lsrs	r3, r0, #12
    3488:	428b      	cmp	r3, r1
    348a:	d319      	bcc.n	34c0 <__aeabi_uidiv+0x6c>
    348c:	e000      	b.n	3490 <__aeabi_uidiv+0x3c>
    348e:	0a09      	lsrs	r1, r1, #8
    3490:	0bc3      	lsrs	r3, r0, #15
    3492:	428b      	cmp	r3, r1
    3494:	d301      	bcc.n	349a <__aeabi_uidiv+0x46>
    3496:	03cb      	lsls	r3, r1, #15
    3498:	1ac0      	subs	r0, r0, r3
    349a:	4152      	adcs	r2, r2
    349c:	0b83      	lsrs	r3, r0, #14
    349e:	428b      	cmp	r3, r1
    34a0:	d301      	bcc.n	34a6 <__aeabi_uidiv+0x52>
    34a2:	038b      	lsls	r3, r1, #14
    34a4:	1ac0      	subs	r0, r0, r3
    34a6:	4152      	adcs	r2, r2
    34a8:	0b43      	lsrs	r3, r0, #13
    34aa:	428b      	cmp	r3, r1
    34ac:	d301      	bcc.n	34b2 <__aeabi_uidiv+0x5e>
    34ae:	034b      	lsls	r3, r1, #13
    34b0:	1ac0      	subs	r0, r0, r3
    34b2:	4152      	adcs	r2, r2
    34b4:	0b03      	lsrs	r3, r0, #12
    34b6:	428b      	cmp	r3, r1
    34b8:	d301      	bcc.n	34be <__aeabi_uidiv+0x6a>
    34ba:	030b      	lsls	r3, r1, #12
    34bc:	1ac0      	subs	r0, r0, r3
    34be:	4152      	adcs	r2, r2
    34c0:	0ac3      	lsrs	r3, r0, #11
    34c2:	428b      	cmp	r3, r1
    34c4:	d301      	bcc.n	34ca <__aeabi_uidiv+0x76>
    34c6:	02cb      	lsls	r3, r1, #11
    34c8:	1ac0      	subs	r0, r0, r3
    34ca:	4152      	adcs	r2, r2
    34cc:	0a83      	lsrs	r3, r0, #10
    34ce:	428b      	cmp	r3, r1
    34d0:	d301      	bcc.n	34d6 <__aeabi_uidiv+0x82>
    34d2:	028b      	lsls	r3, r1, #10
    34d4:	1ac0      	subs	r0, r0, r3
    34d6:	4152      	adcs	r2, r2
    34d8:	0a43      	lsrs	r3, r0, #9
    34da:	428b      	cmp	r3, r1
    34dc:	d301      	bcc.n	34e2 <__aeabi_uidiv+0x8e>
    34de:	024b      	lsls	r3, r1, #9
    34e0:	1ac0      	subs	r0, r0, r3
    34e2:	4152      	adcs	r2, r2
    34e4:	0a03      	lsrs	r3, r0, #8
    34e6:	428b      	cmp	r3, r1
    34e8:	d301      	bcc.n	34ee <__aeabi_uidiv+0x9a>
    34ea:	020b      	lsls	r3, r1, #8
    34ec:	1ac0      	subs	r0, r0, r3
    34ee:	4152      	adcs	r2, r2
    34f0:	d2cd      	bcs.n	348e <__aeabi_uidiv+0x3a>
    34f2:	09c3      	lsrs	r3, r0, #7
    34f4:	428b      	cmp	r3, r1
    34f6:	d301      	bcc.n	34fc <__aeabi_uidiv+0xa8>
    34f8:	01cb      	lsls	r3, r1, #7
    34fa:	1ac0      	subs	r0, r0, r3
    34fc:	4152      	adcs	r2, r2
    34fe:	0983      	lsrs	r3, r0, #6
    3500:	428b      	cmp	r3, r1
    3502:	d301      	bcc.n	3508 <__aeabi_uidiv+0xb4>
    3504:	018b      	lsls	r3, r1, #6
    3506:	1ac0      	subs	r0, r0, r3
    3508:	4152      	adcs	r2, r2
    350a:	0943      	lsrs	r3, r0, #5
    350c:	428b      	cmp	r3, r1
    350e:	d301      	bcc.n	3514 <__aeabi_uidiv+0xc0>
    3510:	014b      	lsls	r3, r1, #5
    3512:	1ac0      	subs	r0, r0, r3
    3514:	4152      	adcs	r2, r2
    3516:	0903      	lsrs	r3, r0, #4
    3518:	428b      	cmp	r3, r1
    351a:	d301      	bcc.n	3520 <__aeabi_uidiv+0xcc>
    351c:	010b      	lsls	r3, r1, #4
    351e:	1ac0      	subs	r0, r0, r3
    3520:	4152      	adcs	r2, r2
    3522:	08c3      	lsrs	r3, r0, #3
    3524:	428b      	cmp	r3, r1
    3526:	d301      	bcc.n	352c <__aeabi_uidiv+0xd8>
    3528:	00cb      	lsls	r3, r1, #3
    352a:	1ac0      	subs	r0, r0, r3
    352c:	4152      	adcs	r2, r2
    352e:	0883      	lsrs	r3, r0, #2
    3530:	428b      	cmp	r3, r1
    3532:	d301      	bcc.n	3538 <__aeabi_uidiv+0xe4>
    3534:	008b      	lsls	r3, r1, #2
    3536:	1ac0      	subs	r0, r0, r3
    3538:	4152      	adcs	r2, r2
    353a:	0843      	lsrs	r3, r0, #1
    353c:	428b      	cmp	r3, r1
    353e:	d301      	bcc.n	3544 <__aeabi_uidiv+0xf0>
    3540:	004b      	lsls	r3, r1, #1
    3542:	1ac0      	subs	r0, r0, r3
    3544:	4152      	adcs	r2, r2
    3546:	1a41      	subs	r1, r0, r1
    3548:	d200      	bcs.n	354c <__aeabi_uidiv+0xf8>
    354a:	4601      	mov	r1, r0
    354c:	4152      	adcs	r2, r2
    354e:	4610      	mov	r0, r2
    3550:	4770      	bx	lr
    3552:	e7ff      	b.n	3554 <__aeabi_uidiv+0x100>
    3554:	b501      	push	{r0, lr}
    3556:	2000      	movs	r0, #0
    3558:	f000 f8f0 	bl	373c <__aeabi_idiv0>
    355c:	bd02      	pop	{r1, pc}
    355e:	46c0      	nop			; (mov r8, r8)

00003560 <__aeabi_uidivmod>:
    3560:	2900      	cmp	r1, #0
    3562:	d0f7      	beq.n	3554 <__aeabi_uidiv+0x100>
    3564:	e776      	b.n	3454 <__aeabi_uidiv>
    3566:	4770      	bx	lr

00003568 <__aeabi_idiv>:
    3568:	4603      	mov	r3, r0
    356a:	430b      	orrs	r3, r1
    356c:	d47f      	bmi.n	366e <__aeabi_idiv+0x106>
    356e:	2200      	movs	r2, #0
    3570:	0843      	lsrs	r3, r0, #1
    3572:	428b      	cmp	r3, r1
    3574:	d374      	bcc.n	3660 <__aeabi_idiv+0xf8>
    3576:	0903      	lsrs	r3, r0, #4
    3578:	428b      	cmp	r3, r1
    357a:	d35f      	bcc.n	363c <__aeabi_idiv+0xd4>
    357c:	0a03      	lsrs	r3, r0, #8
    357e:	428b      	cmp	r3, r1
    3580:	d344      	bcc.n	360c <__aeabi_idiv+0xa4>
    3582:	0b03      	lsrs	r3, r0, #12
    3584:	428b      	cmp	r3, r1
    3586:	d328      	bcc.n	35da <__aeabi_idiv+0x72>
    3588:	0c03      	lsrs	r3, r0, #16
    358a:	428b      	cmp	r3, r1
    358c:	d30d      	bcc.n	35aa <__aeabi_idiv+0x42>
    358e:	22ff      	movs	r2, #255	; 0xff
    3590:	0209      	lsls	r1, r1, #8
    3592:	ba12      	rev	r2, r2
    3594:	0c03      	lsrs	r3, r0, #16
    3596:	428b      	cmp	r3, r1
    3598:	d302      	bcc.n	35a0 <__aeabi_idiv+0x38>
    359a:	1212      	asrs	r2, r2, #8
    359c:	0209      	lsls	r1, r1, #8
    359e:	d065      	beq.n	366c <__aeabi_idiv+0x104>
    35a0:	0b03      	lsrs	r3, r0, #12
    35a2:	428b      	cmp	r3, r1
    35a4:	d319      	bcc.n	35da <__aeabi_idiv+0x72>
    35a6:	e000      	b.n	35aa <__aeabi_idiv+0x42>
    35a8:	0a09      	lsrs	r1, r1, #8
    35aa:	0bc3      	lsrs	r3, r0, #15
    35ac:	428b      	cmp	r3, r1
    35ae:	d301      	bcc.n	35b4 <__aeabi_idiv+0x4c>
    35b0:	03cb      	lsls	r3, r1, #15
    35b2:	1ac0      	subs	r0, r0, r3
    35b4:	4152      	adcs	r2, r2
    35b6:	0b83      	lsrs	r3, r0, #14
    35b8:	428b      	cmp	r3, r1
    35ba:	d301      	bcc.n	35c0 <__aeabi_idiv+0x58>
    35bc:	038b      	lsls	r3, r1, #14
    35be:	1ac0      	subs	r0, r0, r3
    35c0:	4152      	adcs	r2, r2
    35c2:	0b43      	lsrs	r3, r0, #13
    35c4:	428b      	cmp	r3, r1
    35c6:	d301      	bcc.n	35cc <__aeabi_idiv+0x64>
    35c8:	034b      	lsls	r3, r1, #13
    35ca:	1ac0      	subs	r0, r0, r3
    35cc:	4152      	adcs	r2, r2
    35ce:	0b03      	lsrs	r3, r0, #12
    35d0:	428b      	cmp	r3, r1
    35d2:	d301      	bcc.n	35d8 <__aeabi_idiv+0x70>
    35d4:	030b      	lsls	r3, r1, #12
    35d6:	1ac0      	subs	r0, r0, r3
    35d8:	4152      	adcs	r2, r2
    35da:	0ac3      	lsrs	r3, r0, #11
    35dc:	428b      	cmp	r3, r1
    35de:	d301      	bcc.n	35e4 <__aeabi_idiv+0x7c>
    35e0:	02cb      	lsls	r3, r1, #11
    35e2:	1ac0      	subs	r0, r0, r3
    35e4:	4152      	adcs	r2, r2
    35e6:	0a83      	lsrs	r3, r0, #10
    35e8:	428b      	cmp	r3, r1
    35ea:	d301      	bcc.n	35f0 <__aeabi_idiv+0x88>
    35ec:	028b      	lsls	r3, r1, #10
    35ee:	1ac0      	subs	r0, r0, r3
    35f0:	4152      	adcs	r2, r2
    35f2:	0a43      	lsrs	r3, r0, #9
    35f4:	428b      	cmp	r3, r1
    35f6:	d301      	bcc.n	35fc <__aeabi_idiv+0x94>
    35f8:	024b      	lsls	r3, r1, #9
    35fa:	1ac0      	subs	r0, r0, r3
    35fc:	4152      	adcs	r2, r2
    35fe:	0a03      	lsrs	r3, r0, #8
    3600:	428b      	cmp	r3, r1
    3602:	d301      	bcc.n	3608 <__aeabi_idiv+0xa0>
    3604:	020b      	lsls	r3, r1, #8
    3606:	1ac0      	subs	r0, r0, r3
    3608:	4152      	adcs	r2, r2
    360a:	d2cd      	bcs.n	35a8 <__aeabi_idiv+0x40>
    360c:	09c3      	lsrs	r3, r0, #7
    360e:	428b      	cmp	r3, r1
    3610:	d301      	bcc.n	3616 <__aeabi_idiv+0xae>
    3612:	01cb      	lsls	r3, r1, #7
    3614:	1ac0      	subs	r0, r0, r3
    3616:	4152      	adcs	r2, r2
    3618:	0983      	lsrs	r3, r0, #6
    361a:	428b      	cmp	r3, r1
    361c:	d301      	bcc.n	3622 <__aeabi_idiv+0xba>
    361e:	018b      	lsls	r3, r1, #6
    3620:	1ac0      	subs	r0, r0, r3
    3622:	4152      	adcs	r2, r2
    3624:	0943      	lsrs	r3, r0, #5
    3626:	428b      	cmp	r3, r1
    3628:	d301      	bcc.n	362e <__aeabi_idiv+0xc6>
    362a:	014b      	lsls	r3, r1, #5
    362c:	1ac0      	subs	r0, r0, r3
    362e:	4152      	adcs	r2, r2
    3630:	0903      	lsrs	r3, r0, #4
    3632:	428b      	cmp	r3, r1
    3634:	d301      	bcc.n	363a <__aeabi_idiv+0xd2>
    3636:	010b      	lsls	r3, r1, #4
    3638:	1ac0      	subs	r0, r0, r3
    363a:	4152      	adcs	r2, r2
    363c:	08c3      	lsrs	r3, r0, #3
    363e:	428b      	cmp	r3, r1
    3640:	d301      	bcc.n	3646 <__aeabi_idiv+0xde>
    3642:	00cb      	lsls	r3, r1, #3
    3644:	1ac0      	subs	r0, r0, r3
    3646:	4152      	adcs	r2, r2
    3648:	0883      	lsrs	r3, r0, #2
    364a:	428b      	cmp	r3, r1
    364c:	d301      	bcc.n	3652 <__aeabi_idiv+0xea>
    364e:	008b      	lsls	r3, r1, #2
    3650:	1ac0      	subs	r0, r0, r3
    3652:	4152      	adcs	r2, r2
    3654:	0843      	lsrs	r3, r0, #1
    3656:	428b      	cmp	r3, r1
    3658:	d301      	bcc.n	365e <__aeabi_idiv+0xf6>
    365a:	004b      	lsls	r3, r1, #1
    365c:	1ac0      	subs	r0, r0, r3
    365e:	4152      	adcs	r2, r2
    3660:	1a41      	subs	r1, r0, r1
    3662:	d200      	bcs.n	3666 <__aeabi_idiv+0xfe>
    3664:	4601      	mov	r1, r0
    3666:	4152      	adcs	r2, r2
    3668:	4610      	mov	r0, r2
    366a:	4770      	bx	lr
    366c:	e05d      	b.n	372a <__aeabi_idiv+0x1c2>
    366e:	0fca      	lsrs	r2, r1, #31
    3670:	d000      	beq.n	3674 <__aeabi_idiv+0x10c>
    3672:	4249      	negs	r1, r1
    3674:	1003      	asrs	r3, r0, #32
    3676:	d300      	bcc.n	367a <__aeabi_idiv+0x112>
    3678:	4240      	negs	r0, r0
    367a:	4053      	eors	r3, r2
    367c:	2200      	movs	r2, #0
    367e:	469c      	mov	ip, r3
    3680:	0903      	lsrs	r3, r0, #4
    3682:	428b      	cmp	r3, r1
    3684:	d32d      	bcc.n	36e2 <__aeabi_idiv+0x17a>
    3686:	0a03      	lsrs	r3, r0, #8
    3688:	428b      	cmp	r3, r1
    368a:	d312      	bcc.n	36b2 <__aeabi_idiv+0x14a>
    368c:	22fc      	movs	r2, #252	; 0xfc
    368e:	0189      	lsls	r1, r1, #6
    3690:	ba12      	rev	r2, r2
    3692:	0a03      	lsrs	r3, r0, #8
    3694:	428b      	cmp	r3, r1
    3696:	d30c      	bcc.n	36b2 <__aeabi_idiv+0x14a>
    3698:	0189      	lsls	r1, r1, #6
    369a:	1192      	asrs	r2, r2, #6
    369c:	428b      	cmp	r3, r1
    369e:	d308      	bcc.n	36b2 <__aeabi_idiv+0x14a>
    36a0:	0189      	lsls	r1, r1, #6
    36a2:	1192      	asrs	r2, r2, #6
    36a4:	428b      	cmp	r3, r1
    36a6:	d304      	bcc.n	36b2 <__aeabi_idiv+0x14a>
    36a8:	0189      	lsls	r1, r1, #6
    36aa:	d03a      	beq.n	3722 <__aeabi_idiv+0x1ba>
    36ac:	1192      	asrs	r2, r2, #6
    36ae:	e000      	b.n	36b2 <__aeabi_idiv+0x14a>
    36b0:	0989      	lsrs	r1, r1, #6
    36b2:	09c3      	lsrs	r3, r0, #7
    36b4:	428b      	cmp	r3, r1
    36b6:	d301      	bcc.n	36bc <__aeabi_idiv+0x154>
    36b8:	01cb      	lsls	r3, r1, #7
    36ba:	1ac0      	subs	r0, r0, r3
    36bc:	4152      	adcs	r2, r2
    36be:	0983      	lsrs	r3, r0, #6
    36c0:	428b      	cmp	r3, r1
    36c2:	d301      	bcc.n	36c8 <__aeabi_idiv+0x160>
    36c4:	018b      	lsls	r3, r1, #6
    36c6:	1ac0      	subs	r0, r0, r3
    36c8:	4152      	adcs	r2, r2
    36ca:	0943      	lsrs	r3, r0, #5
    36cc:	428b      	cmp	r3, r1
    36ce:	d301      	bcc.n	36d4 <__aeabi_idiv+0x16c>
    36d0:	014b      	lsls	r3, r1, #5
    36d2:	1ac0      	subs	r0, r0, r3
    36d4:	4152      	adcs	r2, r2
    36d6:	0903      	lsrs	r3, r0, #4
    36d8:	428b      	cmp	r3, r1
    36da:	d301      	bcc.n	36e0 <__aeabi_idiv+0x178>
    36dc:	010b      	lsls	r3, r1, #4
    36de:	1ac0      	subs	r0, r0, r3
    36e0:	4152      	adcs	r2, r2
    36e2:	08c3      	lsrs	r3, r0, #3
    36e4:	428b      	cmp	r3, r1
    36e6:	d301      	bcc.n	36ec <__aeabi_idiv+0x184>
    36e8:	00cb      	lsls	r3, r1, #3
    36ea:	1ac0      	subs	r0, r0, r3
    36ec:	4152      	adcs	r2, r2
    36ee:	0883      	lsrs	r3, r0, #2
    36f0:	428b      	cmp	r3, r1
    36f2:	d301      	bcc.n	36f8 <__aeabi_idiv+0x190>
    36f4:	008b      	lsls	r3, r1, #2
    36f6:	1ac0      	subs	r0, r0, r3
    36f8:	4152      	adcs	r2, r2
    36fa:	d2d9      	bcs.n	36b0 <__aeabi_idiv+0x148>
    36fc:	0843      	lsrs	r3, r0, #1
    36fe:	428b      	cmp	r3, r1
    3700:	d301      	bcc.n	3706 <__aeabi_idiv+0x19e>
    3702:	004b      	lsls	r3, r1, #1
    3704:	1ac0      	subs	r0, r0, r3
    3706:	4152      	adcs	r2, r2
    3708:	1a41      	subs	r1, r0, r1
    370a:	d200      	bcs.n	370e <__aeabi_idiv+0x1a6>
    370c:	4601      	mov	r1, r0
    370e:	4663      	mov	r3, ip
    3710:	4152      	adcs	r2, r2
    3712:	105b      	asrs	r3, r3, #1
    3714:	4610      	mov	r0, r2
    3716:	d301      	bcc.n	371c <__aeabi_idiv+0x1b4>
    3718:	4240      	negs	r0, r0
    371a:	2b00      	cmp	r3, #0
    371c:	d500      	bpl.n	3720 <__aeabi_idiv+0x1b8>
    371e:	4249      	negs	r1, r1
    3720:	4770      	bx	lr
    3722:	4663      	mov	r3, ip
    3724:	105b      	asrs	r3, r3, #1
    3726:	d300      	bcc.n	372a <__aeabi_idiv+0x1c2>
    3728:	4240      	negs	r0, r0
    372a:	b501      	push	{r0, lr}
    372c:	2000      	movs	r0, #0
    372e:	f000 f805 	bl	373c <__aeabi_idiv0>
    3732:	bd02      	pop	{r1, pc}

00003734 <__aeabi_idivmod>:
    3734:	2900      	cmp	r1, #0
    3736:	d0f8      	beq.n	372a <__aeabi_idiv+0x1c2>
    3738:	e716      	b.n	3568 <__aeabi_idiv>
    373a:	4770      	bx	lr

0000373c <__aeabi_idiv0>:
    373c:	4770      	bx	lr
    373e:	46c0      	nop			; (mov r8, r8)

00003740 <__ctzsi2>:
    3740:	4241      	negs	r1, r0
    3742:	4008      	ands	r0, r1
    3744:	211c      	movs	r1, #28
    3746:	2301      	movs	r3, #1
    3748:	041b      	lsls	r3, r3, #16
    374a:	4298      	cmp	r0, r3
    374c:	d301      	bcc.n	3752 <__ctzsi2+0x12>
    374e:	0c00      	lsrs	r0, r0, #16
    3750:	3910      	subs	r1, #16
    3752:	0a1b      	lsrs	r3, r3, #8
    3754:	4298      	cmp	r0, r3
    3756:	d301      	bcc.n	375c <__ctzsi2+0x1c>
    3758:	0a00      	lsrs	r0, r0, #8
    375a:	3908      	subs	r1, #8
    375c:	091b      	lsrs	r3, r3, #4
    375e:	4298      	cmp	r0, r3
    3760:	d301      	bcc.n	3766 <__ctzsi2+0x26>
    3762:	0900      	lsrs	r0, r0, #4
    3764:	3904      	subs	r1, #4
    3766:	a202      	add	r2, pc, #8	; (adr r2, 3770 <__ctzsi2+0x30>)
    3768:	5c10      	ldrb	r0, [r2, r0]
    376a:	1a40      	subs	r0, r0, r1
    376c:	4770      	bx	lr
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	1d1d1c1b 	.word	0x1d1d1c1b
    3774:	1e1e1e1e 	.word	0x1e1e1e1e
    3778:	1f1f1f1f 	.word	0x1f1f1f1f
    377c:	1f1f1f1f 	.word	0x1f1f1f1f

00003780 <__libc_init_array>:
    3780:	4b0e      	ldr	r3, [pc, #56]	; (37bc <__libc_init_array+0x3c>)
    3782:	b570      	push	{r4, r5, r6, lr}
    3784:	2500      	movs	r5, #0
    3786:	001e      	movs	r6, r3
    3788:	4c0d      	ldr	r4, [pc, #52]	; (37c0 <__libc_init_array+0x40>)
    378a:	1ae4      	subs	r4, r4, r3
    378c:	10a4      	asrs	r4, r4, #2
    378e:	42a5      	cmp	r5, r4
    3790:	d004      	beq.n	379c <__libc_init_array+0x1c>
    3792:	00ab      	lsls	r3, r5, #2
    3794:	58f3      	ldr	r3, [r6, r3]
    3796:	4798      	blx	r3
    3798:	3501      	adds	r5, #1
    379a:	e7f8      	b.n	378e <__libc_init_array+0xe>
    379c:	f000 f866 	bl	386c <_init>
    37a0:	4b08      	ldr	r3, [pc, #32]	; (37c4 <__libc_init_array+0x44>)
    37a2:	2500      	movs	r5, #0
    37a4:	001e      	movs	r6, r3
    37a6:	4c08      	ldr	r4, [pc, #32]	; (37c8 <__libc_init_array+0x48>)
    37a8:	1ae4      	subs	r4, r4, r3
    37aa:	10a4      	asrs	r4, r4, #2
    37ac:	42a5      	cmp	r5, r4
    37ae:	d004      	beq.n	37ba <__libc_init_array+0x3a>
    37b0:	00ab      	lsls	r3, r5, #2
    37b2:	58f3      	ldr	r3, [r6, r3]
    37b4:	4798      	blx	r3
    37b6:	3501      	adds	r5, #1
    37b8:	e7f8      	b.n	37ac <__libc_init_array+0x2c>
    37ba:	bd70      	pop	{r4, r5, r6, pc}
    37bc:	00003878 	.word	0x00003878
    37c0:	00003878 	.word	0x00003878
    37c4:	00003878 	.word	0x00003878
    37c8:	0000387c 	.word	0x0000387c

000037cc <memcpy>:
    37cc:	2300      	movs	r3, #0
    37ce:	b510      	push	{r4, lr}
    37d0:	429a      	cmp	r2, r3
    37d2:	d003      	beq.n	37dc <memcpy+0x10>
    37d4:	5ccc      	ldrb	r4, [r1, r3]
    37d6:	54c4      	strb	r4, [r0, r3]
    37d8:	3301      	adds	r3, #1
    37da:	e7f9      	b.n	37d0 <memcpy+0x4>
    37dc:	bd10      	pop	{r4, pc}

000037de <memset>:
    37de:	0003      	movs	r3, r0
    37e0:	1882      	adds	r2, r0, r2
    37e2:	4293      	cmp	r3, r2
    37e4:	d002      	beq.n	37ec <memset+0xe>
    37e6:	7019      	strb	r1, [r3, #0]
    37e8:	3301      	adds	r3, #1
    37ea:	e7fa      	b.n	37e2 <memset+0x4>
    37ec:	4770      	bx	lr
    37ee:	0000      	movs	r0, r0
    37f0:	2e2e3231 	.word	0x2e2e3231
    37f4:	0046452e 	.word	0x0046452e
    37f8:	01010100 	.word	0x01010100
    37fc:	00001dd4 	.word	0x00001dd4
    3800:	00001de2 	.word	0x00001de2
    3804:	00001e82 	.word	0x00001e82
    3808:	00001eea 	.word	0x00001eea
    380c:	00001f4e 	.word	0x00001f4e

00003810 <_usb_device_irq_bits>:
    3810:	00080004 00800070 01000001 00000200     ....p...........

00003820 <_usb_endpoint_irq_bits>:
    3820:	60100c03 00002bb6 00002bb2 00002bb2     ...`.+...+...+..
    3830:	00002c14 00002c14 00002bcc 00002bbc     .,...,...+...+..
    3840:	00002bd2 00002c02 00002e00 00002de0     .+...,.......-..
    3850:	00002de0 00002e7a 00002df2 00002e0e     .-..z....-......
    3860:	00002de4 00002e1c 00002e5e              .-......^...

0000386c <_init>:
    386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3872:	bc08      	pop	{r3}
    3874:	469e      	mov	lr, r3
    3876:	4770      	bx	lr

00003878 <__init_array_start>:
    3878:	000000dd 	.word	0x000000dd

0000387c <_fini>:
    387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3882:	bc08      	pop	{r3}
    3884:	469e      	mov	lr, r3
    3886:	4770      	bx	lr

00003888 <__fini_array_start>:
    3888:	000000b5 	.word	0x000000b5
