
Snowflake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00000388  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  3 .bss          00000020  20000430  000007b8  00020430  2**2
                  ALLOC
  4 .stack        00002000  20000450  000007d8  00020430  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000b9f  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002c0  00000000  00000000  00021050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00021310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000070  00000000  00000000  00021350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001408f  00000000  00000000  00021400  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000015d0  00000000  00000000  0003548f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007e4e9  00000000  00000000  00036a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000001a0  00000000  00000000  000b4f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002450 	.word	0x20002450
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000115 	.word	0x00000115
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
  94:	00000115 	.word	0x00000115
  98:	00000115 	.word	0x00000115
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000430 	.word	0x20000430
  d4:	00000000 	.word	0x00000000
  d8:	00000388 	.word	0x00000388

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000434 	.word	0x20000434
 108:	00000388 	.word	0x00000388
 10c:	00000388 	.word	0x00000388
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b1d      	ldr	r3, [pc, #116]	; (190 <Reset_Handler+0x78>)
 11c:	4a1d      	ldr	r2, [pc, #116]	; (194 <Reset_Handler+0x7c>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b1d      	ldr	r3, [pc, #116]	; (198 <Reset_Handler+0x80>)
 124:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x78>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b1c      	ldr	r3, [pc, #112]	; (19c <Reset_Handler+0x84>)
 12c:	4a1c      	ldr	r2, [pc, #112]	; (1a0 <Reset_Handler+0x88>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a1b      	ldr	r2, [pc, #108]	; (1a4 <Reset_Handler+0x8c>)
 136:	4b18      	ldr	r3, [pc, #96]	; (198 <Reset_Handler+0x80>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4812      	ldr	r0, [pc, #72]	; (190 <Reset_Handler+0x78>)
 146:	4913      	ldr	r1, [pc, #76]	; (194 <Reset_Handler+0x7c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a14      	ldr	r2, [pc, #80]	; (1a8 <Reset_Handler+0x90>)
 156:	4b11      	ldr	r3, [pc, #68]	; (19c <Reset_Handler+0x84>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	480e      	ldr	r0, [pc, #56]	; (1a0 <Reset_Handler+0x88>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a0e      	ldr	r2, [pc, #56]	; (1ac <Reset_Handler+0x94>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b0e      	ldr	r3, [pc, #56]	; (1b0 <Reset_Handler+0x98>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 17c:	4a0d      	ldr	r2, [pc, #52]	; (1b4 <Reset_Handler+0x9c>)
 17e:	6851      	ldr	r1, [r2, #4]
 180:	2380      	movs	r3, #128	; 0x80
 182:	430b      	orrs	r3, r1
 184:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 186:	4b0c      	ldr	r3, [pc, #48]	; (1b8 <Reset_Handler+0xa0>)
 188:	4798      	blx	r3

        /* Branch to main function */
        main();
 18a:	4b0c      	ldr	r3, [pc, #48]	; (1bc <Reset_Handler+0xa4>)
 18c:	4798      	blx	r3
 18e:	e7fe      	b.n	18e <Reset_Handler+0x76>
 190:	20000000 	.word	0x20000000
 194:	00000388 	.word	0x00000388
 198:	20000430 	.word	0x20000430
 19c:	20000450 	.word	0x20000450
 1a0:	20000430 	.word	0x20000430
 1a4:	20000004 	.word	0x20000004
 1a8:	20000434 	.word	0x20000434
 1ac:	e000ed00 	.word	0xe000ed00
 1b0:	00000000 	.word	0x00000000
 1b4:	41004000 	.word	0x41004000
 1b8:	000001e5 	.word	0x000001e5
 1bc:	000001d1 	.word	0x000001d1

000001c0 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 1c0:	4a01      	ldr	r2, [pc, #4]	; (1c8 <SystemInit+0x8>)
 1c2:	4b02      	ldr	r3, [pc, #8]	; (1cc <SystemInit+0xc>)
 1c4:	601a      	str	r2, [r3, #0]
         * DAC Requirements
         *  TBD
         *********************************************************************/
        
            
}
 1c6:	4770      	bx	lr
 1c8:	003d0900 	.word	0x003d0900
 1cc:	20000000 	.word	0x20000000

000001d0 <main>:
    
volatile top_state_t top_state = IDLE;
    

int main(void)
{
 1d0:	b510      	push	{r4, lr}
    /* Initialize the system */
    SystemInit();
 1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <main+0xc>)
 1d4:	4798      	blx	r3

    /* Application Loop */
    while (1) 
    {
        // Top level state machine
        switch(top_state)
 1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <main+0x10>)
 1d8:	781a      	ldrb	r2, [r3, #0]
 1da:	e7fd      	b.n	1d8 <main+0x8>
 1dc:	000001c1 	.word	0x000001c1
 1e0:	2000044c 	.word	0x2000044c

000001e4 <__libc_init_array>:
 1e4:	b570      	push	{r4, r5, r6, lr}
 1e6:	4e0d      	ldr	r6, [pc, #52]	; (21c <__libc_init_array+0x38>)
 1e8:	4d0d      	ldr	r5, [pc, #52]	; (220 <__libc_init_array+0x3c>)
 1ea:	2400      	movs	r4, #0
 1ec:	1bad      	subs	r5, r5, r6
 1ee:	10ad      	asrs	r5, r5, #2
 1f0:	d005      	beq.n	1fe <__libc_init_array+0x1a>
 1f2:	00a3      	lsls	r3, r4, #2
 1f4:	58f3      	ldr	r3, [r6, r3]
 1f6:	3401      	adds	r4, #1
 1f8:	4798      	blx	r3
 1fa:	42a5      	cmp	r5, r4
 1fc:	d1f9      	bne.n	1f2 <__libc_init_array+0xe>
 1fe:	f000 f8b1 	bl	364 <_init>
 202:	4e08      	ldr	r6, [pc, #32]	; (224 <__libc_init_array+0x40>)
 204:	4d08      	ldr	r5, [pc, #32]	; (228 <__libc_init_array+0x44>)
 206:	2400      	movs	r4, #0
 208:	1bad      	subs	r5, r5, r6
 20a:	10ad      	asrs	r5, r5, #2
 20c:	d005      	beq.n	21a <__libc_init_array+0x36>
 20e:	00a3      	lsls	r3, r4, #2
 210:	58f3      	ldr	r3, [r6, r3]
 212:	3401      	adds	r4, #1
 214:	4798      	blx	r3
 216:	42a5      	cmp	r5, r4
 218:	d1f9      	bne.n	20e <__libc_init_array+0x2a>
 21a:	bd70      	pop	{r4, r5, r6, pc}
 21c:	00000370 	.word	0x00000370
 220:	00000370 	.word	0x00000370
 224:	00000370 	.word	0x00000370
 228:	00000378 	.word	0x00000378

0000022c <register_fini>:
 22c:	4b03      	ldr	r3, [pc, #12]	; (23c <register_fini+0x10>)
 22e:	b510      	push	{r4, lr}
 230:	2b00      	cmp	r3, #0
 232:	d002      	beq.n	23a <register_fini+0xe>
 234:	4802      	ldr	r0, [pc, #8]	; (240 <register_fini+0x14>)
 236:	f000 f805 	bl	244 <atexit>
 23a:	bd10      	pop	{r4, pc}
 23c:	00000000 	.word	0x00000000
 240:	00000255 	.word	0x00000255

00000244 <atexit>:
 244:	b510      	push	{r4, lr}
 246:	0001      	movs	r1, r0
 248:	2300      	movs	r3, #0
 24a:	2200      	movs	r2, #0
 24c:	2000      	movs	r0, #0
 24e:	f000 f81b 	bl	288 <__register_exitproc>
 252:	bd10      	pop	{r4, pc}

00000254 <__libc_fini_array>:
 254:	b570      	push	{r4, r5, r6, lr}
 256:	4b09      	ldr	r3, [pc, #36]	; (27c <__libc_fini_array+0x28>)
 258:	4c09      	ldr	r4, [pc, #36]	; (280 <__libc_fini_array+0x2c>)
 25a:	1ae4      	subs	r4, r4, r3
 25c:	10a4      	asrs	r4, r4, #2
 25e:	d009      	beq.n	274 <__libc_fini_array+0x20>
 260:	4a08      	ldr	r2, [pc, #32]	; (284 <__libc_fini_array+0x30>)
 262:	18a5      	adds	r5, r4, r2
 264:	00ad      	lsls	r5, r5, #2
 266:	18ed      	adds	r5, r5, r3
 268:	682b      	ldr	r3, [r5, #0]
 26a:	3c01      	subs	r4, #1
 26c:	4798      	blx	r3
 26e:	3d04      	subs	r5, #4
 270:	2c00      	cmp	r4, #0
 272:	d1f9      	bne.n	268 <__libc_fini_array+0x14>
 274:	f000 f880 	bl	378 <_fini>
 278:	bd70      	pop	{r4, r5, r6, pc}
 27a:	46c0      	nop			; (mov r8, r8)
 27c:	00000384 	.word	0x00000384
 280:	00000388 	.word	0x00000388
 284:	3fffffff 	.word	0x3fffffff

00000288 <__register_exitproc>:
 288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 28a:	4644      	mov	r4, r8
 28c:	465f      	mov	r7, fp
 28e:	4656      	mov	r6, sl
 290:	464d      	mov	r5, r9
 292:	469b      	mov	fp, r3
 294:	4b2f      	ldr	r3, [pc, #188]	; (354 <__register_exitproc+0xcc>)
 296:	b4f0      	push	{r4, r5, r6, r7}
 298:	681c      	ldr	r4, [r3, #0]
 29a:	23a4      	movs	r3, #164	; 0xa4
 29c:	005b      	lsls	r3, r3, #1
 29e:	0005      	movs	r5, r0
 2a0:	58e0      	ldr	r0, [r4, r3]
 2a2:	000e      	movs	r6, r1
 2a4:	4690      	mov	r8, r2
 2a6:	2800      	cmp	r0, #0
 2a8:	d04b      	beq.n	342 <__register_exitproc+0xba>
 2aa:	6843      	ldr	r3, [r0, #4]
 2ac:	2b1f      	cmp	r3, #31
 2ae:	dc0d      	bgt.n	2cc <__register_exitproc+0x44>
 2b0:	1c5c      	adds	r4, r3, #1
 2b2:	2d00      	cmp	r5, #0
 2b4:	d121      	bne.n	2fa <__register_exitproc+0x72>
 2b6:	3302      	adds	r3, #2
 2b8:	009b      	lsls	r3, r3, #2
 2ba:	6044      	str	r4, [r0, #4]
 2bc:	501e      	str	r6, [r3, r0]
 2be:	2000      	movs	r0, #0
 2c0:	bc3c      	pop	{r2, r3, r4, r5}
 2c2:	4690      	mov	r8, r2
 2c4:	4699      	mov	r9, r3
 2c6:	46a2      	mov	sl, r4
 2c8:	46ab      	mov	fp, r5
 2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 2cc:	4b22      	ldr	r3, [pc, #136]	; (358 <__register_exitproc+0xd0>)
 2ce:	2b00      	cmp	r3, #0
 2d0:	d03c      	beq.n	34c <__register_exitproc+0xc4>
 2d2:	20c8      	movs	r0, #200	; 0xc8
 2d4:	0040      	lsls	r0, r0, #1
 2d6:	e000      	b.n	2da <__register_exitproc+0x52>
 2d8:	bf00      	nop
 2da:	2800      	cmp	r0, #0
 2dc:	d036      	beq.n	34c <__register_exitproc+0xc4>
 2de:	22a4      	movs	r2, #164	; 0xa4
 2e0:	2300      	movs	r3, #0
 2e2:	0052      	lsls	r2, r2, #1
 2e4:	58a1      	ldr	r1, [r4, r2]
 2e6:	6043      	str	r3, [r0, #4]
 2e8:	6001      	str	r1, [r0, #0]
 2ea:	50a0      	str	r0, [r4, r2]
 2ec:	3240      	adds	r2, #64	; 0x40
 2ee:	5083      	str	r3, [r0, r2]
 2f0:	3204      	adds	r2, #4
 2f2:	5083      	str	r3, [r0, r2]
 2f4:	2401      	movs	r4, #1
 2f6:	2d00      	cmp	r5, #0
 2f8:	d0dd      	beq.n	2b6 <__register_exitproc+0x2e>
 2fa:	009a      	lsls	r2, r3, #2
 2fc:	4691      	mov	r9, r2
 2fe:	4481      	add	r9, r0
 300:	4642      	mov	r2, r8
 302:	2188      	movs	r1, #136	; 0x88
 304:	464f      	mov	r7, r9
 306:	507a      	str	r2, [r7, r1]
 308:	22c4      	movs	r2, #196	; 0xc4
 30a:	0052      	lsls	r2, r2, #1
 30c:	4690      	mov	r8, r2
 30e:	4480      	add	r8, r0
 310:	4642      	mov	r2, r8
 312:	3987      	subs	r1, #135	; 0x87
 314:	4099      	lsls	r1, r3
 316:	6812      	ldr	r2, [r2, #0]
 318:	468a      	mov	sl, r1
 31a:	430a      	orrs	r2, r1
 31c:	4694      	mov	ip, r2
 31e:	4642      	mov	r2, r8
 320:	4661      	mov	r1, ip
 322:	6011      	str	r1, [r2, #0]
 324:	2284      	movs	r2, #132	; 0x84
 326:	4649      	mov	r1, r9
 328:	465f      	mov	r7, fp
 32a:	0052      	lsls	r2, r2, #1
 32c:	508f      	str	r7, [r1, r2]
 32e:	2d02      	cmp	r5, #2
 330:	d1c1      	bne.n	2b6 <__register_exitproc+0x2e>
 332:	0002      	movs	r2, r0
 334:	4655      	mov	r5, sl
 336:	328d      	adds	r2, #141	; 0x8d
 338:	32ff      	adds	r2, #255	; 0xff
 33a:	6811      	ldr	r1, [r2, #0]
 33c:	430d      	orrs	r5, r1
 33e:	6015      	str	r5, [r2, #0]
 340:	e7b9      	b.n	2b6 <__register_exitproc+0x2e>
 342:	0020      	movs	r0, r4
 344:	304d      	adds	r0, #77	; 0x4d
 346:	30ff      	adds	r0, #255	; 0xff
 348:	50e0      	str	r0, [r4, r3]
 34a:	e7ae      	b.n	2aa <__register_exitproc+0x22>
 34c:	2001      	movs	r0, #1
 34e:	4240      	negs	r0, r0
 350:	e7b6      	b.n	2c0 <__register_exitproc+0x38>
 352:	46c0      	nop			; (mov r8, r8)
 354:	00000360 	.word	0x00000360
 358:	00000000 	.word	0x00000000
 35c:	00000043 	.word	0x00000043

00000360 <_global_impure_ptr>:
 360:	20000008                                ... 

00000364 <_init>:
 364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 366:	46c0      	nop			; (mov r8, r8)
 368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 36a:	bc08      	pop	{r3}
 36c:	469e      	mov	lr, r3
 36e:	4770      	bx	lr

00000370 <__init_array_start>:
 370:	0000022d 	.word	0x0000022d

00000374 <__frame_dummy_init_array_entry>:
 374:	000000dd                                ....

00000378 <_fini>:
 378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 37e:	bc08      	pop	{r3}
 380:	469e      	mov	lr, r3
 382:	4770      	bx	lr

00000384 <__fini_array_start>:
 384:	000000b5 	.word	0x000000b5
