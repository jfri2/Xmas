
USB_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f28  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000200  30000000  30000000  00030000  2**4
                  ALLOC
  3 .bss          00000714  20000068  00002f90  00020068  2**2
                  ALLOC
  4 .stack        00002004  2000077c  000036a4  00020068  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001588d  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e92  00000000  00000000  00035976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009149  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000758  00000000  00000000  00041951  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009f8  00000000  00000000  000420a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001dc79  00000000  00000000  00042aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000106cf  00000000  00000000  0006071a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00092b23  00000000  00000000  00070de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001194  00000000  00000000  0010390c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002780 	.word	0x20002780
       4:	0000012d 	.word	0x0000012d
       8:	00000129 	.word	0x00000129
       c:	00000129 	.word	0x00000129
	...
      2c:	00000129 	.word	0x00000129
	...
      38:	00000129 	.word	0x00000129
      3c:	00000129 	.word	0x00000129
      40:	00000129 	.word	0x00000129
      44:	00000129 	.word	0x00000129
      48:	00000129 	.word	0x00000129
      4c:	00000129 	.word	0x00000129
      50:	00000129 	.word	0x00000129
      54:	00000281 	.word	0x00000281
      58:	000002a1 	.word	0x000002a1
      5c:	00000129 	.word	0x00000129
      60:	00000129 	.word	0x00000129
      64:	00000129 	.word	0x00000129
      68:	00000129 	.word	0x00000129
      6c:	00000129 	.word	0x00000129
      70:	00000129 	.word	0x00000129
      74:	00000129 	.word	0x00000129
      78:	00000129 	.word	0x00000129
      7c:	00000129 	.word	0x00000129
      80:	00000129 	.word	0x00000129
      84:	00000129 	.word	0x00000129
      88:	00000129 	.word	0x00000129
      8c:	00000129 	.word	0x00000129
      90:	00000129 	.word	0x00000129
      94:	00000129 	.word	0x00000129
      98:	00000129 	.word	0x00000129
      9c:	00000129 	.word	0x00000129
      a0:	00000129 	.word	0x00000129
      a4:	00000129 	.word	0x00000129
      a8:	00000129 	.word	0x00000129
      ac:	00000129 	.word	0x00000129
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002f28 	.word	0x00002f28

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002f28 	.word	0x00002f28
     10c:	00002f28 	.word	0x00002f28
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002c1 	.word	0x000002c1
     124:	00002cf9 	.word	0x00002cf9

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
     12a:	46c0      	nop			; (mov r8, r8)

0000012c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     12c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     12e:	4b1d      	ldr	r3, [pc, #116]	; (1a4 <Reset_Handler+0x78>)
     130:	4a1d      	ldr	r2, [pc, #116]	; (1a8 <Reset_Handler+0x7c>)
     132:	429a      	cmp	r2, r3
     134:	d003      	beq.n	13e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     136:	4b1d      	ldr	r3, [pc, #116]	; (1ac <Reset_Handler+0x80>)
     138:	4a1a      	ldr	r2, [pc, #104]	; (1a4 <Reset_Handler+0x78>)
     13a:	429a      	cmp	r2, r3
     13c:	d304      	bcc.n	148 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4b1c      	ldr	r3, [pc, #112]	; (1b0 <Reset_Handler+0x84>)
     140:	4a1c      	ldr	r2, [pc, #112]	; (1b4 <Reset_Handler+0x88>)
     142:	429a      	cmp	r2, r3
     144:	d310      	bcc.n	168 <Reset_Handler+0x3c>
     146:	e01e      	b.n	186 <Reset_Handler+0x5a>
     148:	4a1b      	ldr	r2, [pc, #108]	; (1b8 <Reset_Handler+0x8c>)
     14a:	4b18      	ldr	r3, [pc, #96]	; (1ac <Reset_Handler+0x80>)
     14c:	3303      	adds	r3, #3
     14e:	1a9b      	subs	r3, r3, r2
     150:	089b      	lsrs	r3, r3, #2
     152:	3301      	adds	r3, #1
     154:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     156:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     158:	4812      	ldr	r0, [pc, #72]	; (1a4 <Reset_Handler+0x78>)
     15a:	4913      	ldr	r1, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	588c      	ldr	r4, [r1, r2]
     15e:	5084      	str	r4, [r0, r2]
     160:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     162:	429a      	cmp	r2, r3
     164:	d1fa      	bne.n	15c <Reset_Handler+0x30>
     166:	e7ea      	b.n	13e <Reset_Handler+0x12>
     168:	4a14      	ldr	r2, [pc, #80]	; (1bc <Reset_Handler+0x90>)
     16a:	4b11      	ldr	r3, [pc, #68]	; (1b0 <Reset_Handler+0x84>)
     16c:	3303      	adds	r3, #3
     16e:	1a9b      	subs	r3, r3, r2
     170:	089b      	lsrs	r3, r3, #2
     172:	3301      	adds	r3, #1
     174:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     176:	2200      	movs	r2, #0
                *pDest++ = 0;
     178:	480e      	ldr	r0, [pc, #56]	; (1b4 <Reset_Handler+0x88>)
     17a:	2100      	movs	r1, #0
     17c:	1814      	adds	r4, r2, r0
     17e:	6021      	str	r1, [r4, #0]
     180:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     182:	429a      	cmp	r2, r3
     184:	d1fa      	bne.n	17c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     186:	4a0e      	ldr	r2, [pc, #56]	; (1c0 <Reset_Handler+0x94>)
     188:	21ff      	movs	r1, #255	; 0xff
     18a:	4b0e      	ldr	r3, [pc, #56]	; (1c4 <Reset_Handler+0x98>)
     18c:	438b      	bics	r3, r1
     18e:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     190:	4a0d      	ldr	r2, [pc, #52]	; (1c8 <Reset_Handler+0x9c>)
     192:	6851      	ldr	r1, [r2, #4]
     194:	2380      	movs	r3, #128	; 0x80
     196:	430b      	orrs	r3, r1
     198:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     19a:	4b0c      	ldr	r3, [pc, #48]	; (1cc <Reset_Handler+0xa0>)
     19c:	4798      	blx	r3

        /* Branch to main function */
        main();
     19e:	4b0c      	ldr	r3, [pc, #48]	; (1d0 <Reset_Handler+0xa4>)
     1a0:	4798      	blx	r3
     1a2:	e7fe      	b.n	1a2 <Reset_Handler+0x76>
     1a4:	20000000 	.word	0x20000000
     1a8:	00002f28 	.word	0x00002f28
     1ac:	20000068 	.word	0x20000068
     1b0:	2000077c 	.word	0x2000077c
     1b4:	20000068 	.word	0x20000068
     1b8:	20000004 	.word	0x20000004
     1bc:	2000006c 	.word	0x2000006c
     1c0:	e000ed00 	.word	0xe000ed00
     1c4:	00000000 	.word	0x00000000
     1c8:	41004000 	.word	0x41004000
     1cc:	00002d05 	.word	0x00002d05
     1d0:	00002c25 	.word	0x00002c25

000001d4 <TARGET_USB_PORT_init>:

extern struct _irq_descriptor *_irq_table[PERIPH_COUNT_IRQn];
extern void                    Default_Handler(void);

void TARGET_USB_PORT_init(void)
{
     1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     1d6:	2480      	movs	r4, #128	; 0x80
     1d8:	0464      	lsls	r4, r4, #17
     1da:	2202      	movs	r2, #2
     1dc:	0021      	movs	r1, r4
     1de:	2000      	movs	r0, #0
     1e0:	4f10      	ldr	r7, [pc, #64]	; (224 <TARGET_USB_PORT_init+0x50>)
     1e2:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     1e4:	2200      	movs	r2, #0
     1e6:	0021      	movs	r1, r4
     1e8:	2000      	movs	r0, #0
     1ea:	4e0f      	ldr	r6, [pc, #60]	; (228 <TARGET_USB_PORT_init+0x54>)
     1ec:	47b0      	blx	r6
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     1ee:	2200      	movs	r2, #0
     1f0:	2118      	movs	r1, #24
     1f2:	2000      	movs	r0, #0
     1f4:	4d0d      	ldr	r5, [pc, #52]	; (22c <TARGET_USB_PORT_init+0x58>)
     1f6:	47a8      	blx	r5
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     1f8:	490d      	ldr	r1, [pc, #52]	; (230 <TARGET_USB_PORT_init+0x5c>)
     1fa:	2018      	movs	r0, #24
     1fc:	4c0d      	ldr	r4, [pc, #52]	; (234 <TARGET_USB_PORT_init+0x60>)
     1fe:	47a0      	blx	r4
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     200:	2202      	movs	r2, #2
     202:	2180      	movs	r1, #128	; 0x80
     204:	0489      	lsls	r1, r1, #18
     206:	2000      	movs	r0, #0
     208:	47b8      	blx	r7
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     20a:	2200      	movs	r2, #0
     20c:	2180      	movs	r1, #128	; 0x80
     20e:	0489      	lsls	r1, r1, #18
     210:	2000      	movs	r0, #0
     212:	47b0      	blx	r6
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     214:	2200      	movs	r2, #0
     216:	2119      	movs	r1, #25
     218:	2000      	movs	r0, #0
     21a:	47a8      	blx	r5
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     21c:	4906      	ldr	r1, [pc, #24]	; (238 <TARGET_USB_PORT_init+0x64>)
     21e:	2019      	movs	r0, #25
     220:	47a0      	blx	r4
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(USB_DP, PINMUX_PA25G_USB_DP);
}
     222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     224:	00000c29 	.word	0x00000c29
     228:	00000ccd 	.word	0x00000ccd
     22c:	00000ced 	.word	0x00000ced
     230:	00180006 	.word	0x00180006
     234:	00000d69 	.word	0x00000d69
     238:	00190006 	.word	0x00190006

0000023c <TARGET_USB_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     23c:	2141      	movs	r1, #65	; 0x41
     23e:	2390      	movs	r3, #144	; 0x90
     240:	4a06      	ldr	r2, [pc, #24]	; (25c <TARGET_USB_CLOCK_init+0x20>)
     242:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <TARGET_USB_CLOCK_init+0x24>)
     246:	691a      	ldr	r2, [r3, #16]
     248:	2180      	movs	r1, #128	; 0x80
     24a:	0149      	lsls	r1, r1, #5
     24c:	430a      	orrs	r2, r1
     24e:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     250:	6999      	ldr	r1, [r3, #24]
     252:	2201      	movs	r2, #1
     254:	430a      	orrs	r2, r1
     256:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	40001800 	.word	0x40001800
     260:	40000400 	.word	0x40000400

00000264 <TARGET_USB_init>:

void TARGET_USB_init(void)
{
     264:	b510      	push	{r4, lr}
	TARGET_USB_CLOCK_init();
     266:	4b03      	ldr	r3, [pc, #12]	; (274 <TARGET_USB_init+0x10>)
     268:	4798      	blx	r3
	usb_d_init();
     26a:	4b03      	ldr	r3, [pc, #12]	; (278 <TARGET_USB_init+0x14>)
     26c:	4798      	blx	r3
	TARGET_USB_PORT_init();
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <TARGET_USB_init+0x18>)
     270:	4798      	blx	r3
}
     272:	bd10      	pop	{r4, pc}
     274:	0000023d 	.word	0x0000023d
     278:	00000559 	.word	0x00000559
     27c:	000001d5 	.word	0x000001d5

00000280 <DMAC_Handler>:

void DMAC_Handler(void)
{
     280:	b510      	push	{r4, lr}
	if (_irq_table[DMAC_IRQn + 0]) {
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <DMAC_Handler+0x18>)
     284:	695b      	ldr	r3, [r3, #20]
     286:	2b00      	cmp	r3, #0
     288:	d003      	beq.n	292 <DMAC_Handler+0x12>
		_irq_table[DMAC_IRQn + 0]->handler(_irq_table[DMAC_IRQn + 0]->parameter);
     28a:	6858      	ldr	r0, [r3, #4]
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	4798      	blx	r3
     290:	e001      	b.n	296 <DMAC_Handler+0x16>
	} else {
		Default_Handler();
     292:	4b02      	ldr	r3, [pc, #8]	; (29c <DMAC_Handler+0x1c>)
     294:	4798      	blx	r3
	}
}
     296:	bd10      	pop	{r4, pc}
     298:	20000708 	.word	0x20000708
     29c:	000009a5 	.word	0x000009a5

000002a0 <USB_Handler>:
		Default_Handler();
	}
}

void USB_Handler(void)
{
     2a0:	b510      	push	{r4, lr}
	if (_irq_table[USB_IRQn + 0]) {
     2a2:	4b05      	ldr	r3, [pc, #20]	; (2b8 <USB_Handler+0x18>)
     2a4:	699b      	ldr	r3, [r3, #24]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d003      	beq.n	2b2 <USB_Handler+0x12>
		_irq_table[USB_IRQn + 0]->handler(_irq_table[USB_IRQn + 0]->parameter);
     2aa:	6858      	ldr	r0, [r3, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	4798      	blx	r3
     2b0:	e001      	b.n	2b6 <USB_Handler+0x16>
	} else {
		Default_Handler();
     2b2:	4b02      	ldr	r3, [pc, #8]	; (2bc <USB_Handler+0x1c>)
     2b4:	4798      	blx	r3
	}
}
     2b6:	bd10      	pop	{r4, pc}
     2b8:	20000708 	.word	0x20000708
     2bc:	000009a5 	.word	0x000009a5

000002c0 <system_init>:

void system_init(void)
{
     2c0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2c2:	4b02      	ldr	r3, [pc, #8]	; (2cc <system_init+0xc>)
     2c4:	4798      	blx	r3
	init_mcu();

	TARGET_USB_init();
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <system_init+0x10>)
     2c8:	4798      	blx	r3
}
     2ca:	bd10      	pop	{r4, pc}
     2cc:	000009a9 	.word	0x000009a9
     2d0:	00000265 	.word	0x00000265

000002d4 <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2d8:	6003      	str	r3, [r0, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     2da:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2dc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)

000002e4 <atomic_leave_critical>:
     2e4:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     2e8:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     2ea:	f383 8810 	msr	PRIMASK, r3
}
     2ee:	4770      	bx	lr

000002f0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     2f0:	b530      	push	{r4, r5, lr}
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2f2:	4b0f      	ldr	r3, [pc, #60]	; (330 <_usb_d_find_ep+0x40>)
     2f4:	7859      	ldrb	r1, [r3, #1]
     2f6:	4288      	cmp	r0, r1
     2f8:	d014      	beq.n	324 <_usb_d_find_ep+0x34>
     2fa:	001a      	movs	r2, r3
     2fc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     2fe:	250f      	movs	r5, #15
     300:	4005      	ands	r5, r0
     302:	e003      	b.n	30c <_usb_d_find_ep+0x1c>
     304:	3220      	adds	r2, #32
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     306:	7851      	ldrb	r1, [r2, #1]
     308:	4281      	cmp	r1, r0
     30a:	d00d      	beq.n	328 <_usb_d_find_ep+0x38>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     30c:	7814      	ldrb	r4, [r2, #0]
     30e:	2c00      	cmp	r4, #0
     310:	d101      	bne.n	316 <_usb_d_find_ep+0x26>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     312:	428d      	cmp	r5, r1
     314:	d00a      	beq.n	32c <_usb_d_find_ep+0x3c>
     316:	3301      	adds	r3, #1
     318:	b25b      	sxtb	r3, r3
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     31a:	2b0d      	cmp	r3, #13
     31c:	d1f2      	bne.n	304 <_usb_d_find_ep+0x14>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
			return i;
		}
	}
	return -1;
     31e:	2001      	movs	r0, #1
     320:	4240      	negs	r0, r0
     322:	e004      	b.n	32e <_usb_d_find_ep+0x3e>
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     324:	2000      	movs	r0, #0
     326:	e002      	b.n	32e <_usb_d_find_ep+0x3e>
     328:	0018      	movs	r0, r3
     32a:	e000      	b.n	32e <_usb_d_find_ep+0x3e>
     32c:	0018      	movs	r0, r3
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
			return i;
		}
	}
	return -1;
}
     32e:	bd30      	pop	{r4, r5, pc}
     330:	20000084 	.word	0x20000084

00000334 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     334:	2000      	movs	r0, #0
     336:	4770      	bx	lr

00000338 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	0004      	movs	r4, r0
     33c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     33e:	4b09      	ldr	r3, [pc, #36]	; (364 <usb_d_cb_trans_more+0x2c>)
     340:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     342:	0143      	lsls	r3, r0, #5
     344:	4a08      	ldr	r2, [pc, #32]	; (368 <usb_d_cb_trans_more+0x30>)
     346:	18d3      	adds	r3, r2, r3
     348:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     34a:	2300      	movs	r3, #0
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     34c:	2a03      	cmp	r2, #3
     34e:	d107      	bne.n	360 <usb_d_cb_trans_more+0x28>
		return ept->callbacks.more(ep, transfered);
     350:	0140      	lsls	r0, r0, #5
     352:	4b05      	ldr	r3, [pc, #20]	; (368 <usb_d_cb_trans_more+0x30>)
     354:	1818      	adds	r0, r3, r0
     356:	6983      	ldr	r3, [r0, #24]
     358:	0029      	movs	r1, r5
     35a:	0020      	movs	r0, r4
     35c:	4798      	blx	r3
     35e:	0003      	movs	r3, r0
	}
	return false;
}
     360:	0018      	movs	r0, r3
     362:	bd70      	pop	{r4, r5, r6, pc}
     364:	000002f1 	.word	0x000002f1
     368:	20000084 	.word	0x20000084

0000036c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     36c:	b5f0      	push	{r4, r5, r6, r7, lr}
     36e:	b085      	sub	sp, #20
     370:	0005      	movs	r5, r0
     372:	000f      	movs	r7, r1
     374:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     376:	4b50      	ldr	r3, [pc, #320]	; (4b8 <_usb_d_cb_trans_done+0x14c>)
     378:	4798      	blx	r3
     37a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     37c:	2f00      	cmp	r7, #0
     37e:	d157      	bne.n	430 <_usb_d_cb_trans_done+0xc4>
		ept->xfer.hdr.status = USB_XFER_DONE;
     380:	4b4e      	ldr	r3, [pc, #312]	; (4bc <_usb_d_cb_trans_done+0x150>)
     382:	0142      	lsls	r2, r0, #5
     384:	1899      	adds	r1, r3, r2
     386:	2000      	movs	r0, #0
     388:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     38a:	5cd3      	ldrb	r3, [r2, r3]
     38c:	2b00      	cmp	r3, #0
     38e:	d149      	bne.n	424 <_usb_d_cb_trans_done+0xb8>
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
	uint8_t state   = ept->xfer.hdr.state;
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;

	if (state == USB_EP_S_X_DATA) {
     390:	788b      	ldrb	r3, [r1, #2]
     392:	2b03      	cmp	r3, #3
     394:	d13a      	bne.n	40c <_usb_d_cb_trans_done+0xa0>
     396:	7b0d      	ldrb	r5, [r1, #12]
     398:	307f      	adds	r0, #127	; 0x7f
     39a:	4385      	bics	r5, r0
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     39c:	000b      	movs	r3, r1
     39e:	330c      	adds	r3, #12
     3a0:	001a      	movs	r2, r3
     3a2:	7848      	ldrb	r0, [r1, #1]
     3a4:	69cb      	ldr	r3, [r1, #28]
     3a6:	2101      	movs	r1, #1
     3a8:	4798      	blx	r3
		if (err) {
     3aa:	2800      	cmp	r0, #0
     3ac:	d017      	beq.n	3de <_usb_d_cb_trans_done+0x72>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     3ae:	0162      	lsls	r2, r4, #5
     3b0:	4b42      	ldr	r3, [pc, #264]	; (4bc <_usb_d_cb_trans_done+0x150>)
     3b2:	189b      	adds	r3, r3, r2
     3b4:	2205      	movs	r2, #5
     3b6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     3b8:	3a03      	subs	r2, #3
     3ba:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     3bc:	2d00      	cmp	r5, #0
     3be:	d004      	beq.n	3ca <_usb_d_cb_trans_done+0x5e>
     3c0:	0164      	lsls	r4, r4, #5
     3c2:	4b3e      	ldr	r3, [pc, #248]	; (4bc <_usb_d_cb_trans_done+0x150>)
     3c4:	191c      	adds	r4, r3, r4
     3c6:	7860      	ldrb	r0, [r4, #1]
     3c8:	e005      	b.n	3d6 <_usb_d_cb_trans_done+0x6a>
     3ca:	0164      	lsls	r4, r4, #5
     3cc:	4b3b      	ldr	r3, [pc, #236]	; (4bc <_usb_d_cb_trans_done+0x150>)
     3ce:	191c      	adds	r4, r3, r4
     3d0:	7860      	ldrb	r0, [r4, #1]
     3d2:	2380      	movs	r3, #128	; 0x80
     3d4:	4318      	orrs	r0, r3
     3d6:	2101      	movs	r1, #1
     3d8:	4b39      	ldr	r3, [pc, #228]	; (4c0 <_usb_d_cb_trans_done+0x154>)
     3da:	4798      	blx	r3
     3dc:	e06a      	b.n	4b4 <_usb_d_cb_trans_done+0x148>
		} else {
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     3de:	0164      	lsls	r4, r4, #5
     3e0:	4b36      	ldr	r3, [pc, #216]	; (4bc <_usb_d_cb_trans_done+0x150>)
     3e2:	191c      	adds	r4, r3, r4
     3e4:	2304      	movs	r3, #4
     3e6:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     3e8:	7863      	ldrb	r3, [r4, #1]
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
	struct usb_d_transfer trans
     3ea:	2200      	movs	r2, #0
     3ec:	9201      	str	r2, [sp, #4]
     3ee:	9202      	str	r2, [sp, #8]
     3f0:	2d00      	cmp	r5, #0
     3f2:	d102      	bne.n	3fa <_usb_d_cb_trans_done+0x8e>
     3f4:	3280      	adds	r2, #128	; 0x80
     3f6:	4313      	orrs	r3, r2
     3f8:	e001      	b.n	3fe <_usb_d_cb_trans_done+0x92>
     3fa:	220f      	movs	r2, #15
     3fc:	4013      	ands	r3, r2
     3fe:	a801      	add	r0, sp, #4
     400:	7203      	strb	r3, [r0, #8]
     402:	2301      	movs	r3, #1
     404:	7243      	strb	r3, [r0, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
     406:	4b2f      	ldr	r3, [pc, #188]	; (4c4 <_usb_d_cb_trans_done+0x158>)
     408:	4798      	blx	r3
     40a:	e053      	b.n	4b4 <_usb_d_cb_trans_done+0x148>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
		}
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     40c:	4b2b      	ldr	r3, [pc, #172]	; (4bc <_usb_d_cb_trans_done+0x150>)
     40e:	0164      	lsls	r4, r4, #5
     410:	191a      	adds	r2, r3, r4
     412:	320c      	adds	r2, #12
     414:	191c      	adds	r4, r3, r4
     416:	7860      	ldrb	r0, [r4, #1]
     418:	2100      	movs	r1, #0
     41a:	69e3      	ldr	r3, [r4, #28]
     41c:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     41e:	2302      	movs	r3, #2
     420:	70a3      	strb	r3, [r4, #2]
     422:	e047      	b.n	4b4 <_usb_d_cb_trans_done+0x148>
		ept->xfer.hdr.status = USB_XFER_DONE;
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     424:	0163      	lsls	r3, r4, #5
     426:	4a25      	ldr	r2, [pc, #148]	; (4bc <_usb_d_cb_trans_done+0x150>)
     428:	18d3      	adds	r3, r2, r3
     42a:	2201      	movs	r2, #1
     42c:	709a      	strb	r2, [r3, #2]
     42e:	e039      	b.n	4a4 <_usb_d_cb_trans_done+0x138>
	} else if (code == USB_TRANS_STALL) {
     430:	2f01      	cmp	r7, #1
     432:	d114      	bne.n	45e <_usb_d_cb_trans_done+0xf2>
		ept->xfer.hdr.status = USB_XFER_HALT;
     434:	4b21      	ldr	r3, [pc, #132]	; (4bc <_usb_d_cb_trans_done+0x150>)
     436:	0142      	lsls	r2, r0, #5
     438:	1899      	adds	r1, r3, r2
     43a:	2002      	movs	r0, #2
     43c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     43e:	5cd3      	ldrb	r3, [r2, r3]
     440:	2b00      	cmp	r3, #0
     442:	d106      	bne.n	452 <_usb_d_cb_trans_done+0xe6>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     444:	2202      	movs	r2, #2
     446:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     448:	2100      	movs	r1, #0
     44a:	0028      	movs	r0, r5
     44c:	4b1c      	ldr	r3, [pc, #112]	; (4c0 <_usb_d_cb_trans_done+0x154>)
     44e:	4798      	blx	r3
     450:	e028      	b.n	4a4 <_usb_d_cb_trans_done+0x138>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     452:	0163      	lsls	r3, r4, #5
     454:	4a19      	ldr	r2, [pc, #100]	; (4bc <_usb_d_cb_trans_done+0x150>)
     456:	18d3      	adds	r3, r2, r3
     458:	2205      	movs	r2, #5
     45a:	709a      	strb	r2, [r3, #2]
     45c:	e022      	b.n	4a4 <_usb_d_cb_trans_done+0x138>
		}
	} else if (code == USB_TRANS_ABORT) {
     45e:	2f02      	cmp	r7, #2
     460:	d110      	bne.n	484 <_usb_d_cb_trans_done+0x118>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     462:	4b16      	ldr	r3, [pc, #88]	; (4bc <_usb_d_cb_trans_done+0x150>)
     464:	0142      	lsls	r2, r0, #5
     466:	1899      	adds	r1, r3, r2
     468:	2004      	movs	r0, #4
     46a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     46c:	5cd3      	ldrb	r3, [r2, r3]
     46e:	2b00      	cmp	r3, #0
     470:	d102      	bne.n	478 <_usb_d_cb_trans_done+0x10c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     472:	2302      	movs	r3, #2
     474:	708b      	strb	r3, [r1, #2]
			return;
     476:	e01d      	b.n	4b4 <_usb_d_cb_trans_done+0x148>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     478:	0163      	lsls	r3, r4, #5
     47a:	4a10      	ldr	r2, [pc, #64]	; (4bc <_usb_d_cb_trans_done+0x150>)
     47c:	18d3      	adds	r3, r2, r3
     47e:	2201      	movs	r2, #1
     480:	709a      	strb	r2, [r3, #2]
     482:	e00f      	b.n	4a4 <_usb_d_cb_trans_done+0x138>
	} else if (code == USB_TRANS_RESET) {
     484:	2f03      	cmp	r7, #3
     486:	d107      	bne.n	498 <_usb_d_cb_trans_done+0x12c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     488:	0142      	lsls	r2, r0, #5
     48a:	4b0c      	ldr	r3, [pc, #48]	; (4bc <_usb_d_cb_trans_done+0x150>)
     48c:	189b      	adds	r3, r3, r2
     48e:	2200      	movs	r2, #0
     490:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     492:	3205      	adds	r2, #5
     494:	70da      	strb	r2, [r3, #3]
     496:	e005      	b.n	4a4 <_usb_d_cb_trans_done+0x138>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     498:	0142      	lsls	r2, r0, #5
     49a:	4b08      	ldr	r3, [pc, #32]	; (4bc <_usb_d_cb_trans_done+0x150>)
     49c:	189b      	adds	r3, r3, r2
     49e:	2206      	movs	r2, #6
     4a0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     4a2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     4a4:	0164      	lsls	r4, r4, #5
     4a6:	4b05      	ldr	r3, [pc, #20]	; (4bc <_usb_d_cb_trans_done+0x150>)
     4a8:	191c      	adds	r4, r3, r4
     4aa:	78e1      	ldrb	r1, [r4, #3]
     4ac:	69e3      	ldr	r3, [r4, #28]
     4ae:	0032      	movs	r2, r6
     4b0:	0028      	movs	r0, r5
     4b2:	4798      	blx	r3
}
     4b4:	b005      	add	sp, #20
     4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b8:	000002f1 	.word	0x000002f1
     4bc:	20000084 	.word	0x20000084
     4c0:	00001d21 	.word	0x00001d21
     4c4:	00001ef5 	.word	0x00001ef5

000004c8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
     4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ca:	4647      	mov	r7, r8
     4cc:	b480      	push	{r7}
     4ce:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     4d0:	4b1d      	ldr	r3, [pc, #116]	; (548 <usb_d_cb_trans_setup+0x80>)
     4d2:	4798      	blx	r3
     4d4:	0006      	movs	r6, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	uint8_t *        req      = ept->xfer.req;
     4d6:	0143      	lsls	r3, r0, #5
     4d8:	4c1c      	ldr	r4, [pc, #112]	; (54c <usb_d_cb_trans_setup+0x84>)
     4da:	18e4      	adds	r4, r4, r3
     4dc:	340c      	adds	r4, #12

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     4de:	0021      	movs	r1, r4
     4e0:	0028      	movs	r0, r5
     4e2:	4b1b      	ldr	r3, [pc, #108]	; (550 <usb_d_cb_trans_setup+0x88>)
     4e4:	4798      	blx	r3
	if (n != 8) {
     4e6:	b2c0      	uxtb	r0, r0
     4e8:	2808      	cmp	r0, #8
     4ea:	d008      	beq.n	4fe <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     4ec:	2101      	movs	r1, #1
     4ee:	0028      	movs	r0, r5
     4f0:	4c18      	ldr	r4, [pc, #96]	; (554 <usb_d_cb_trans_setup+0x8c>)
     4f2:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     4f4:	2080      	movs	r0, #128	; 0x80
     4f6:	4328      	orrs	r0, r5
     4f8:	2101      	movs	r1, #1
     4fa:	47a0      	blx	r4
		return;
     4fc:	e020      	b.n	540 <usb_d_cb_trans_setup+0x78>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     4fe:	2100      	movs	r1, #0
     500:	0028      	movs	r0, r5
     502:	4b14      	ldr	r3, [pc, #80]	; (554 <usb_d_cb_trans_setup+0x8c>)
     504:	4698      	mov	r8, r3
     506:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     508:	2780      	movs	r7, #128	; 0x80
     50a:	432f      	orrs	r7, r5
     50c:	2100      	movs	r1, #0
     50e:	0038      	movs	r0, r7
     510:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     512:	0172      	lsls	r2, r6, #5
     514:	4b0d      	ldr	r3, [pc, #52]	; (54c <usb_d_cb_trans_setup+0x84>)
     516:	189b      	adds	r3, r3, r2
     518:	2201      	movs	r2, #1
     51a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     51c:	695b      	ldr	r3, [r3, #20]
     51e:	0021      	movs	r1, r4
     520:	0028      	movs	r0, r5
     522:	4798      	blx	r3
     524:	2800      	cmp	r0, #0
     526:	d10b      	bne.n	540 <usb_d_cb_trans_setup+0x78>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     528:	0176      	lsls	r6, r6, #5
     52a:	4b08      	ldr	r3, [pc, #32]	; (54c <usb_d_cb_trans_setup+0x84>)
     52c:	199e      	adds	r6, r3, r6
     52e:	2305      	movs	r3, #5
     530:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     532:	2101      	movs	r1, #1
     534:	0028      	movs	r0, r5
     536:	4c07      	ldr	r4, [pc, #28]	; (554 <usb_d_cb_trans_setup+0x8c>)
     538:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     53a:	2101      	movs	r1, #1
     53c:	0038      	movs	r0, r7
     53e:	47a0      	blx	r4
	}
}
     540:	bc04      	pop	{r2}
     542:	4690      	mov	r8, r2
     544:	bdf0      	pop	{r4, r5, r6, r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	000002f1 	.word	0x000002f1
     54c:	20000084 	.word	0x20000084
     550:	00001e89 	.word	0x00001e89
     554:	00001d21 	.word	0x00001d21

00000558 <usb_d_init>:

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}

int32_t usb_d_init(void)
{
     558:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     55a:	4b14      	ldr	r3, [pc, #80]	; (5ac <usb_d_init+0x54>)
     55c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     55e:	2800      	cmp	r0, #0
     560:	db22      	blt.n	5a8 <usb_d_init+0x50>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     562:	4c13      	ldr	r4, [pc, #76]	; (5b0 <usb_d_init+0x58>)
     564:	22d0      	movs	r2, #208	; 0xd0
     566:	0052      	lsls	r2, r2, #1
     568:	2100      	movs	r1, #0
     56a:	0020      	movs	r0, r4
     56c:	4b11      	ldr	r3, [pc, #68]	; (5b4 <usb_d_init+0x5c>)
     56e:	4798      	blx	r3
     570:	1c63      	adds	r3, r4, #1
     572:	0020      	movs	r0, r4
     574:	30a2      	adds	r0, #162	; 0xa2
     576:	30ff      	adds	r0, #255	; 0xff
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     578:	24ff      	movs	r4, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     57a:	4a0f      	ldr	r2, [pc, #60]	; (5b8 <usb_d_init+0x60>)
	if (rc < 0) {
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     57c:	701c      	strb	r4, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     57e:	0019      	movs	r1, r3
     580:	3113      	adds	r1, #19
     582:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     584:	3104      	adds	r1, #4
     586:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     588:	3104      	adds	r1, #4
     58a:	600a      	str	r2, [r1, #0]
     58c:	3320      	adds	r3, #32
	uint8_t i;
	if (rc < 0) {
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     58e:	4283      	cmp	r3, r0
     590:	d1f4      	bne.n	57c <usb_d_init+0x24>
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     592:	490a      	ldr	r1, [pc, #40]	; (5bc <usb_d_init+0x64>)
     594:	2000      	movs	r0, #0
     596:	4c0a      	ldr	r4, [pc, #40]	; (5c0 <usb_d_init+0x68>)
     598:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     59a:	490a      	ldr	r1, [pc, #40]	; (5c4 <usb_d_init+0x6c>)
     59c:	2001      	movs	r0, #1
     59e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     5a0:	4909      	ldr	r1, [pc, #36]	; (5c8 <usb_d_init+0x70>)
     5a2:	2002      	movs	r0, #2
     5a4:	47a0      	blx	r4
	return ERR_NONE;
     5a6:	2000      	movs	r0, #0
}
     5a8:	bd10      	pop	{r4, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	000016e1 	.word	0x000016e1
     5b0:	20000084 	.word	0x20000084
     5b4:	00002d63 	.word	0x00002d63
     5b8:	00000335 	.word	0x00000335
     5bc:	000004c9 	.word	0x000004c9
     5c0:	00002135 	.word	0x00002135
     5c4:	00000339 	.word	0x00000339
     5c8:	0000036d 	.word	0x0000036d

000005cc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     5cc:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     5ce:	4b01      	ldr	r3, [pc, #4]	; (5d4 <usb_d_register_callback+0x8>)
     5d0:	4798      	blx	r3
}
     5d2:	bd10      	pop	{r4, pc}
     5d4:	00002111 	.word	0x00002111

000005d8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     5d8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     5da:	4b01      	ldr	r3, [pc, #4]	; (5e0 <usb_d_enable+0x8>)
     5dc:	4798      	blx	r3
}
     5de:	bd10      	pop	{r4, pc}
     5e0:	000017a9 	.word	0x000017a9

000005e4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     5e4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     5e6:	4b01      	ldr	r3, [pc, #4]	; (5ec <usb_d_attach+0x8>)
     5e8:	4798      	blx	r3
}
     5ea:	bd10      	pop	{r4, pc}
     5ec:	000017ed 	.word	0x000017ed

000005f0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     5f0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     5f2:	4b01      	ldr	r3, [pc, #4]	; (5f8 <usb_d_set_address+0x8>)
     5f4:	4798      	blx	r3
}
     5f6:	bd10      	pop	{r4, pc}
     5f8:	000017fd 	.word	0x000017fd

000005fc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5fe:	0006      	movs	r6, r0
     600:	000d      	movs	r5, r1
     602:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     604:	4b0f      	ldr	r3, [pc, #60]	; (644 <usb_d_ep_init+0x48>)
     606:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     608:	2800      	cmp	r0, #0
     60a:	da14      	bge.n	636 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     60c:	20ff      	movs	r0, #255	; 0xff
     60e:	4b0d      	ldr	r3, [pc, #52]	; (644 <usb_d_ep_init+0x48>)
     610:	4798      	blx	r3
     612:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     614:	db12      	blt.n	63c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     616:	003a      	movs	r2, r7
     618:	0029      	movs	r1, r5
     61a:	0030      	movs	r0, r6
     61c:	4b0a      	ldr	r3, [pc, #40]	; (648 <usb_d_ep_init+0x4c>)
     61e:	4798      	blx	r3
	if (rc < 0) {
     620:	2800      	cmp	r0, #0
     622:	db0d      	blt.n	640 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     624:	4b09      	ldr	r3, [pc, #36]	; (64c <usb_d_ep_init+0x50>)
     626:	0164      	lsls	r4, r4, #5
     628:	191a      	adds	r2, r3, r4
     62a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     62c:	2203      	movs	r2, #3
     62e:	4015      	ands	r5, r2
     630:	54e5      	strb	r5, [r4, r3]
	return ERR_NONE;
     632:	2000      	movs	r0, #0
     634:	e004      	b.n	640 <usb_d_ep_init+0x44>
{
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
		return -USB_ERR_REDO;
     636:	2014      	movs	r0, #20
     638:	4240      	negs	r0, r0
     63a:	e001      	b.n	640 <usb_d_ep_init+0x44>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
		if (ep_index < 0) {
			return -USB_ERR_ALLOC_FAIL;
     63c:	2015      	movs	r0, #21
     63e:	4240      	negs	r0, r0
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
	return ERR_NONE;
}
     640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	000002f1 	.word	0x000002f1
     648:	00001809 	.word	0x00001809
     64c:	20000084 	.word	0x20000084

00000650 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
     650:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     652:	b282      	uxth	r2, r0
     654:	2100      	movs	r1, #0
     656:	2000      	movs	r0, #0
     658:	4b01      	ldr	r3, [pc, #4]	; (660 <usb_d_ep0_init+0x10>)
     65a:	4798      	blx	r3
}
     65c:	bd10      	pop	{r4, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	000005fd 	.word	0x000005fd

00000664 <usb_d_ep_deinit>:
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
	return ERR_NONE;
}

void usb_d_ep_deinit(const uint8_t ep)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     668:	4b06      	ldr	r3, [pc, #24]	; (684 <usb_d_ep_deinit+0x20>)
     66a:	4798      	blx	r3
     66c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     66e:	db07      	blt.n	680 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     670:	0028      	movs	r0, r5
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <usb_d_ep_deinit+0x24>)
     674:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     676:	0164      	lsls	r4, r4, #5
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <usb_d_ep_deinit+0x28>)
     67a:	191c      	adds	r4, r3, r4
     67c:	23ff      	movs	r3, #255	; 0xff
     67e:	7063      	strb	r3, [r4, #1]
}
     680:	bd70      	pop	{r4, r5, r6, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	000002f1 	.word	0x000002f1
     688:	00001955 	.word	0x00001955
     68c:	20000084 	.word	0x20000084

00000690 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     694:	4b0d      	ldr	r3, [pc, #52]	; (6cc <usb_d_ep_enable+0x3c>)
     696:	4798      	blx	r3
     698:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     69a:	db14      	blt.n	6c6 <usb_d_ep_enable+0x36>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     69c:	0143      	lsls	r3, r0, #5
     69e:	4a0c      	ldr	r2, [pc, #48]	; (6d0 <usb_d_ep_enable+0x40>)
     6a0:	5c9a      	ldrb	r2, [r3, r2]
     6a2:	4253      	negs	r3, r2
     6a4:	415a      	adcs	r2, r3
     6a6:	3201      	adds	r2, #1
     6a8:	0143      	lsls	r3, r0, #5
     6aa:	4909      	ldr	r1, [pc, #36]	; (6d0 <usb_d_ep_enable+0x40>)
     6ac:	18cb      	adds	r3, r1, r3
     6ae:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     6b0:	0020      	movs	r0, r4
     6b2:	4b08      	ldr	r3, [pc, #32]	; (6d4 <usb_d_ep_enable+0x44>)
     6b4:	4798      	blx	r3
	if (rc < 0) {
     6b6:	2800      	cmp	r0, #0
     6b8:	da07      	bge.n	6ca <usb_d_ep_enable+0x3a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     6ba:	016d      	lsls	r5, r5, #5
     6bc:	4a04      	ldr	r2, [pc, #16]	; (6d0 <usb_d_ep_enable+0x40>)
     6be:	1955      	adds	r5, r2, r5
     6c0:	2200      	movs	r2, #0
     6c2:	70aa      	strb	r2, [r5, #2]
     6c4:	e001      	b.n	6ca <usb_d_ep_enable+0x3a>
{
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
     6c6:	2012      	movs	r0, #18
     6c8:	4240      	negs	r0, r0
	rc                  = _usb_d_dev_ep_enable(ep);
	if (rc < 0) {
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     6ca:	bd70      	pop	{r4, r5, r6, pc}
     6cc:	000002f1 	.word	0x000002f1
     6d0:	20000084 	.word	0x20000084
     6d4:	00001a29 	.word	0x00001a29

000006d8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6da:	4657      	mov	r7, sl
     6dc:	464e      	mov	r6, r9
     6de:	4645      	mov	r5, r8
     6e0:	b4e0      	push	{r5, r6, r7}
     6e2:	b086      	sub	sp, #24
     6e4:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     6e6:	7a07      	ldrb	r7, [r0, #8]
     6e8:	0038      	movs	r0, r7
     6ea:	4b43      	ldr	r3, [pc, #268]	; (7f8 <usb_d_ep_transfer+0x120>)
     6ec:	4798      	blx	r3
     6ee:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     6f0:	7a63      	ldrb	r3, [r4, #9]
     6f2:	4698      	mov	r8, r3
	uint32_t              len = xfer->size;
     6f4:	6866      	ldr	r6, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     6f6:	2800      	cmp	r0, #0
     6f8:	db68      	blt.n	7cc <usb_d_ep_transfer+0xf4>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     6fa:	a804      	add	r0, sp, #16
     6fc:	4b3f      	ldr	r3, [pc, #252]	; (7fc <usb_d_ep_transfer+0x124>)
     6fe:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     700:	016b      	lsls	r3, r5, #5
     702:	4a3f      	ldr	r2, [pc, #252]	; (800 <usb_d_ep_transfer+0x128>)
     704:	18d3      	adds	r3, r2, r3
     706:	789a      	ldrb	r2, [r3, #2]
     708:	2317      	movs	r3, #23
     70a:	446b      	add	r3, sp
     70c:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	2b01      	cmp	r3, #1
     712:	d110      	bne.n	736 <usb_d_ep_transfer+0x5e>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     714:	4b3a      	ldr	r3, [pc, #232]	; (800 <usb_d_ep_transfer+0x128>)
     716:	4699      	mov	r9, r3
     718:	016b      	lsls	r3, r5, #5
     71a:	469a      	mov	sl, r3
     71c:	464b      	mov	r3, r9
     71e:	4453      	add	r3, sl
     720:	2203      	movs	r2, #3
     722:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     724:	a804      	add	r0, sp, #16
     726:	4b37      	ldr	r3, [pc, #220]	; (804 <usb_d_ep_transfer+0x12c>)
     728:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     72a:	464b      	mov	r3, r9
     72c:	4652      	mov	r2, sl
     72e:	5cd3      	ldrb	r3, [r2, r3]
     730:	2b00      	cmp	r3, #0
     732:	d015      	beq.n	760 <usb_d_ep_transfer+0x88>
     734:	e035      	b.n	7a2 <usb_d_ep_transfer+0xca>
	state = ept->xfer.hdr.state;
	if (state == USB_EP_S_IDLE) {
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     736:	a804      	add	r0, sp, #16
     738:	4b32      	ldr	r3, [pc, #200]	; (804 <usb_d_ep_transfer+0x12c>)
     73a:	4798      	blx	r3
		switch (state) {
     73c:	2317      	movs	r3, #23
     73e:	446b      	add	r3, sp
     740:	781b      	ldrb	r3, [r3, #0]
     742:	b2db      	uxtb	r3, r3
     744:	2b05      	cmp	r3, #5
     746:	d044      	beq.n	7d2 <usb_d_ep_transfer+0xfa>
     748:	2b06      	cmp	r3, #6
     74a:	d003      	beq.n	754 <usb_d_ep_transfer+0x7c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     74c:	2001      	movs	r0, #1
	if (state == USB_EP_S_IDLE) {
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
		switch (state) {
     74e:	2b00      	cmp	r3, #0
     750:	d14b      	bne.n	7ea <usb_d_ep_transfer+0x112>
     752:	e002      	b.n	75a <usb_d_ep_transfer+0x82>
		case USB_EP_S_HALTED:
			return USB_HALTED;
		case USB_EP_S_ERROR:
			return -USB_ERROR;
     754:	2010      	movs	r0, #16
     756:	4240      	negs	r0, r0
     758:	e047      	b.n	7ea <usb_d_ep_transfer+0x112>
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
     75a:	2013      	movs	r0, #19
     75c:	4240      	negs	r0, r0
     75e:	e044      	b.n	7ea <usb_d_ep_transfer+0x112>
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     760:	016a      	lsls	r2, r5, #5
     762:	4b27      	ldr	r3, [pc, #156]	; (800 <usb_d_ep_transfer+0x128>)
     764:	189b      	adds	r3, r3, r2
     766:	7cda      	ldrb	r2, [r3, #19]
     768:	0212      	lsls	r2, r2, #8
     76a:	7c9b      	ldrb	r3, [r3, #18]
     76c:	189a      	adds	r2, r3, r2
     76e:	b292      	uxth	r2, r2
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
     770:	2a00      	cmp	r2, #0
     772:	d107      	bne.n	784 <usb_d_ep_transfer+0xac>
			dir                 = true;
			len                 = 0;
			zlp                 = true;
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     774:	016d      	lsls	r5, r5, #5
     776:	4b22      	ldr	r3, [pc, #136]	; (800 <usb_d_ep_transfer+0x128>)
     778:	195d      	adds	r5, r3, r5
     77a:	2304      	movs	r3, #4
     77c:	70ab      	strb	r3, [r5, #2]
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
			dir                 = true;
			len                 = 0;
     77e:	2600      	movs	r6, #0
			zlp                 = true;
     780:	3b03      	subs	r3, #3
     782:	e028      	b.n	7d6 <usb_d_ep_transfer+0xfe>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     784:	016d      	lsls	r5, r5, #5
     786:	4b1e      	ldr	r3, [pc, #120]	; (800 <usb_d_ep_transfer+0x128>)
     788:	195d      	adds	r5, r3, r5
     78a:	7b2b      	ldrb	r3, [r5, #12]
     78c:	217f      	movs	r1, #127	; 0x7f
     78e:	438b      	bics	r3, r1
     790:	4296      	cmp	r6, r2
     792:	d900      	bls.n	796 <usb_d_ep_transfer+0xbe>
     794:	0016      	movs	r6, r2
			/* Data length not exceed requested. */
			if (len > req_len) {
				len = req_len;
			}
			if (dir) {
     796:	2b00      	cmp	r3, #0
     798:	d022      	beq.n	7e0 <usb_d_ep_transfer+0x108>
				/* Setup -> In */
				zlp = (req_len > len);
     79a:	4296      	cmp	r6, r2
     79c:	419b      	sbcs	r3, r3
     79e:	425b      	negs	r3, r3
     7a0:	e019      	b.n	7d6 <usb_d_ep_transfer+0xfe>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7a2:	7a22      	ldrb	r2, [r4, #8]
     7a4:	4643      	mov	r3, r8
     7a6:	1e59      	subs	r1, r3, #1
     7a8:	418b      	sbcs	r3, r1
     7aa:	b2db      	uxtb	r3, r3
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
	struct usb_d_transfer trans
     7ac:	6821      	ldr	r1, [r4, #0]
     7ae:	9101      	str	r1, [sp, #4]
     7b0:	9602      	str	r6, [sp, #8]
     7b2:	09ff      	lsrs	r7, r7, #7
     7b4:	d002      	beq.n	7bc <usb_d_ep_transfer+0xe4>
     7b6:	2180      	movs	r1, #128	; 0x80
     7b8:	430a      	orrs	r2, r1
     7ba:	e001      	b.n	7c0 <usb_d_ep_transfer+0xe8>
     7bc:	210f      	movs	r1, #15
     7be:	400a      	ands	r2, r1
     7c0:	a801      	add	r0, sp, #4
     7c2:	7202      	strb	r2, [r0, #8]
     7c4:	7243      	strb	r3, [r0, #9]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
     7c6:	4b10      	ldr	r3, [pc, #64]	; (808 <usb_d_ep_transfer+0x130>)
     7c8:	4798      	blx	r3
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
     7ca:	e00e      	b.n	7ea <usb_d_ep_transfer+0x112>
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
		return -USB_ERR_PARAM;
     7cc:	2012      	movs	r0, #18
     7ce:	4240      	negs	r0, r0
     7d0:	e00b      	b.n	7ea <usb_d_ep_transfer+0x112>
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
		switch (state) {
		case USB_EP_S_HALTED:
			return USB_HALTED;
     7d2:	2002      	movs	r0, #2
     7d4:	e009      	b.n	7ea <usb_d_ep_transfer+0x112>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7d6:	7a22      	ldrb	r2, [r4, #8]
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
	struct usb_d_transfer trans
     7d8:	6821      	ldr	r1, [r4, #0]
     7da:	9101      	str	r1, [sp, #4]
     7dc:	9602      	str	r6, [sp, #8]
     7de:	e7ea      	b.n	7b6 <usb_d_ep_transfer+0xde>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7e0:	7a22      	ldrb	r2, [r4, #8]
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
	struct usb_d_transfer trans
     7e2:	6821      	ldr	r1, [r4, #0]
     7e4:	9101      	str	r1, [sp, #4]
     7e6:	9602      	str	r6, [sp, #8]
     7e8:	e7e8      	b.n	7bc <usb_d_ep_transfer+0xe4>
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     7ea:	b006      	add	sp, #24
     7ec:	bc1c      	pop	{r2, r3, r4}
     7ee:	4690      	mov	r8, r2
     7f0:	4699      	mov	r9, r3
     7f2:	46a2      	mov	sl, r4
     7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	000002f1 	.word	0x000002f1
     7fc:	000002d5 	.word	0x000002d5
     800:	20000084 	.word	0x20000084
     804:	000002e5 	.word	0x000002e5
     808:	00001ef5 	.word	0x00001ef5

0000080c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     810:	2900      	cmp	r1, #0
     812:	d11e      	bne.n	852 <usb_d_ep_halt+0x46>
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
	int8_t           ep_index = _usb_d_find_ep(ep);
     814:	4b15      	ldr	r3, [pc, #84]	; (86c <usb_d_ep_halt+0x60>)
     816:	4798      	blx	r3
     818:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     81a:	db23      	blt.n	864 <usb_d_ep_halt+0x58>
		return -USB_ERR_PARAM;
	}
	if (ept->xfer.hdr.state == USB_EP_S_HALTED) {
     81c:	0143      	lsls	r3, r0, #5
     81e:	4a14      	ldr	r2, [pc, #80]	; (870 <usb_d_ep_halt+0x64>)
     820:	18d3      	adds	r3, r2, r3
     822:	789b      	ldrb	r3, [r3, #2]
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
		ept->xfer.hdr.status = USB_XFER_UNHALT;
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
	}
	return ERR_NONE;
     824:	2000      	movs	r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
	}
	if (ept->xfer.hdr.state == USB_EP_S_HALTED) {
     826:	2b05      	cmp	r3, #5
     828:	d11e      	bne.n	868 <usb_d_ep_halt+0x5c>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     82a:	2100      	movs	r1, #0
     82c:	0020      	movs	r0, r4
     82e:	4b11      	ldr	r3, [pc, #68]	; (874 <usb_d_ep_halt+0x68>)
     830:	4798      	blx	r3
		if (rc < 0) {
     832:	2800      	cmp	r0, #0
     834:	db18      	blt.n	868 <usb_d_ep_halt+0x5c>
			return rc;
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     836:	016d      	lsls	r5, r5, #5
     838:	4b0d      	ldr	r3, [pc, #52]	; (870 <usb_d_ep_halt+0x64>)
     83a:	195d      	adds	r5, r3, r5
     83c:	2301      	movs	r3, #1
     83e:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     840:	3302      	adds	r3, #2
     842:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     844:	69eb      	ldr	r3, [r5, #28]
     846:	2200      	movs	r2, #0
     848:	2103      	movs	r1, #3
     84a:	0020      	movs	r0, r4
     84c:	4798      	blx	r3
	}
	return ERR_NONE;
     84e:	2000      	movs	r0, #0
     850:	e00a      	b.n	868 <usb_d_ep_halt+0x5c>

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
	if (ctrl == USB_EP_HALT_CLR) {
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     852:	2901      	cmp	r1, #1
     854:	d102      	bne.n	85c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <usb_d_ep_halt+0x68>)
     858:	4798      	blx	r3
     85a:	e005      	b.n	868 <usb_d_ep_halt+0x5c>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     85c:	2102      	movs	r1, #2
     85e:	4b05      	ldr	r3, [pc, #20]	; (874 <usb_d_ep_halt+0x68>)
     860:	4798      	blx	r3
     862:	e001      	b.n	868 <usb_d_ep_halt+0x5c>
{
	int8_t           ep_index = _usb_d_find_ep(ep);
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
		return -USB_ERR_PARAM;
     864:	2012      	movs	r0, #18
     866:	4240      	negs	r0, r0
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
     868:	bd70      	pop	{r4, r5, r6, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	000002f1 	.word	0x000002f1
     870:	20000084 	.word	0x20000084
     874:	00001d21 	.word	0x00001d21

00000878 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     878:	b570      	push	{r4, r5, r6, lr}
     87a:	000d      	movs	r5, r1
     87c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     87e:	4b0f      	ldr	r3, [pc, #60]	; (8bc <usb_d_ep_register_callback+0x44>)
     880:	4798      	blx	r3
     882:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     884:	2c00      	cmp	r4, #0
     886:	d100      	bne.n	88a <usb_d_ep_register_callback+0x12>
     888:	4c0d      	ldr	r4, [pc, #52]	; (8c0 <usb_d_ep_register_callback+0x48>)
	if (ep_index < 0) {
     88a:	2b00      	cmp	r3, #0
     88c:	db14      	blt.n	8b8 <usb_d_ep_register_callback+0x40>
		return;
	}
	switch (type) {
     88e:	2d01      	cmp	r5, #1
     890:	d009      	beq.n	8a6 <usb_d_ep_register_callback+0x2e>
     892:	2d00      	cmp	r5, #0
     894:	d002      	beq.n	89c <usb_d_ep_register_callback+0x24>
     896:	2d02      	cmp	r5, #2
     898:	d00a      	beq.n	8b0 <usb_d_ep_register_callback+0x38>
     89a:	e00d      	b.n	8b8 <usb_d_ep_register_callback+0x40>
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     89c:	0140      	lsls	r0, r0, #5
     89e:	4b09      	ldr	r3, [pc, #36]	; (8c4 <usb_d_ep_register_callback+0x4c>)
     8a0:	1818      	adds	r0, r3, r0
     8a2:	6144      	str	r4, [r0, #20]
		break;
     8a4:	e008      	b.n	8b8 <usb_d_ep_register_callback+0x40>
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     8a6:	0140      	lsls	r0, r0, #5
     8a8:	4b06      	ldr	r3, [pc, #24]	; (8c4 <usb_d_ep_register_callback+0x4c>)
     8aa:	1818      	adds	r0, r3, r0
     8ac:	6184      	str	r4, [r0, #24]
		break;
     8ae:	e003      	b.n	8b8 <usb_d_ep_register_callback+0x40>
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     8b0:	0140      	lsls	r0, r0, #5
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <usb_d_ep_register_callback+0x4c>)
     8b4:	1818      	adds	r0, r3, r0
     8b6:	61c4      	str	r4, [r0, #28]
		break;
	default:
		break;
	}
}
     8b8:	bd70      	pop	{r4, r5, r6, pc}
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	000002f1 	.word	0x000002f1
     8c0:	00000335 	.word	0x00000335
     8c4:	20000084 	.word	0x20000084

000008c8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8c8:	2800      	cmp	r0, #0
     8ca:	d100      	bne.n	8ce <assert+0x6>
		__asm("BKPT #0");
     8cc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8ce:	4770      	bx	lr

000008d0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8d0:	6803      	ldr	r3, [r0, #0]
     8d2:	2b00      	cmp	r3, #0
     8d4:	d009      	beq.n	8ea <is_list_element+0x1a>
		if (it == element) {
     8d6:	428b      	cmp	r3, r1
     8d8:	d102      	bne.n	8e0 <is_list_element+0x10>
     8da:	e008      	b.n	8ee <is_list_element+0x1e>
     8dc:	4299      	cmp	r1, r3
     8de:	d008      	beq.n	8f2 <is_list_element+0x22>
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d1fa      	bne.n	8dc <is_list_element+0xc>
		if (it == element) {
			return true;
		}
	}

	return false;
     8e6:	2000      	movs	r0, #0
     8e8:	e004      	b.n	8f4 <is_list_element+0x24>
     8ea:	2000      	movs	r0, #0
     8ec:	e002      	b.n	8f4 <is_list_element+0x24>
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
		if (it == element) {
			return true;
     8ee:	2001      	movs	r0, #1
     8f0:	e000      	b.n	8f4 <is_list_element+0x24>
     8f2:	2001      	movs	r0, #1
		}
	}

	return false;
}
     8f4:	4770      	bx	lr
     8f6:	46c0      	nop			; (mov r8, r8)

000008f8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	0005      	movs	r5, r0
     8fc:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     8fe:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     900:	4b0a      	ldr	r3, [pc, #40]	; (92c <list_insert_at_end+0x34>)
     902:	4798      	blx	r3
     904:	2301      	movs	r3, #1
     906:	4058      	eors	r0, r3
     908:	b2c0      	uxtb	r0, r0
     90a:	2259      	movs	r2, #89	; 0x59
     90c:	4908      	ldr	r1, [pc, #32]	; (930 <list_insert_at_end+0x38>)
     90e:	4b09      	ldr	r3, [pc, #36]	; (934 <list_insert_at_end+0x3c>)
     910:	4798      	blx	r3

	if (!list->head) {
     912:	682b      	ldr	r3, [r5, #0]
     914:	2b00      	cmp	r3, #0
     916:	d103      	bne.n	920 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     918:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     91a:	6033      	str	r3, [r6, #0]
		return;
     91c:	e005      	b.n	92a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     91e:	001c      	movs	r4, r3
		list->head                             = (struct list_element *)element;
		((struct list_element *)element)->next = NULL;
		return;
	}

	while (it->next) {
     920:	6823      	ldr	r3, [r4, #0]
     922:	2b00      	cmp	r3, #0
     924:	d1fb      	bne.n	91e <list_insert_at_end+0x26>
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
     926:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     928:	6033      	str	r3, [r6, #0]
}
     92a:	bd70      	pop	{r4, r5, r6, pc}
     92c:	000008d1 	.word	0x000008d1
     930:	00002d74 	.word	0x00002d74
     934:	000008c9 	.word	0x000008c9

00000938 <_irq_disable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     938:	231f      	movs	r3, #31
     93a:	4018      	ands	r0, r3
     93c:	3b1e      	subs	r3, #30
     93e:	4083      	lsls	r3, r0
     940:	2280      	movs	r2, #128	; 0x80
     942:	4901      	ldr	r1, [pc, #4]	; (948 <_irq_disable+0x10>)
     944:	508b      	str	r3, [r1, r2]
 * \brief Disable the given IRQ
 */
void _irq_disable(uint8_t n)
{
	NVIC_DisableIRQ((IRQn_Type)n);
}
     946:	4770      	bx	lr
     948:	e000e100 	.word	0xe000e100

0000094c <_irq_clear>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     94c:	231f      	movs	r3, #31
     94e:	4018      	ands	r0, r3
     950:	3b1e      	subs	r3, #30
     952:	4083      	lsls	r3, r0
     954:	22c0      	movs	r2, #192	; 0xc0
     956:	0052      	lsls	r2, r2, #1
     958:	4901      	ldr	r1, [pc, #4]	; (960 <_irq_clear+0x14>)
     95a:	508b      	str	r3, [r1, r2]
 * \brief Clear the given IRQ
 */
void _irq_clear(uint8_t n)
{
	NVIC_ClearPendingIRQ((IRQn_Type)n);
}
     95c:	4770      	bx	lr
     95e:	46c0      	nop			; (mov r8, r8)
     960:	e000e100 	.word	0xe000e100

00000964 <_irq_enable>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     964:	231f      	movs	r3, #31
     966:	4018      	ands	r0, r3
     968:	3b1e      	subs	r3, #30
     96a:	4083      	lsls	r3, r0
     96c:	4a01      	ldr	r2, [pc, #4]	; (974 <_irq_enable+0x10>)
     96e:	6013      	str	r3, [r2, #0]
 * \brief Enable the given IRQ
 */
void _irq_enable(uint8_t n)
{
	NVIC_EnableIRQ((IRQn_Type)n);
}
     970:	4770      	bx	lr
     972:	46c0      	nop			; (mov r8, r8)
     974:	e000e100 	.word	0xe000e100

00000978 <_irq_register>:

/**
 * \brief Register IRQ handler
 */
void _irq_register(const uint8_t n, struct _irq_descriptor *const irq)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0004      	movs	r4, r0
     97c:	000d      	movs	r5, r1
	ASSERT(n < PERIPH_COUNT_IRQn);
     97e:	2000      	movs	r0, #0
     980:	231c      	movs	r3, #28
     982:	42a3      	cmp	r3, r4
     984:	4140      	adcs	r0, r0
     986:	b2c0      	uxtb	r0, r0
     988:	228c      	movs	r2, #140	; 0x8c
     98a:	4903      	ldr	r1, [pc, #12]	; (998 <_irq_register+0x20>)
     98c:	4b03      	ldr	r3, [pc, #12]	; (99c <_irq_register+0x24>)
     98e:	4798      	blx	r3

	_irq_table[n] = irq;
     990:	00a4      	lsls	r4, r4, #2
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <_irq_register+0x28>)
     994:	50e5      	str	r5, [r4, r3]
}
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	00002d94 	.word	0x00002d94
     99c:	000008c9 	.word	0x000008c9
     9a0:	20000708 	.word	0x20000708

000009a4 <Default_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Default_Handler(void)
{
     9a4:	e7fe      	b.n	9a4 <Default_Handler>
     9a6:	46c0      	nop			; (mov r8, r8)

000009a8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     9a8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     9aa:	4b0c      	ldr	r3, [pc, #48]	; (9dc <_init_chip+0x34>)
     9ac:	685a      	ldr	r2, [r3, #4]
     9ae:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     9b0:	2002      	movs	r0, #2
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <_init_chip+0x38>)
     9b4:	4798      	blx	r3

	_osc32kctrl_init_sources();
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <_init_chip+0x3c>)
     9b8:	4798      	blx	r3
	_oscctrl_init_sources();
     9ba:	4b0b      	ldr	r3, [pc, #44]	; (9e8 <_init_chip+0x40>)
     9bc:	4798      	blx	r3
	_mclk_init();
     9be:	4b0b      	ldr	r3, [pc, #44]	; (9ec <_init_chip+0x44>)
     9c0:	4798      	blx	r3
	_gclk_init_generators();
     9c2:	4b0b      	ldr	r3, [pc, #44]	; (9f0 <_init_chip+0x48>)
     9c4:	4798      	blx	r3
	_oscctrl_init_referenced_generators();
     9c6:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <_init_chip+0x4c>)
     9c8:	4798      	blx	r3
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     9ca:	4a0b      	ldr	r2, [pc, #44]	; (9f8 <_init_chip+0x50>)
     9cc:	6913      	ldr	r3, [r2, #16]
     9ce:	2180      	movs	r1, #128	; 0x80
     9d0:	0109      	lsls	r1, r1, #4
     9d2:	430b      	orrs	r3, r1
     9d4:	6113      	str	r3, [r2, #16]

	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);

	_dma_init();
     9d6:	4b09      	ldr	r3, [pc, #36]	; (9fc <_init_chip+0x54>)
     9d8:	4798      	blx	r3
}
     9da:	bd10      	pop	{r4, pc}
     9dc:	41004000 	.word	0x41004000
     9e0:	00000bf9 	.word	0x00000bf9
     9e4:	00000b49 	.word	0x00000b49
     9e8:	00000b61 	.word	0x00000b61
     9ec:	00000b35 	.word	0x00000b35
     9f0:	00000b1d 	.word	0x00000b1d
     9f4:	00000b81 	.word	0x00000b81
     9f8:	40000400 	.word	0x40000400
     9fc:	00000a55 	.word	0x00000a55

00000a00 <_dmac_handler>:
 * \internal DMAC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _dmac_handler(void *p)
{
     a00:	b510      	push	{r4, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_read_INTPEND_ID_bf(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
     a02:	4a12      	ldr	r2, [pc, #72]	; (a4c <_dmac_handler+0x4c>)
     a04:	8c11      	ldrh	r1, [r2, #32]
	uint8_t               channel      = hri_dmac_read_INTPEND_ID_bf(DMAC);
     a06:	230f      	movs	r3, #15
     a08:	400b      	ands	r3, r1
	struct _dma_resource *tmp_resource = &_resources[channel];
     a0a:	0058      	lsls	r0, r3, #1
     a0c:	18c0      	adds	r0, r0, r3
     a0e:	0080      	lsls	r0, r0, #2
     a10:	490f      	ldr	r1, [pc, #60]	; (a50 <_dmac_handler+0x50>)
     a12:	1808      	adds	r0, r1, r0
}

static inline void hri_dmac_write_CHID_reg(const void *const hw, hri_dmac_chid_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHID.reg = data;
     a14:	213f      	movs	r1, #63	; 0x3f
     a16:	5453      	strb	r3, [r2, r1]
	((Dmac *)hw)->CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw)
{
	return (((Dmac *)hw)->CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
     a18:	310f      	adds	r1, #15
     a1a:	5c52      	ldrb	r2, [r2, r1]

	hri_dmac_write_CHID_reg(DMAC, channel);

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC)) {
     a1c:	07d2      	lsls	r2, r2, #31
     a1e:	d506      	bpl.n	a2e <_dmac_handler+0x2e>
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw)
{
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     a20:	2401      	movs	r4, #1
     a22:	224e      	movs	r2, #78	; 0x4e
     a24:	4909      	ldr	r1, [pc, #36]	; (a4c <_dmac_handler+0x4c>)
     a26:	548c      	strb	r4, [r1, r2]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC);
		tmp_resource->dma_cb.error(tmp_resource);
     a28:	6843      	ldr	r3, [r0, #4]
     a2a:	4798      	blx	r3
     a2c:	e00d      	b.n	a4a <_dmac_handler+0x4a>
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw)
{
	return (((Dmac *)hw)->CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
     a2e:	224e      	movs	r2, #78	; 0x4e
     a30:	4906      	ldr	r1, [pc, #24]	; (a4c <_dmac_handler+0x4c>)
     a32:	5c8a      	ldrb	r2, [r1, r2]
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC)) {
     a34:	0792      	lsls	r2, r2, #30
     a36:	d508      	bpl.n	a4a <_dmac_handler+0x4a>
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw)
{
	((Dmac *)hw)->CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     a38:	2402      	movs	r4, #2
     a3a:	224e      	movs	r2, #78	; 0x4e
     a3c:	548c      	strb	r4, [r1, r2]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
     a3e:	005a      	lsls	r2, r3, #1
     a40:	18d3      	adds	r3, r2, r3
     a42:	009b      	lsls	r3, r3, #2
     a44:	4a02      	ldr	r2, [pc, #8]	; (a50 <_dmac_handler+0x50>)
     a46:	589b      	ldr	r3, [r3, r2]
     a48:	4798      	blx	r3
	}
	(void)p;
}
     a4a:	bd10      	pop	{r4, pc}
     a4c:	44000400 	.word	0x44000400
     a50:	20000224 	.word	0x20000224

00000a54 <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
     a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     a56:	4b27      	ldr	r3, [pc, #156]	; (af4 <_dma_init+0xa0>)
     a58:	881a      	ldrh	r2, [r3, #0]
     a5a:	2102      	movs	r1, #2
     a5c:	438a      	bics	r2, r1
     a5e:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_clear_CTRL_CRCENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_CRCENABLE;
     a60:	881a      	ldrh	r2, [r3, #0]
     a62:	3102      	adds	r1, #2
     a64:	438a      	bics	r2, r1
     a66:	801a      	strh	r2, [r3, #0]
}

static inline void hri_dmac_set_CHCTRLA_SWRST_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLA.reg |= DMAC_CHCTRLA_SWRST;
     a68:	313c      	adds	r1, #60	; 0x3c
     a6a:	5c58      	ldrb	r0, [r3, r1]
     a6c:	2201      	movs	r2, #1
     a6e:	4302      	orrs	r2, r0
     a70:	545a      	strb	r2, [r3, r1]
}

static inline void hri_dmac_write_CTRL_reg(const void *const hw, hri_dmac_ctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg = data;
     a72:	2100      	movs	r1, #0
     a74:	8019      	strh	r1, [r3, #0]

static inline void hri_dmac_write_DBGCTRL_DBGRUN_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
     a76:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
     a78:	2001      	movs	r0, #1
     a7a:	4382      	bics	r2, r0
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
	((Dmac *)hw)->DBGCTRL.reg = tmp;
     a7c:	735a      	strb	r2, [r3, #13]
}

static inline void hri_dmac_write_QOSCTRL_reg(const void *const hw, hri_dmac_qosctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->QOSCTRL.reg = data;
     a7e:	2200      	movs	r2, #0
     a80:	739a      	strb	r2, [r3, #14]
}

static inline void hri_dmac_write_PRICTRL0_reg(const void *const hw, hri_dmac_prictrl0_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->PRICTRL0.reg = data;
     a82:	6159      	str	r1, [r3, #20]
	                                | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	                                | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos)
	                                | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	                                | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos)
	                                | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
     a84:	4a1c      	ldr	r2, [pc, #112]	; (af8 <_dma_init+0xa4>)
}

static inline void hri_dmac_write_BASEADDR_reg(const void *const hw, hri_dmac_baseaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->BASEADDR.reg = data;
     a86:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
     a88:	4a1c      	ldr	r2, [pc, #112]	; (afc <_dma_init+0xa8>)
}

static inline void hri_dmac_write_WRBADDR_reg(const void *const hw, hri_dmac_wrbaddr_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->WRBADDR.reg = data;
     a8a:	639a      	str	r2, [r3, #56]	; 0x38
     a8c:	481c      	ldr	r0, [pc, #112]	; (b00 <_dma_init+0xac>)
}

static inline void hri_dmac_write_CHID_reg(const void *const hw, hri_dmac_chid_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHID.reg = data;
     a8e:	001c      	movs	r4, r3
     a90:	233f      	movs	r3, #63	; 0x3f
     a92:	469c      	mov	ip, r3

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
     a94:	2540      	movs	r5, #64	; 0x40
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY;
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
     a96:	2701      	movs	r7, #1
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     a98:	4e17      	ldr	r6, [pc, #92]	; (af8 <_dma_init+0xa4>)
     a9a:	b2cb      	uxtb	r3, r1
}

static inline void hri_dmac_write_CHID_reg(const void *const hw, hri_dmac_chid_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHID.reg = data;
     a9c:	4662      	mov	r2, ip
     a9e:	54a3      	strb	r3, [r4, r2]

static inline void hri_dmac_write_CHCTRLA_RUNSTDBY_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->CHCTRLA.reg;
     aa0:	5d62      	ldrb	r2, [r4, r5]
	tmp &= ~DMAC_CHCTRLA_RUNSTDBY;
	tmp |= value << DMAC_CHCTRLA_RUNSTDBY_Pos;
     aa2:	7803      	ldrb	r3, [r0, #0]
     aa4:	099b      	lsrs	r3, r3, #6
     aa6:	403b      	ands	r3, r7
     aa8:	019b      	lsls	r3, r3, #6
     aaa:	43aa      	bics	r2, r5
     aac:	4313      	orrs	r3, r2
	((Dmac *)hw)->CHCTRLA.reg = tmp;
     aae:	5563      	strb	r3, [r4, r5]
}

static inline void hri_dmac_write_CHCTRLB_reg(const void *const hw, hri_dmac_chctrlb_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CHCTRLB.reg = data;
     ab0:	6843      	ldr	r3, [r0, #4]
     ab2:	6463      	str	r3, [r4, #68]	; 0x44
		hri_dmac_write_CHID_reg(DMAC, i);

		hri_dmac_write_CHCTRLA_RUNSTDBY_bit(DMAC, _cfgs[i].ctrla & DMAC_CHCTRLA_RUNSTDBY);

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
     ab4:	8902      	ldrh	r2, [r0, #8]
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
     ab6:	010b      	lsls	r3, r1, #4
     ab8:	539a      	strh	r2, [r3, r6]
     aba:	3101      	adds	r1, #1
     abc:	300c      	adds	r0, #12
	                                | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos)
	                                | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);

	for (; i < DMAC_CH_NUM; i++) {
     abe:	2910      	cmp	r1, #16
     ac0:	d1eb      	bne.n	a9a <_dma_init+0x46>

		hri_dmac_write_CHCTRLB_reg(DMAC, _cfgs[i].ctrlb);
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
	}

	dmac_irq.handler   = _dmac_handler;
     ac2:	4c10      	ldr	r4, [pc, #64]	; (b04 <_dma_init+0xb0>)
     ac4:	4b10      	ldr	r3, [pc, #64]	; (b08 <_dma_init+0xb4>)
     ac6:	6423      	str	r3, [r4, #64]	; 0x40
	dmac_irq.parameter = DMAC;
     ac8:	4d0a      	ldr	r5, [pc, #40]	; (af4 <_dma_init+0xa0>)
     aca:	6465      	str	r5, [r4, #68]	; 0x44
	_irq_disable(DMAC_IRQn);
     acc:	2005      	movs	r0, #5
     ace:	4b0f      	ldr	r3, [pc, #60]	; (b0c <_dma_init+0xb8>)
     ad0:	4798      	blx	r3
	_irq_clear(DMAC_IRQn);
     ad2:	2005      	movs	r0, #5
     ad4:	4b0e      	ldr	r3, [pc, #56]	; (b10 <_dma_init+0xbc>)
     ad6:	4798      	blx	r3
	_irq_register(DMAC_IRQn, &dmac_irq);
     ad8:	0021      	movs	r1, r4
     ada:	3140      	adds	r1, #64	; 0x40
     adc:	2005      	movs	r0, #5
     ade:	4b0d      	ldr	r3, [pc, #52]	; (b14 <_dma_init+0xc0>)
     ae0:	4798      	blx	r3
	_irq_enable(DMAC_IRQn);
     ae2:	2005      	movs	r0, #5
     ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <_dma_init+0xc4>)
     ae6:	4798      	blx	r3
}

static inline void hri_dmac_set_CTRL_DMAENABLE_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
     ae8:	882a      	ldrh	r2, [r5, #0]
     aea:	2302      	movs	r3, #2
     aec:	4313      	orrs	r3, r2
     aee:	802b      	strh	r3, [r5, #0]

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);

	return ERR_NONE;
}
     af0:	2000      	movs	r0, #0
     af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af4:	44000400 	.word	0x44000400
     af8:	30000000 	.word	0x30000000
     afc:	30000100 	.word	0x30000100
     b00:	00002db8 	.word	0x00002db8
     b04:	200002a4 	.word	0x200002a4
     b08:	00000a01 	.word	0x00000a01
     b0c:	00000939 	.word	0x00000939
     b10:	0000094d 	.word	0x0000094d
     b14:	00000979 	.word	0x00000979
     b18:	00000965 	.word	0x00000965

00000b1c <_gclk_init_generators>:
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     b1c:	4b02      	ldr	r3, [pc, #8]	; (b28 <_gclk_init_generators+0xc>)
     b1e:	4a03      	ldr	r2, [pc, #12]	; (b2c <_gclk_init_generators+0x10>)
     b20:	621a      	str	r2, [r3, #32]
     b22:	4a03      	ldr	r2, [pc, #12]	; (b30 <_gclk_init_generators+0x14>)
     b24:	625a      	str	r2, [r3, #36]	; 0x24
	                               | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos)
	                               | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
	                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
	                               | CONF_GCLK_GEN_8_SOURCE);
#endif
}
     b26:	4770      	bx	lr
     b28:	40001800 	.word	0x40001800
     b2c:	00010106 	.word	0x00010106
     b30:	00010107 	.word	0x00010107

00000b34 <_mclk_init>:
}

static inline void hri_mclk_write_BUPDIV_reg(const void *const hw, hri_mclk_bupdiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->BUPDIV.reg = data;
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <_mclk_init+0x10>)
     b36:	2208      	movs	r2, #8
     b38:	719a      	strb	r2, [r3, #6]
}

static inline void hri_mclk_write_LPDIV_reg(const void *const hw, hri_mclk_lpdiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->LPDIV.reg = data;
     b3a:	3a04      	subs	r2, #4
     b3c:	715a      	strb	r2, [r3, #5]
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     b3e:	3a03      	subs	r2, #3
     b40:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     b42:	4770      	bx	lr
     b44:	40000400 	.word	0x40000400

00000b48 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     b48:	4b04      	ldr	r3, [pc, #16]	; (b5c <_osc32kctrl_init_sources+0x14>)
     b4a:	69d9      	ldr	r1, [r3, #28]
	                                    | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     b4c:	22f8      	movs	r2, #248	; 0xf8
     b4e:	0152      	lsls	r2, r2, #5
     b50:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     b52:	61da      	str	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     b54:	2200      	movs	r2, #0
     b56:	611a      	str	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     b58:	4770      	bx	lr
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	40001000 	.word	0x40001000

00000b60 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     b60:	228e      	movs	r2, #142	; 0x8e
     b62:	4b06      	ldr	r3, [pc, #24]	; (b7c <_oscctrl_init_sources+0x1c>)
     b64:	751a      	strb	r2, [r3, #20]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     b66:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     b68:	3a7e      	subs	r2, #126	; 0x7e
     b6a:	68cb      	ldr	r3, [r1, #12]
     b6c:	421a      	tst	r2, r3
     b6e:	d0fc      	beq.n	b6a <_oscctrl_init_sources+0xa>
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     b70:	4a02      	ldr	r2, [pc, #8]	; (b7c <_oscctrl_init_sources+0x1c>)
     b72:	7d11      	ldrb	r1, [r2, #20]
     b74:	2380      	movs	r3, #128	; 0x80
     b76:	430b      	orrs	r3, r1
     b78:	7513      	strb	r3, [r2, #20]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     b7a:	4770      	bx	lr
     b7c:	40000c00 	.word	0x40000c00

00000b80 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
#define NVM_DFLL_COARSE_POS 26
#define NVM_DFLL_COARSE_SIZE 6
	uint32_t coarse;
	coarse = *((uint32_t *)(NVMCTRL_OTP5)) >> NVM_DFLL_COARSE_POS;
     b80:	4b19      	ldr	r3, [pc, #100]	; (be8 <_oscctrl_init_referenced_generators+0x68>)
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	0e98      	lsrs	r0, r3, #26
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     b86:	2202      	movs	r2, #2
     b88:	4b18      	ldr	r3, [pc, #96]	; (bec <_oscctrl_init_referenced_generators+0x6c>)
     b8a:	831a      	strh	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     b8c:	0019      	movs	r1, r3
#endif
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(GCLK, 0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif
	hri_oscctrl_write_DFLLCTRL_reg(hw, OSCCTRL_DFLLCTRL_ENABLE);
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     b8e:	32fe      	adds	r2, #254	; 0xfe
     b90:	68cb      	ldr	r3, [r1, #12]
     b92:	4213      	tst	r3, r2
     b94:	d0fc      	beq.n	b90 <_oscctrl_init_referenced_generators+0x10>
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     b96:	4a16      	ldr	r2, [pc, #88]	; (bf0 <_oscctrl_init_referenced_generators+0x70>)
     b98:	4b14      	ldr	r3, [pc, #80]	; (bec <_oscctrl_init_referenced_generators+0x6c>)
     b9a:	621a      	str	r2, [r3, #32]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     b9c:	0019      	movs	r1, r3
		;
	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     b9e:	2280      	movs	r2, #128	; 0x80
     ba0:	0052      	lsls	r2, r2, #1
     ba2:	68cb      	ldr	r3, [r1, #12]
     ba4:	4213      	tst	r3, r2
     ba6:	d0fc      	beq.n	ba2 <_oscctrl_init_referenced_generators+0x22>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
	/* FINE is set to fixed value, which defined by DFLL48M Characteristics */
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(coarse) | OSCCTRL_DFLLVAL_FINE(512));
     ba8:	0283      	lsls	r3, r0, #10
     baa:	2280      	movs	r2, #128	; 0x80
     bac:	0092      	lsls	r2, r2, #2
     bae:	4313      	orrs	r3, r2
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     bb0:	4a0e      	ldr	r2, [pc, #56]	; (bec <_oscctrl_init_referenced_generators+0x6c>)
     bb2:	61d3      	str	r3, [r2, #28]
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
     bb4:	2393      	movs	r3, #147	; 0x93
     bb6:	005b      	lsls	r3, r3, #1
     bb8:	8313      	strh	r3, [r2, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
     bba:	8b13      	ldrh	r3, [r2, #24]
	                                    | (CONF_DPLL_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(hw)) {
     bbc:	075b      	lsls	r3, r3, #29
     bbe:	d507      	bpl.n	bd0 <_oscctrl_init_referenced_generators+0x50>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     bc0:	0011      	movs	r1, r2
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     bc2:	2290      	movs	r2, #144	; 0x90
     bc4:	0112      	lsls	r2, r2, #4
     bc6:	68cb      	ldr	r3, [r1, #12]
     bc8:	4013      	ands	r3, r2
     bca:	4293      	cmp	r3, r2
     bcc:	d1fb      	bne.n	bc6 <_oscctrl_init_referenced_generators+0x46>
     bce:	e005      	b.n	bdc <_oscctrl_init_referenced_generators+0x5c>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     bd0:	4906      	ldr	r1, [pc, #24]	; (bec <_oscctrl_init_referenced_generators+0x6c>)
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	0052      	lsls	r2, r2, #1
     bd6:	68cb      	ldr	r3, [r1, #12]
     bd8:	4213      	tst	r3, r2
     bda:	d0fc      	beq.n	bd6 <_oscctrl_init_referenced_generators+0x56>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
     bdc:	4a05      	ldr	r2, [pc, #20]	; (bf4 <_oscctrl_init_referenced_generators+0x74>)
     bde:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     be0:	2b00      	cmp	r3, #0
     be2:	d1fc      	bne.n	bde <_oscctrl_init_referenced_generators+0x5e>
		;
#endif
	(void)hw, (void)tmp;
}
     be4:	4770      	bx	lr
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	00806020 	.word	0x00806020
     bec:	40000c00 	.word	0x40000c00
     bf0:	0401bb80 	.word	0x0401bb80
     bf4:	40001800 	.word	0x40001800

00000bf8 <_set_performance_level>:
	return ((Pm *)hw)->INTFLAG.reg;
}

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
	((Pm *)hw)->INTFLAG.reg = mask;
     bf8:	2380      	movs	r3, #128	; 0x80
     bfa:	05db      	lsls	r3, r3, #23
     bfc:	22ff      	movs	r2, #255	; 0xff
     bfe:	719a      	strb	r2, [r3, #6]
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     c00:	789a      	ldrb	r2, [r3, #2]
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	hri_pm_clear_INTFLAG_reg(PM, 0xFF);
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     c02:	2303      	movs	r3, #3
     c04:	4013      	ands	r3, r2
     c06:	4298      	cmp	r0, r3
     c08:	d007      	beq.n	c1a <_set_performance_level+0x22>

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     c0a:	2280      	movs	r2, #128	; 0x80
     c0c:	05d2      	lsls	r2, r2, #23
     c0e:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     c10:	2103      	movs	r1, #3
     c12:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     c14:	4008      	ands	r0, r1
     c16:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     c18:	7090      	strb	r0, [r2, #2]
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
	return ((Pm *)hw)->INTFLAG.reg;
     c1a:	2280      	movs	r2, #128	; 0x80
     c1c:	05d2      	lsls	r2, r2, #23
     c1e:	7993      	ldrb	r3, [r2, #6]
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
	}
	while (!hri_pm_read_INTFLAG_reg(PM))
     c20:	2b00      	cmp	r3, #0
     c22:	d0fc      	beq.n	c1e <_set_performance_level+0x26>
		;
}
     c24:	4770      	bx	lr
     c26:	46c0      	nop			; (mov r8, r8)

00000c28 <_gpio_set_direction>:

/**
 * \brief Set direction on port with mask
 */
void _gpio_set_direction(const enum gpio_port port, const uint32_t mask, const enum gpio_direction direction)
{
     c28:	b510      	push	{r4, lr}
	switch (direction) {
     c2a:	2a01      	cmp	r2, #1
     c2c:	d018      	beq.n	c60 <_gpio_set_direction+0x38>
     c2e:	2a00      	cmp	r2, #0
     c30:	d002      	beq.n	c38 <_gpio_set_direction+0x10>
     c32:	2a02      	cmp	r2, #2
     c34:	d026      	beq.n	c84 <_gpio_set_direction+0x5c>
     c36:	e039      	b.n	cac <_gpio_set_direction+0x84>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c38:	01c0      	lsls	r0, r0, #7
     c3a:	23c0      	movs	r3, #192	; 0xc0
     c3c:	05db      	lsls	r3, r3, #23
     c3e:	18c3      	adds	r3, r0, r3
     c40:	6059      	str	r1, [r3, #4]
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c42:	040b      	lsls	r3, r1, #16
     c44:	0c1b      	lsrs	r3, r3, #16
     c46:	2280      	movs	r2, #128	; 0x80
     c48:	05d2      	lsls	r2, r2, #23
     c4a:	4313      	orrs	r3, r2

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c4c:	4a1a      	ldr	r2, [pc, #104]	; (cb8 <_gpio_set_direction+0x90>)
     c4e:	4694      	mov	ip, r2
     c50:	4460      	add	r0, ip
     c52:	6283      	str	r3, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
     c54:	0c09      	lsrs	r1, r1, #16
     c56:	23c0      	movs	r3, #192	; 0xc0
     c58:	061b      	lsls	r3, r3, #24
     c5a:	4319      	orrs	r1, r3
     c5c:	6281      	str	r1, [r0, #40]	; 0x28
     c5e:	e02a      	b.n	cb6 <_gpio_set_direction+0x8e>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c60:	01c0      	lsls	r0, r0, #7
     c62:	23c0      	movs	r3, #192	; 0xc0
     c64:	05db      	lsls	r3, r3, #23
     c66:	18c3      	adds	r3, r0, r3
     c68:	6059      	str	r1, [r3, #4]
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     c6a:	040b      	lsls	r3, r1, #16
     c6c:	0c1b      	lsrs	r3, r3, #16
     c6e:	4a13      	ldr	r2, [pc, #76]	; (cbc <_gpio_set_direction+0x94>)
     c70:	4313      	orrs	r3, r2

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c72:	4a11      	ldr	r2, [pc, #68]	; (cb8 <_gpio_set_direction+0x90>)
     c74:	4694      	mov	ip, r2
     c76:	4460      	add	r0, ip
     c78:	6283      	str	r3, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(PORT,
     c7a:	0c09      	lsrs	r1, r1, #16
     c7c:	4b10      	ldr	r3, [pc, #64]	; (cc0 <_gpio_set_direction+0x98>)
     c7e:	4319      	orrs	r1, r3
     c80:	6281      	str	r1, [r0, #40]	; 0x28
     c82:	e018      	b.n	cb6 <_gpio_set_direction+0x8e>
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c84:	01c0      	lsls	r0, r0, #7
     c86:	23c0      	movs	r3, #192	; 0xc0
     c88:	05db      	lsls	r3, r3, #23
     c8a:	18c3      	adds	r3, r0, r3
     c8c:	6099      	str	r1, [r3, #8]
		                                | ((mask & 0xffff0000) >> 16));
		break;

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c8e:	040b      	lsls	r3, r1, #16
     c90:	0c1b      	lsrs	r3, r3, #16
     c92:	2280      	movs	r2, #128	; 0x80
     c94:	05d2      	lsls	r2, r2, #23
     c96:	4313      	orrs	r3, r2

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c98:	4a07      	ldr	r2, [pc, #28]	; (cb8 <_gpio_set_direction+0x90>)
     c9a:	4694      	mov	ip, r2
     c9c:	4460      	add	r0, ip
     c9e:	6283      	str	r3, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
     ca0:	0c09      	lsrs	r1, r1, #16
     ca2:	23c0      	movs	r3, #192	; 0xc0
     ca4:	061b      	lsls	r3, r3, #24
     ca6:	4319      	orrs	r1, r3
     ca8:	6281      	str	r1, [r0, #40]	; 0x28
     caa:	e004      	b.n	cb6 <_gpio_set_direction+0x8e>
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
		break;

	default:
		ASSERT(false);
     cac:	224d      	movs	r2, #77	; 0x4d
     cae:	4905      	ldr	r1, [pc, #20]	; (cc4 <_gpio_set_direction+0x9c>)
     cb0:	2000      	movs	r0, #0
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <_gpio_set_direction+0xa0>)
     cb4:	4798      	blx	r3
	}
}
     cb6:	bd10      	pop	{r4, pc}
     cb8:	40002800 	.word	0x40002800
     cbc:	40020000 	.word	0x40020000
     cc0:	c0020000 	.word	0xc0020000
     cc4:	00002e78 	.word	0x00002e78
     cc8:	000008c9 	.word	0x000008c9

00000ccc <_gpio_set_level>:
/**
 * \brief Set output level on port with mask
 */
void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     ccc:	2a00      	cmp	r2, #0
     cce:	d006      	beq.n	cde <_gpio_set_level+0x12>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cd0:	01c0      	lsls	r0, r0, #7
     cd2:	23c0      	movs	r3, #192	; 0xc0
     cd4:	05db      	lsls	r3, r3, #23
     cd6:	469c      	mov	ip, r3
     cd8:	4460      	add	r0, ip
     cda:	6181      	str	r1, [r0, #24]
     cdc:	e005      	b.n	cea <_gpio_set_level+0x1e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cde:	01c0      	lsls	r0, r0, #7
     ce0:	23c0      	movs	r3, #192	; 0xc0
     ce2:	05db      	lsls	r3, r3, #23
     ce4:	469c      	mov	ip, r3
     ce6:	4460      	add	r0, ip
     ce8:	6141      	str	r1, [r0, #20]
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     cea:	4770      	bx	lr

00000cec <_gpio_set_pin_pull_mode>:

/**
 * \brief Set pin pull mode
 */
void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     cec:	b510      	push	{r4, lr}
	switch (pull_mode) {
     cee:	2a01      	cmp	r2, #1
     cf0:	d00e      	beq.n	d10 <_gpio_set_pin_pull_mode+0x24>
     cf2:	2a00      	cmp	r2, #0
     cf4:	d002      	beq.n	cfc <_gpio_set_pin_pull_mode+0x10>
     cf6:	2a02      	cmp	r2, #2
     cf8:	d01a      	beq.n	d30 <_gpio_set_pin_pull_mode+0x44>
     cfa:	e029      	b.n	d50 <_gpio_set_pin_pull_mode+0x64>
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cfc:	01c3      	lsls	r3, r0, #7
     cfe:	18c8      	adds	r0, r1, r3
     d00:	4b16      	ldr	r3, [pc, #88]	; (d5c <_gpio_set_pin_pull_mode+0x70>)
     d02:	469c      	mov	ip, r3
     d04:	4460      	add	r0, ip
     d06:	7803      	ldrb	r3, [r0, #0]
     d08:	2204      	movs	r2, #4
     d0a:	4393      	bics	r3, r2
     d0c:	7003      	strb	r3, [r0, #0]
     d0e:	e024      	b.n	d5a <_gpio_set_pin_pull_mode+0x6e>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     d10:	2301      	movs	r3, #1
     d12:	408b      	lsls	r3, r1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d14:	01c0      	lsls	r0, r0, #7
     d16:	22c0      	movs	r2, #192	; 0xc0
     d18:	05d2      	lsls	r2, r2, #23
     d1a:	1884      	adds	r4, r0, r2
     d1c:	6063      	str	r3, [r4, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d1e:	1808      	adds	r0, r1, r0
     d20:	4a0e      	ldr	r2, [pc, #56]	; (d5c <_gpio_set_pin_pull_mode+0x70>)
     d22:	1881      	adds	r1, r0, r2
     d24:	7808      	ldrb	r0, [r1, #0]
     d26:	2204      	movs	r2, #4
     d28:	4302      	orrs	r2, r0
     d2a:	700a      	strb	r2, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d2c:	61a3      	str	r3, [r4, #24]
     d2e:	e014      	b.n	d5a <_gpio_set_pin_pull_mode+0x6e>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     d30:	2301      	movs	r3, #1
     d32:	408b      	lsls	r3, r1
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d34:	01c0      	lsls	r0, r0, #7
     d36:	22c0      	movs	r2, #192	; 0xc0
     d38:	05d2      	lsls	r2, r2, #23
     d3a:	1884      	adds	r4, r0, r2
     d3c:	6063      	str	r3, [r4, #4]
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d3e:	1808      	adds	r0, r1, r0
     d40:	4a06      	ldr	r2, [pc, #24]	; (d5c <_gpio_set_pin_pull_mode+0x70>)
     d42:	1881      	adds	r1, r0, r2
     d44:	7808      	ldrb	r0, [r1, #0]
     d46:	2204      	movs	r2, #4
     d48:	4302      	orrs	r2, r0
     d4a:	700a      	strb	r2, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d4c:	6163      	str	r3, [r4, #20]
     d4e:	e004      	b.n	d5a <_gpio_set_pin_pull_mode+0x6e>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
		break;

	default:
		ASSERT(false);
     d50:	228f      	movs	r2, #143	; 0x8f
     d52:	4903      	ldr	r1, [pc, #12]	; (d60 <_gpio_set_pin_pull_mode+0x74>)
     d54:	2000      	movs	r0, #0
     d56:	4b03      	ldr	r3, [pc, #12]	; (d64 <_gpio_set_pin_pull_mode+0x78>)
     d58:	4798      	blx	r3
		break;
	}
}
     d5a:	bd10      	pop	{r4, pc}
     d5c:	40002840 	.word	0x40002840
     d60:	00002e78 	.word	0x00002e78
     d64:	000008c9 	.word	0x000008c9

00000d68 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     d68:	b570      	push	{r4, r5, r6, lr}
	uint8_t port = GPIO_PORT(gpio);
     d6a:	0942      	lsrs	r2, r0, #5
	uint8_t pin  = GPIO_PIN(gpio);
     d6c:	b2c0      	uxtb	r0, r0
     d6e:	231f      	movs	r3, #31
     d70:	4003      	ands	r3, r0
     d72:	001e      	movs	r6, r3

	if (function == GPIO_PIN_FUNCTION_OFF) {
     d74:	1c4b      	adds	r3, r1, #1
     d76:	d10b      	bne.n	d90 <_gpio_set_pin_function+0x28>
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d78:	23ff      	movs	r3, #255	; 0xff
     d7a:	401a      	ands	r2, r3
     d7c:	01d2      	lsls	r2, r2, #7
     d7e:	18b3      	adds	r3, r6, r2
     d80:	4a18      	ldr	r2, [pc, #96]	; (de4 <_gpio_set_pin_function+0x7c>)
     d82:	4694      	mov	ip, r2
     d84:	4463      	add	r3, ip
     d86:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d88:	3102      	adds	r1, #2
     d8a:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d8c:	701a      	strb	r2, [r3, #0]
     d8e:	e027      	b.n	de0 <_gpio_set_pin_function+0x78>
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d90:	23ff      	movs	r3, #255	; 0xff
     d92:	4013      	ands	r3, r2
     d94:	01da      	lsls	r2, r3, #7
     d96:	18b2      	adds	r2, r6, r2
     d98:	4c12      	ldr	r4, [pc, #72]	; (de4 <_gpio_set_pin_function+0x7c>)
     d9a:	46a4      	mov	ip, r4
     d9c:	4462      	add	r2, ip
     d9e:	7814      	ldrb	r4, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     da0:	2501      	movs	r5, #1
     da2:	43ac      	bics	r4, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     da4:	432c      	orrs	r4, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da6:	7014      	strb	r4, [r2, #0]
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
     da8:	07c2      	lsls	r2, r0, #31
     daa:	d50d      	bpl.n	dc8 <_gpio_set_pin_function+0x60>
static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dac:	0872      	lsrs	r2, r6, #1
     dae:	01d8      	lsls	r0, r3, #7
     db0:	1813      	adds	r3, r2, r0
     db2:	4a0d      	ldr	r2, [pc, #52]	; (de8 <_gpio_set_pin_function+0x80>)
     db4:	4694      	mov	ip, r2
     db6:	4463      	add	r3, ip
     db8:	7818      	ldrb	r0, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dba:	220f      	movs	r2, #15
     dbc:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     dbe:	0109      	lsls	r1, r1, #4
     dc0:	4311      	orrs	r1, r2
     dc2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dc4:	7019      	strb	r1, [r3, #0]
     dc6:	e00b      	b.n	de0 <_gpio_set_pin_function+0x78>
static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dc8:	0872      	lsrs	r2, r6, #1
     dca:	01db      	lsls	r3, r3, #7
     dcc:	18d3      	adds	r3, r2, r3
     dce:	4a06      	ldr	r2, [pc, #24]	; (de8 <_gpio_set_pin_function+0x80>)
     dd0:	4694      	mov	ip, r2
     dd2:	4463      	add	r3, ip
     dd4:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     dd6:	200f      	movs	r0, #15
     dd8:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     dda:	4001      	ands	r1, r0
     ddc:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dde:	7019      	strb	r1, [r3, #0]
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     de0:	bd70      	pop	{r4, r5, r6, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	40002840 	.word	0x40002840
     de8:	40002830 	.word	0x40002830

00000dec <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     dec:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     dee:	7c83      	ldrb	r3, [r0, #18]
     df0:	220f      	movs	r2, #15
     df2:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     df4:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     df6:	3a08      	subs	r2, #8
     df8:	400a      	ands	r2, r1
     dfa:	2a01      	cmp	r2, #1
     dfc:	d00b      	beq.n	e16 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     dfe:	015a      	lsls	r2, r3, #5
     e00:	491a      	ldr	r1, [pc, #104]	; (e6c <_usb_d_dev_handle_setup+0x80>)
     e02:	468c      	mov	ip, r1
     e04:	4462      	add	r2, ip
     e06:	2110      	movs	r1, #16
     e08:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     e0a:	015b      	lsls	r3, r3, #5
     e0c:	4a18      	ldr	r2, [pc, #96]	; (e70 <_usb_d_dev_handle_setup+0x84>)
     e0e:	4694      	mov	ip, r2
     e10:	4463      	add	r3, ip
     e12:	7019      	strb	r1, [r3, #0]
     e14:	e028      	b.n	e68 <_usb_d_dev_handle_setup+0x7c>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
     e16:	064a      	lsls	r2, r1, #25
     e18:	d50f      	bpl.n	e3a <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
     e1a:	7cc2      	ldrb	r2, [r0, #19]
     e1c:	2140      	movs	r1, #64	; 0x40
     e1e:	438a      	bics	r2, r1
     e20:	74c2      	strb	r2, [r0, #19]
     e22:	015a      	lsls	r2, r3, #5
     e24:	2482      	movs	r4, #130	; 0x82
     e26:	05e4      	lsls	r4, r4, #23
     e28:	46a4      	mov	ip, r4
     e2a:	4462      	add	r2, ip
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e2c:	2580      	movs	r5, #128	; 0x80
     e2e:	2482      	movs	r4, #130	; 0x82
     e30:	0064      	lsls	r4, r4, #1
     e32:	5515      	strb	r5, [r2, r4]
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e34:	2406      	movs	r4, #6
     e36:	34ff      	adds	r4, #255	; 0xff
     e38:	5511      	strb	r1, [r2, r4]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
     e3a:	7cc2      	ldrb	r2, [r0, #19]
     e3c:	2108      	movs	r1, #8
     e3e:	438a      	bics	r2, r1
     e40:	74c2      	strb	r2, [r0, #19]
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
     e42:	490c      	ldr	r1, [pc, #48]	; (e74 <_usb_d_dev_handle_setup+0x88>)
     e44:	015a      	lsls	r2, r3, #5
     e46:	188c      	adds	r4, r1, r2
     e48:	2500      	movs	r5, #0
     e4a:	72a5      	strb	r5, [r4, #10]
     e4c:	76a5      	strb	r5, [r4, #26]
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e4e:	0013      	movs	r3, r2
     e50:	4c06      	ldr	r4, [pc, #24]	; (e6c <_usb_d_dev_handle_setup+0x80>)
     e52:	46a4      	mov	ip, r4
     e54:	4463      	add	r3, ip
     e56:	246f      	movs	r4, #111	; 0x6f
     e58:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e5a:	4b05      	ldr	r3, [pc, #20]	; (e70 <_usb_d_dev_handle_setup+0x84>)
     e5c:	469c      	mov	ip, r3
     e5e:	4462      	add	r2, ip
     e60:	7014      	strb	r4, [r2, #0]
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
     e62:	7c80      	ldrb	r0, [r0, #18]
     e64:	6f0b      	ldr	r3, [r1, #112]	; 0x70
     e66:	4798      	blx	r3
}
     e68:	bd70      	pop	{r4, r5, r6, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	41000100 	.word	0x41000100
     e70:	41000108 	.word	0x41000108
     e74:	200002ec 	.word	0x200002ec

00000e78 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     e78:	2000      	movs	r0, #0
     e7a:	4770      	bx	lr

00000e7c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     e7c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e7e:	7c83      	ldrb	r3, [r0, #18]
     e80:	2bff      	cmp	r3, #255	; 0xff
     e82:	d00b      	beq.n	e9c <_usb_d_dev_trans_done+0x20>
     e84:	7cc2      	ldrb	r2, [r0, #19]
     e86:	0652      	lsls	r2, r2, #25
     e88:	d508      	bpl.n	e9c <_usb_d_dev_trans_done+0x20>
		return;
	}
	ept->flags.bits.is_busy = 0;
     e8a:	7cc2      	ldrb	r2, [r0, #19]
     e8c:	2440      	movs	r4, #64	; 0x40
     e8e:	43a2      	bics	r2, r4
     e90:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     e92:	6882      	ldr	r2, [r0, #8]
     e94:	4802      	ldr	r0, [pc, #8]	; (ea0 <_usb_d_dev_trans_done+0x24>)
     e96:	6f84      	ldr	r4, [r0, #120]	; 0x78
     e98:	0018      	movs	r0, r3
     e9a:	47a0      	blx	r4
}
     e9c:	bd10      	pop	{r4, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	200002ec 	.word	0x200002ec

00000ea4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     ea4:	b510      	push	{r4, lr}
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     ea6:	2220      	movs	r2, #32
     ea8:	408a      	lsls	r2, r1
     eaa:	b2d2      	uxtb	r2, r2
     eac:	7c83      	ldrb	r3, [r0, #18]
     eae:	210f      	movs	r1, #15
     eb0:	400b      	ands	r3, r1
     eb2:	015b      	lsls	r3, r3, #5
     eb4:	4903      	ldr	r1, [pc, #12]	; (ec4 <_usb_d_dev_handle_stall+0x20>)
     eb6:	468c      	mov	ip, r1
     eb8:	4463      	add	r3, ip
     eba:	701a      	strb	r2, [r3, #0]
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
     ebc:	2101      	movs	r1, #1
     ebe:	4b02      	ldr	r3, [pc, #8]	; (ec8 <_usb_d_dev_handle_stall+0x24>)
     ec0:	4798      	blx	r3
}
     ec2:	bd10      	pop	{r4, pc}
     ec4:	41000108 	.word	0x41000108
     ec8:	00000e7d 	.word	0x00000e7d

00000ecc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ece:	b083      	sub	sp, #12
     ed0:	0007      	movs	r7, r0
     ed2:	000e      	movs	r6, r1
     ed4:	0015      	movs	r5, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ed6:	7c84      	ldrb	r4, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     ed8:	2202      	movs	r2, #2
     eda:	4916      	ldr	r1, [pc, #88]	; (f34 <_usb_d_dev_trans_stop+0x68>)
     edc:	a801      	add	r0, sp, #4
     ede:	4b16      	ldr	r3, [pc, #88]	; (f38 <_usb_d_dev_trans_stop+0x6c>)
     ee0:	4798      	blx	r3
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     ee2:	2cff      	cmp	r4, #255	; 0xff
     ee4:	d023      	beq.n	f2e <_usb_d_dev_trans_stop+0x62>
     ee6:	7cfb      	ldrb	r3, [r7, #19]
     ee8:	065b      	lsls	r3, r3, #25
     eea:	d520      	bpl.n	f2e <_usb_d_dev_trans_stop+0x62>
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
     eec:	230f      	movs	r3, #15
     eee:	4023      	ands	r3, r4
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
		return;
	}
	/* Stop transfer */
	if (dir) {
     ef0:	2e00      	cmp	r6, #0
     ef2:	d006      	beq.n	f02 <_usb_d_dev_trans_stop+0x36>
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ef4:	015a      	lsls	r2, r3, #5
     ef6:	4911      	ldr	r1, [pc, #68]	; (f3c <_usb_d_dev_trans_stop+0x70>)
     ef8:	468c      	mov	ip, r1
     efa:	4462      	add	r2, ip
     efc:	2180      	movs	r1, #128	; 0x80
     efe:	7111      	strb	r1, [r2, #4]
     f00:	e005      	b.n	f0e <_usb_d_dev_trans_stop+0x42>
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     f02:	015a      	lsls	r2, r3, #5
     f04:	490d      	ldr	r1, [pc, #52]	; (f3c <_usb_d_dev_trans_stop+0x70>)
     f06:	468c      	mov	ip, r1
     f08:	4462      	add	r2, ip
     f0a:	2140      	movs	r1, #64	; 0x40
     f0c:	7151      	strb	r1, [r2, #5]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     f0e:	aa01      	add	r2, sp, #4
     f10:	5d91      	ldrb	r1, [r2, r6]
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f12:	015a      	lsls	r2, r3, #5
     f14:	4809      	ldr	r0, [pc, #36]	; (f3c <_usb_d_dev_trans_stop+0x70>)
     f16:	4684      	mov	ip, r0
     f18:	4462      	add	r2, ip
     f1a:	71d1      	strb	r1, [r2, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f1c:	015b      	lsls	r3, r3, #5
     f1e:	4a08      	ldr	r2, [pc, #32]	; (f40 <_usb_d_dev_trans_stop+0x74>)
     f20:	4694      	mov	ip, r2
     f22:	4463      	add	r3, ip
     f24:	7019      	strb	r1, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     f26:	0029      	movs	r1, r5
     f28:	0038      	movs	r0, r7
     f2a:	4b06      	ldr	r3, [pc, #24]	; (f44 <_usb_d_dev_trans_stop+0x78>)
     f2c:	4798      	blx	r3
}
     f2e:	b003      	add	sp, #12
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00002e94 	.word	0x00002e94
     f38:	00002d51 	.word	0x00002d51
     f3c:	41000100 	.word	0x41000100
     f40:	41000108 	.word	0x41000108
     f44:	00000e7d 	.word	0x00000e7d

00000f48 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	0006      	movs	r6, r0
     f4e:	000d      	movs	r5, r1
	Usb *              hw      = USB;
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     f50:	7c83      	ldrb	r3, [r0, #18]
     f52:	240f      	movs	r4, #15
     f54:	401c      	ands	r4, r3
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     f56:	2202      	movs	r2, #2
     f58:	4939      	ldr	r1, [pc, #228]	; (1040 <_usb_d_dev_handle_trfail+0xf8>)
     f5a:	3104      	adds	r1, #4
     f5c:	a801      	add	r0, sp, #4
     f5e:	4b39      	ldr	r3, [pc, #228]	; (1044 <_usb_d_dev_handle_trfail+0xfc>)
     f60:	4798      	blx	r3
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
     f62:	0163      	lsls	r3, r4, #5
     f64:	4a38      	ldr	r2, [pc, #224]	; (1048 <_usb_d_dev_handle_trfail+0x100>)
     f66:	18d3      	adds	r3, r2, r3
	uint8_t            eptype
     f68:	2d00      	cmp	r5, #0
     f6a:	d008      	beq.n	f7e <_usb_d_dev_handle_trfail+0x36>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f6c:	0022      	movs	r2, r4
     f6e:	3208      	adds	r2, #8
     f70:	0152      	lsls	r2, r2, #5
     f72:	2182      	movs	r1, #130	; 0x82
     f74:	05c9      	lsls	r1, r1, #23
     f76:	5c52      	ldrb	r2, [r2, r1]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     f78:	0652      	lsls	r2, r2, #25
     f7a:	0f52      	lsrs	r2, r2, #29
     f7c:	e007      	b.n	f8e <_usb_d_dev_handle_trfail+0x46>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     f7e:	0022      	movs	r2, r4
     f80:	3208      	adds	r2, #8
     f82:	0152      	lsls	r2, r2, #5
     f84:	2182      	movs	r1, #130	; 0x82
     f86:	05c9      	lsls	r1, r1, #23
     f88:	5c51      	ldrb	r1, [r2, r1]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     f8a:	2207      	movs	r2, #7
     f8c:	400a      	ands	r2, r1
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     f8e:	7cf0      	ldrb	r0, [r6, #19]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
     f90:	0129      	lsls	r1, r5, #4
     f92:	185b      	adds	r3, r3, r1
     f94:	7a99      	ldrb	r1, [r3, #10]
     f96:	b2c9      	uxtb	r1, r1

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f98:	2a02      	cmp	r2, #2
     f9a:	d119      	bne.n	fd0 <_usb_d_dev_handle_trfail+0x88>
     f9c:	07ca      	lsls	r2, r1, #31
     f9e:	d517      	bpl.n	fd0 <_usb_d_dev_handle_trfail+0x88>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     fa0:	7a9a      	ldrb	r2, [r3, #10]
     fa2:	2101      	movs	r1, #1
     fa4:	438a      	bics	r2, r1
     fa6:	729a      	strb	r2, [r3, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     fa8:	ab01      	add	r3, sp, #4
     faa:	5d5a      	ldrb	r2, [r3, r5]
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fac:	0163      	lsls	r3, r4, #5
     fae:	4927      	ldr	r1, [pc, #156]	; (104c <_usb_d_dev_handle_trfail+0x104>)
     fb0:	468c      	mov	ip, r1
     fb2:	4463      	add	r3, ip
     fb4:	71da      	strb	r2, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fb6:	0164      	lsls	r4, r4, #5
     fb8:	4b25      	ldr	r3, [pc, #148]	; (1050 <_usb_d_dev_handle_trfail+0x108>)
     fba:	469c      	mov	ip, r3
     fbc:	4464      	add	r4, ip
     fbe:	7022      	strb	r2, [r4, #0]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     fc0:	1e69      	subs	r1, r5, #1
     fc2:	418d      	sbcs	r5, r1
     fc4:	b2e9      	uxtb	r1, r5
     fc6:	2204      	movs	r2, #4
     fc8:	0030      	movs	r0, r6
     fca:	4b22      	ldr	r3, [pc, #136]	; (1054 <_usb_d_dev_handle_trfail+0x10c>)
     fcc:	4798      	blx	r3
     fce:	e034      	b.n	103a <_usb_d_dev_handle_trfail+0xf2>
	} else if (st.bit.ERRORFLOW) {
     fd0:	078a      	lsls	r2, r1, #30
     fd2:	d51f      	bpl.n	1014 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     fd4:	7a9a      	ldrb	r2, [r3, #10]
     fd6:	2102      	movs	r1, #2
     fd8:	438a      	bics	r2, r1
     fda:	729a      	strb	r2, [r3, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     fdc:	ab01      	add	r3, sp, #4
     fde:	5d5a      	ldrb	r2, [r3, r5]
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     fe0:	0163      	lsls	r3, r4, #5
     fe2:	491a      	ldr	r1, [pc, #104]	; (104c <_usb_d_dev_handle_trfail+0x104>)
     fe4:	468c      	mov	ip, r1
     fe6:	4463      	add	r3, ip
     fe8:	71da      	strb	r2, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fea:	0164      	lsls	r4, r4, #5
     fec:	4b18      	ldr	r3, [pc, #96]	; (1050 <_usb_d_dev_handle_trfail+0x108>)
     fee:	469c      	mov	ip, r3
     ff0:	4464      	add	r4, ip
     ff2:	7022      	strb	r2, [r4, #0]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
		/* Abort control transfer. */
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     ff4:	2307      	movs	r3, #7
     ff6:	4003      	ands	r3, r0
     ff8:	2b01      	cmp	r3, #1
     ffa:	d11e      	bne.n	103a <_usb_d_dev_handle_trfail+0xf2>
     ffc:	7cf3      	ldrb	r3, [r6, #19]
     ffe:	065b      	lsls	r3, r3, #25
    1000:	d51b      	bpl.n	103a <_usb_d_dev_handle_trfail+0xf2>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1002:	7cf1      	ldrb	r1, [r6, #19]
    1004:	09c9      	lsrs	r1, r1, #7
    1006:	428d      	cmp	r5, r1
    1008:	d017      	beq.n	103a <_usb_d_dev_handle_trfail+0xf2>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    100a:	2200      	movs	r2, #0
    100c:	0030      	movs	r0, r6
    100e:	4b11      	ldr	r3, [pc, #68]	; (1054 <_usb_d_dev_handle_trfail+0x10c>)
    1010:	4798      	blx	r3
    1012:	e012      	b.n	103a <_usb_d_dev_handle_trfail+0xf2>
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
    1014:	0063      	lsls	r3, r4, #1
    1016:	195b      	adds	r3, r3, r5
    1018:	011b      	lsls	r3, r3, #4
    101a:	4a0b      	ldr	r2, [pc, #44]	; (1048 <_usb_d_dev_handle_trfail+0x100>)
    101c:	18d3      	adds	r3, r2, r3
    101e:	2200      	movs	r2, #0
    1020:	729a      	strb	r2, [r3, #10]
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
			}
		}
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1022:	ab01      	add	r3, sp, #4
    1024:	5d5a      	ldrb	r2, [r3, r5]
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1026:	0163      	lsls	r3, r4, #5
    1028:	4908      	ldr	r1, [pc, #32]	; (104c <_usb_d_dev_handle_trfail+0x104>)
    102a:	468c      	mov	ip, r1
    102c:	4463      	add	r3, ip
    102e:	71da      	strb	r2, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1030:	0164      	lsls	r4, r4, #5
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <_usb_d_dev_handle_trfail+0x108>)
    1034:	469c      	mov	ip, r3
    1036:	4464      	add	r4, ip
    1038:	7022      	strb	r2, [r4, #0]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    103a:	b002      	add	sp, #8
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00002e94 	.word	0x00002e94
    1044:	00002d51 	.word	0x00002d51
    1048:	200002ec 	.word	0x200002ec
    104c:	41000100 	.word	0x41000100
    1050:	41000108 	.word	0x41000108
    1054:	00000ecd 	.word	0x00000ecd

00001058 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    1058:	b5f0      	push	{r4, r5, r6, r7, lr}
    105a:	4647      	mov	r7, r8
    105c:	b480      	push	{r7}
    105e:	0004      	movs	r4, r0
    1060:	000f      	movs	r7, r1
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1062:	7c83      	ldrb	r3, [r0, #18]
    1064:	250f      	movs	r5, #15
    1066:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1068:	2900      	cmp	r1, #0
    106a:	d100      	bne.n	106e <_usb_d_dev_in_next+0x16>
    106c:	e0b1      	b.n	11d2 <_usb_d_dev_in_next+0x17a>
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    106e:	016b      	lsls	r3, r5, #5
    1070:	4a5d      	ldr	r2, [pc, #372]	; (11e8 <_usb_d_dev_in_next+0x190>)
    1072:	18d3      	adds	r3, r2, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1074:	6958      	ldr	r0, [r3, #20]
    1076:	0480      	lsls	r0, r0, #18
    1078:	0c80      	lsrs	r0, r0, #18
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    107a:	8a23      	ldrh	r3, [r4, #16]
    107c:	4a5b      	ldr	r2, [pc, #364]	; (11ec <_usb_d_dev_in_next+0x194>)
    107e:	4293      	cmp	r3, r2
    1080:	d100      	bne.n	1084 <_usb_d_dev_in_next+0x2c>
    1082:	e09b      	b.n	11bc <_usb_d_dev_in_next+0x164>
    1084:	3b01      	subs	r3, #1
    1086:	b21a      	sxth	r2, r3
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1088:	7ce3      	ldrb	r3, [r4, #19]
    108a:	2607      	movs	r6, #7
    108c:	401e      	ands	r6, r3

	if (isr) {
    108e:	2f00      	cmp	r7, #0
    1090:	d005      	beq.n	109e <_usb_d_dev_in_next+0x46>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1092:	016b      	lsls	r3, r5, #5
    1094:	4956      	ldr	r1, [pc, #344]	; (11f0 <_usb_d_dev_in_next+0x198>)
    1096:	468c      	mov	ip, r1
    1098:	4463      	add	r3, ip
    109a:	2102      	movs	r1, #2
    109c:	71d9      	strb	r1, [r3, #7]
		_usbd_ep_ack_io_cpt(epn, 1);
	}

	ept->trans_count += trans_count;
    109e:	68a3      	ldr	r3, [r4, #8]
    10a0:	18c1      	adds	r1, r0, r3
    10a2:	60a1      	str	r1, [r4, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    10a4:	6863      	ldr	r3, [r4, #4]
    10a6:	4299      	cmp	r1, r3
    10a8:	d239      	bcs.n	111e <_usb_d_dev_in_next+0xc6>
		trans_next = ept->trans_size - ept->trans_count;
    10aa:	1a5b      	subs	r3, r3, r1
    10ac:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    10ae:	7ce2      	ldrb	r2, [r4, #19]
    10b0:	0692      	lsls	r2, r2, #26
    10b2:	d513      	bpl.n	10dc <_usb_d_dev_in_next+0x84>
			if (trans_next > ept->size) {
    10b4:	8a20      	ldrh	r0, [r4, #16]
    10b6:	1c1a      	adds	r2, r3, #0
    10b8:	4283      	cmp	r3, r0
    10ba:	d900      	bls.n	10be <_usb_d_dev_in_next+0x66>
    10bc:	1c02      	adds	r2, r0, #0
    10be:	b293      	uxth	r3, r2
    10c0:	4698      	mov	r8, r3
				trans_next = ept->size;
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    10c2:	6823      	ldr	r3, [r4, #0]
    10c4:	469c      	mov	ip, r3
    10c6:	4461      	add	r1, ip
    10c8:	4642      	mov	r2, r8
    10ca:	68e0      	ldr	r0, [r4, #12]
    10cc:	4b49      	ldr	r3, [pc, #292]	; (11f4 <_usb_d_dev_in_next+0x19c>)
    10ce:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    10d0:	68e2      	ldr	r2, [r4, #12]
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    10d2:	016b      	lsls	r3, r5, #5
    10d4:	4944      	ldr	r1, [pc, #272]	; (11e8 <_usb_d_dev_in_next+0x190>)
    10d6:	18cb      	adds	r3, r1, r3
    10d8:	611a      	str	r2, [r3, #16]
    10da:	e00e      	b.n	10fa <_usb_d_dev_in_next+0xa2>
    10dc:	1c1a      	adds	r2, r3, #0
    10de:	2080      	movs	r0, #128	; 0x80
    10e0:	0180      	lsls	r0, r0, #6
    10e2:	4283      	cmp	r3, r0
    10e4:	d901      	bls.n	10ea <_usb_d_dev_in_next+0x92>
    10e6:	4b44      	ldr	r3, [pc, #272]	; (11f8 <_usb_d_dev_in_next+0x1a0>)
    10e8:	881a      	ldrh	r2, [r3, #0]
    10ea:	b293      	uxth	r3, r2
    10ec:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
				trans_next = USB_D_DEV_TRANS_MAX;
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    10ee:	6823      	ldr	r3, [r4, #0]
    10f0:	1859      	adds	r1, r3, r1
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    10f2:	016b      	lsls	r3, r5, #5
    10f4:	4a3c      	ldr	r2, [pc, #240]	; (11e8 <_usb_d_dev_in_next+0x190>)
    10f6:	18d3      	adds	r3, r2, r3
    10f8:	6119      	str	r1, [r3, #16]
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    10fa:	016b      	lsls	r3, r5, #5
    10fc:	493a      	ldr	r1, [pc, #232]	; (11e8 <_usb_d_dev_in_next+0x190>)
    10fe:	18cb      	adds	r3, r1, r3
    1100:	3310      	adds	r3, #16
    1102:	0019      	movs	r1, r3
    1104:	6858      	ldr	r0, [r3, #4]
    1106:	4643      	mov	r3, r8
    1108:	049a      	lsls	r2, r3, #18
    110a:	0c93      	lsrs	r3, r2, #18
    110c:	0b82      	lsrs	r2, r0, #14
    110e:	0392      	lsls	r2, r2, #14
    1110:	431a      	orrs	r2, r3
    1112:	604a      	str	r2, [r1, #4]
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1114:	684a      	ldr	r2, [r1, #4]
    1116:	4b39      	ldr	r3, [pc, #228]	; (11fc <_usb_d_dev_in_next+0x1a4>)
    1118:	4013      	ands	r3, r2
    111a:	604b      	str	r3, [r1, #4]
    111c:	e03b      	b.n	1196 <_usb_d_dev_in_next+0x13e>
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
		goto _in_tx_exec;
	} else if (ept->flags.bits.need_zlp) {
    111e:	7ce3      	ldrb	r3, [r4, #19]
    1120:	06db      	lsls	r3, r3, #27
    1122:	d510      	bpl.n	1146 <_usb_d_dev_in_next+0xee>
		ept->flags.bits.need_zlp = 0;
    1124:	7ce3      	ldrb	r3, [r4, #19]
    1126:	2210      	movs	r2, #16
    1128:	4393      	bics	r3, r2
    112a:	74e3      	strb	r3, [r4, #19]
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    112c:	016a      	lsls	r2, r5, #5
    112e:	4b2e      	ldr	r3, [pc, #184]	; (11e8 <_usb_d_dev_in_next+0x190>)
    1130:	189a      	adds	r2, r3, r2
    1132:	0013      	movs	r3, r2
    1134:	6952      	ldr	r2, [r2, #20]
    1136:	0b92      	lsrs	r2, r2, #14
    1138:	0392      	lsls	r2, r2, #14
    113a:	615a      	str	r2, [r3, #20]
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    113c:	6959      	ldr	r1, [r3, #20]
    113e:	4a2f      	ldr	r2, [pc, #188]	; (11fc <_usb_d_dev_in_next+0x1a4>)
    1140:	400a      	ands	r2, r1
    1142:	615a      	str	r2, [r3, #20]
    1144:	e027      	b.n	1196 <_usb_d_dev_in_next+0x13e>
		ept->flags.bits.need_zlp = 0;
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
		goto _in_tx_exec;
	}
	/* Complete. */
	if (is_ctrl) {
    1146:	2e01      	cmp	r6, #1
    1148:	d106      	bne.n	1158 <_usb_d_dev_in_next+0x100>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    114a:	016d      	lsls	r5, r5, #5
    114c:	4b2c      	ldr	r3, [pc, #176]	; (1200 <_usb_d_dev_in_next+0x1a8>)
    114e:	469c      	mov	ip, r3
    1150:	4465      	add	r5, ip
    1152:	234b      	movs	r3, #75	; 0x4b
    1154:	702b      	strb	r3, [r5, #0]
    1156:	e005      	b.n	1164 <_usb_d_dev_in_next+0x10c>
    1158:	016d      	lsls	r5, r5, #5
    115a:	4b29      	ldr	r3, [pc, #164]	; (1200 <_usb_d_dev_in_next+0x1a8>)
    115c:	469c      	mov	ip, r3
    115e:	4465      	add	r5, ip
    1160:	234a      	movs	r3, #74	; 0x4a
    1162:	702b      	strb	r3, [r5, #0]
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    1164:	8a21      	ldrh	r1, [r4, #16]
    1166:	0003      	movs	r3, r0
    1168:	4013      	ands	r3, r2
    116a:	4299      	cmp	r1, r3
    116c:	d10e      	bne.n	118c <_usb_d_dev_in_next+0x134>
		ept->flags.bits.is_busy = 0;
    116e:	7ce3      	ldrb	r3, [r4, #19]
    1170:	2240      	movs	r2, #64	; 0x40
    1172:	4393      	bics	r3, r2
    1174:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1176:	7ca0      	ldrb	r0, [r4, #18]
    1178:	4b1b      	ldr	r3, [pc, #108]	; (11e8 <_usb_d_dev_in_next+0x190>)
    117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    117c:	68a1      	ldr	r1, [r4, #8]
    117e:	4798      	blx	r3
    1180:	2800      	cmp	r0, #0
    1182:	d12d      	bne.n	11e0 <_usb_d_dev_in_next+0x188>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    1184:	7ce2      	ldrb	r2, [r4, #19]
    1186:	2340      	movs	r3, #64	; 0x40
    1188:	4313      	orrs	r3, r2
    118a:	74e3      	strb	r3, [r4, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    118c:	2100      	movs	r1, #0
    118e:	0020      	movs	r0, r4
    1190:	4b1c      	ldr	r3, [pc, #112]	; (1204 <_usb_d_dev_in_next+0x1ac>)
    1192:	4798      	blx	r3
	return;
    1194:	e024      	b.n	11e0 <_usb_d_dev_in_next+0x188>

_in_tx_exec:
	if (!isr) {
    1196:	2f00      	cmp	r7, #0
    1198:	d109      	bne.n	11ae <_usb_d_dev_in_next+0x156>
		if (is_ctrl) {
    119a:	2e01      	cmp	r6, #1
    119c:	d001      	beq.n	11a2 <_usb_d_dev_in_next+0x14a>
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    119e:	224a      	movs	r2, #74	; 0x4a
    11a0:	e000      	b.n	11a4 <_usb_d_dev_in_next+0x14c>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    11a2:	224e      	movs	r2, #78	; 0x4e
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    11a4:	016b      	lsls	r3, r5, #5
    11a6:	4918      	ldr	r1, [pc, #96]	; (1208 <_usb_d_dev_in_next+0x1b0>)
    11a8:	468c      	mov	ip, r1
    11aa:	4463      	add	r3, ip
    11ac:	701a      	strb	r2, [r3, #0]
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    11ae:	016d      	lsls	r5, r5, #5
    11b0:	4b0f      	ldr	r3, [pc, #60]	; (11f0 <_usb_d_dev_in_next+0x198>)
    11b2:	469c      	mov	ip, r3
    11b4:	4465      	add	r5, ip
    11b6:	2380      	movs	r3, #128	; 0x80
    11b8:	716b      	strb	r3, [r5, #5]
    11ba:	e011      	b.n	11e0 <_usb_d_dev_in_next+0x188>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    11bc:	7ce6      	ldrb	r6, [r4, #19]
    11be:	2307      	movs	r3, #7
    11c0:	401e      	ands	r6, r3
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11c2:	4a0a      	ldr	r2, [pc, #40]	; (11ec <_usb_d_dev_in_next+0x194>)
    11c4:	e765      	b.n	1092 <_usb_d_dev_in_next+0x3a>
	uint8_t            inten    = 0;
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    11c6:	7ce3      	ldrb	r3, [r4, #19]
    11c8:	2607      	movs	r6, #7
    11ca:	401e      	ands	r6, r3
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11cc:	4a07      	ldr	r2, [pc, #28]	; (11ec <_usb_d_dev_in_next+0x194>)
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    11ce:	2000      	movs	r0, #0
    11d0:	e765      	b.n	109e <_usb_d_dev_in_next+0x46>
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11d2:	8a03      	ldrh	r3, [r0, #16]
    11d4:	4a05      	ldr	r2, [pc, #20]	; (11ec <_usb_d_dev_in_next+0x194>)
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *              hw          = USB;
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    11d6:	2000      	movs	r0, #0
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    11d8:	4293      	cmp	r3, r2
    11da:	d000      	beq.n	11de <_usb_d_dev_in_next+0x186>
    11dc:	e752      	b.n	1084 <_usb_d_dev_in_next+0x2c>
    11de:	e7f2      	b.n	11c6 <_usb_d_dev_in_next+0x16e>
			inten = USB_D_BANK1_INT_FLAGS;
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
}
    11e0:	bc04      	pop	{r2}
    11e2:	4690      	mov	r8, r2
    11e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	200002ec 	.word	0x200002ec
    11ec:	000003ff 	.word	0x000003ff
    11f0:	41000100 	.word	0x41000100
    11f4:	00002d51 	.word	0x00002d51
    11f8:	00002e90 	.word	0x00002e90
    11fc:	f0003fff 	.word	0xf0003fff
    1200:	41000108 	.word	0x41000108
    1204:	00000e7d 	.word	0x00000e7d
    1208:	41000109 	.word	0x41000109

0000120c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    120e:	465f      	mov	r7, fp
    1210:	4656      	mov	r6, sl
    1212:	464d      	mov	r5, r9
    1214:	4644      	mov	r4, r8
    1216:	b4f0      	push	{r4, r5, r6, r7}
    1218:	0004      	movs	r4, r0
    121a:	000f      	movs	r7, r1
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    121c:	7c83      	ldrb	r3, [r0, #18]
    121e:	250f      	movs	r5, #15
    1220:	401d      	ands	r5, r3
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1222:	2900      	cmp	r1, #0
    1224:	d00f      	beq.n	1246 <_usb_d_dev_out_next+0x3a>
    1226:	016a      	lsls	r2, r5, #5
    1228:	4b7f      	ldr	r3, [pc, #508]	; (1428 <_usb_d_dev_out_next+0x21c>)
    122a:	189b      	adds	r3, r3, r2
    122c:	685a      	ldr	r2, [r3, #4]
    122e:	0112      	lsls	r2, r2, #4
    1230:	0c92      	lsrs	r2, r2, #18
    1232:	4690      	mov	r8, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1234:	685a      	ldr	r2, [r3, #4]
    1236:	0492      	lsls	r2, r2, #18
    1238:	0c92      	lsrs	r2, r2, #18
    123a:	4691      	mov	r9, r2
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    123c:	8a03      	ldrh	r3, [r0, #16]
    123e:	497b      	ldr	r1, [pc, #492]	; (142c <_usb_d_dev_out_next+0x220>)
    1240:	428b      	cmp	r3, r1
    1242:	d108      	bne.n	1256 <_usb_d_dev_out_next+0x4a>
    1244:	e0c6      	b.n	13d4 <_usb_d_dev_out_next+0x1c8>
    1246:	8a03      	ldrh	r3, [r0, #16]
    1248:	4a78      	ldr	r2, [pc, #480]	; (142c <_usb_d_dev_out_next+0x220>)
    124a:	4293      	cmp	r3, r2
    124c:	d100      	bne.n	1250 <_usb_d_dev_out_next+0x44>
    124e:	e0d1      	b.n	13f4 <_usb_d_dev_out_next+0x1e8>
{
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1250:	2200      	movs	r2, #0
    1252:	4691      	mov	r9, r2
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1254:	4690      	mov	r8, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1256:	3b01      	subs	r3, #1
    1258:	b29e      	uxth	r6, r3
	uint16_t           last_pkt   = last_trans & size_mask;
    125a:	464b      	mov	r3, r9
    125c:	4033      	ands	r3, r6
    125e:	469b      	mov	fp, r3
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1260:	7ce3      	ldrb	r3, [r4, #19]
    1262:	2207      	movs	r2, #7
    1264:	401a      	ands	r2, r3
    1266:	4692      	mov	sl, r2

	if (isr) {
    1268:	2f00      	cmp	r7, #0
    126a:	d005      	beq.n	1278 <_usb_d_dev_out_next+0x6c>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    126c:	016b      	lsls	r3, r5, #5
    126e:	4a70      	ldr	r2, [pc, #448]	; (1430 <_usb_d_dev_out_next+0x224>)
    1270:	4694      	mov	ip, r2
    1272:	4463      	add	r3, ip
    1274:	2201      	movs	r2, #1
    1276:	71da      	strb	r2, [r3, #7]
		_usbd_ep_ack_io_cpt(epn, 0);
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1278:	7ce3      	ldrb	r3, [r4, #19]
    127a:	069b      	lsls	r3, r3, #26
    127c:	d50f      	bpl.n	129e <_usb_d_dev_out_next+0x92>
    127e:	6863      	ldr	r3, [r4, #4]
    1280:	2b00      	cmp	r3, #0
    1282:	d00f      	beq.n	12a4 <_usb_d_dev_out_next+0x98>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1284:	68a2      	ldr	r2, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1286:	6821      	ldr	r1, [r4, #0]
    1288:	1888      	adds	r0, r1, r2
    128a:	1a9b      	subs	r3, r3, r2
    128c:	1c1a      	adds	r2, r3, #0
    128e:	b29b      	uxth	r3, r3
    1290:	455b      	cmp	r3, fp
    1292:	d900      	bls.n	1296 <_usb_d_dev_out_next+0x8a>
    1294:	465a      	mov	r2, fp
    1296:	b292      	uxth	r2, r2
    1298:	68e1      	ldr	r1, [r4, #12]
    129a:	4b66      	ldr	r3, [pc, #408]	; (1434 <_usb_d_dev_out_next+0x228>)
    129c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    129e:	6862      	ldr	r2, [r4, #4]
    12a0:	2a00      	cmp	r2, #0
    12a2:	d11b      	bne.n	12dc <_usb_d_dev_out_next+0xd0>
    12a4:	7ce3      	ldrb	r3, [r4, #19]
    12a6:	06db      	lsls	r3, r3, #27
    12a8:	d400      	bmi.n	12ac <_usb_d_dev_out_next+0xa0>
    12aa:	e0a0      	b.n	13ee <_usb_d_dev_out_next+0x1e2>
		ept->flags.bits.need_zlp  = 0;
    12ac:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    12ae:	2210      	movs	r2, #16
    12b0:	4393      	bics	r3, r2
    12b2:	2220      	movs	r2, #32
    12b4:	4313      	orrs	r3, r2
    12b6:	74e3      	strb	r3, [r4, #19]
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    12b8:	495b      	ldr	r1, [pc, #364]	; (1428 <_usb_d_dev_out_next+0x21c>)
    12ba:	016b      	lsls	r3, r5, #5
    12bc:	68e2      	ldr	r2, [r4, #12]
    12be:	505a      	str	r2, [r3, r1]
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    12c0:	8a22      	ldrh	r2, [r4, #16]
    12c2:	18c9      	adds	r1, r1, r3
    12c4:	6848      	ldr	r0, [r1, #4]
    12c6:	0492      	lsls	r2, r2, #18
    12c8:	0912      	lsrs	r2, r2, #4
    12ca:	4b5b      	ldr	r3, [pc, #364]	; (1438 <_usb_d_dev_out_next+0x22c>)
    12cc:	4003      	ands	r3, r0
    12ce:	4313      	orrs	r3, r2
    12d0:	604b      	str	r3, [r1, #4]
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    12d2:	684b      	ldr	r3, [r1, #4]
    12d4:	0b9b      	lsrs	r3, r3, #14
    12d6:	039b      	lsls	r3, r3, #14
    12d8:	604b      	str	r3, [r1, #4]
    12da:	e063      	b.n	13a4 <_usb_d_dev_out_next+0x198>
		ept->flags.bits.need_zlp  = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    12dc:	2f00      	cmp	r7, #0
    12de:	d00a      	beq.n	12f6 <_usb_d_dev_out_next+0xea>
    12e0:	8a23      	ldrh	r3, [r4, #16]
    12e2:	455b      	cmp	r3, fp
    12e4:	d907      	bls.n	12f6 <_usb_d_dev_out_next+0xea>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    12e6:	7ce3      	ldrb	r3, [r4, #19]
    12e8:	2210      	movs	r2, #16
    12ea:	4393      	bics	r3, r2
    12ec:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    12ee:	68a3      	ldr	r3, [r4, #8]
    12f0:	444b      	add	r3, r9
    12f2:	60a3      	str	r3, [r4, #8]
    12f4:	e03b      	b.n	136e <_usb_d_dev_out_next+0x162>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    12f6:	68a3      	ldr	r3, [r4, #8]
    12f8:	4443      	add	r3, r8
    12fa:	0019      	movs	r1, r3
    12fc:	60a3      	str	r3, [r4, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    12fe:	429a      	cmp	r2, r3
    1300:	d935      	bls.n	136e <_usb_d_dev_out_next+0x162>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    1302:	1ad2      	subs	r2, r2, r3
    1304:	b292      	uxth	r2, r2
			if (ept->flags.bits.use_cache) {
    1306:	7ce3      	ldrb	r3, [r4, #19]
    1308:	069b      	lsls	r3, r3, #26
    130a:	d50a      	bpl.n	1322 <_usb_d_dev_out_next+0x116>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    130c:	8a21      	ldrh	r1, [r4, #16]
    130e:	1c13      	adds	r3, r2, #0
    1310:	428a      	cmp	r2, r1
    1312:	d900      	bls.n	1316 <_usb_d_dev_out_next+0x10a>
    1314:	1c0b      	adds	r3, r1, #0
    1316:	b29a      	uxth	r2, r3
					trans_next = ept->size;
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1318:	68e0      	ldr	r0, [r4, #12]
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    131a:	016b      	lsls	r3, r5, #5
    131c:	4942      	ldr	r1, [pc, #264]	; (1428 <_usb_d_dev_out_next+0x21c>)
    131e:	5058      	str	r0, [r3, r1]
    1320:	e016      	b.n	1350 <_usb_d_dev_out_next+0x144>
					trans_next = ept->size;
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    1322:	8a23      	ldrh	r3, [r4, #16]
    1324:	429a      	cmp	r2, r3
    1326:	d905      	bls.n	1334 <_usb_d_dev_out_next+0x128>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1328:	2380      	movs	r3, #128	; 0x80
    132a:	019b      	lsls	r3, r3, #6
    132c:	429a      	cmp	r2, r3
    132e:	d808      	bhi.n	1342 <_usb_d_dev_out_next+0x136>
						trans_next = USB_D_DEV_TRANS_MAX;
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    1330:	43b2      	bics	r2, r6
    1332:	e008      	b.n	1346 <_usb_d_dev_out_next+0x13a>
					}
				} else if (trans_next < ept->size) {
    1334:	429a      	cmp	r2, r3
    1336:	d206      	bcs.n	1346 <_usb_d_dev_out_next+0x13a>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    1338:	7ce0      	ldrb	r0, [r4, #19]
    133a:	2320      	movs	r3, #32
    133c:	4303      	orrs	r3, r0
    133e:	74e3      	strb	r3, [r4, #19]
    1340:	e001      	b.n	1346 <_usb_d_dev_out_next+0x13a>
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
					if (trans_next > USB_D_DEV_TRANS_MAX) {
						trans_next = USB_D_DEV_TRANS_MAX;
    1342:	2280      	movs	r2, #128	; 0x80
    1344:	0192      	lsls	r2, r2, #6
					}
				} else if (trans_next < ept->size) {
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	1859      	adds	r1, r3, r1
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    134a:	016b      	lsls	r3, r5, #5
    134c:	4836      	ldr	r0, [pc, #216]	; (1428 <_usb_d_dev_out_next+0x21c>)
    134e:	5019      	str	r1, [r3, r0]
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1350:	016b      	lsls	r3, r5, #5
    1352:	4935      	ldr	r1, [pc, #212]	; (1428 <_usb_d_dev_out_next+0x21c>)
    1354:	18c9      	adds	r1, r1, r3
    1356:	6848      	ldr	r0, [r1, #4]
    1358:	0492      	lsls	r2, r2, #18
    135a:	0912      	lsrs	r2, r2, #4
    135c:	4b36      	ldr	r3, [pc, #216]	; (1438 <_usb_d_dev_out_next+0x22c>)
    135e:	4003      	ands	r3, r0
    1360:	4313      	orrs	r3, r2
    1362:	604b      	str	r3, [r1, #4]
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1364:	684b      	ldr	r3, [r1, #4]
    1366:	0b9b      	lsrs	r3, r3, #14
    1368:	039b      	lsls	r3, r3, #14
    136a:	604b      	str	r3, [r1, #4]
    136c:	e01a      	b.n	13a4 <_usb_d_dev_out_next+0x198>
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
			goto _out_rx_exec;
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    136e:	4653      	mov	r3, sl
    1370:	2b01      	cmp	r3, #1
    1372:	d106      	bne.n	1382 <_usb_d_dev_out_next+0x176>
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1374:	016b      	lsls	r3, r5, #5
    1376:	4a31      	ldr	r2, [pc, #196]	; (143c <_usb_d_dev_out_next+0x230>)
    1378:	4694      	mov	ip, r2
    137a:	4463      	add	r3, ip
    137c:	222d      	movs	r2, #45	; 0x2d
    137e:	701a      	strb	r2, [r3, #0]
    1380:	e005      	b.n	138e <_usb_d_dev_out_next+0x182>
    1382:	016b      	lsls	r3, r5, #5
    1384:	4a2d      	ldr	r2, [pc, #180]	; (143c <_usb_d_dev_out_next+0x230>)
    1386:	4694      	mov	ip, r2
    1388:	4463      	add	r3, ip
    138a:	2225      	movs	r2, #37	; 0x25
    138c:	701a      	strb	r2, [r3, #0]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    138e:	2d00      	cmp	r5, #0
    1390:	d103      	bne.n	139a <_usb_d_dev_out_next+0x18e>
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    1392:	016d      	lsls	r5, r5, #5
    1394:	4b24      	ldr	r3, [pc, #144]	; (1428 <_usb_d_dev_out_next+0x21c>)
    1396:	68e2      	ldr	r2, [r4, #12]
    1398:	50ea      	str	r2, [r5, r3]
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    139a:	2100      	movs	r1, #0
    139c:	0020      	movs	r0, r4
    139e:	4b28      	ldr	r3, [pc, #160]	; (1440 <_usb_d_dev_out_next+0x234>)
    13a0:	4798      	blx	r3
	return;
    13a2:	e03a      	b.n	141a <_usb_d_dev_out_next+0x20e>

_out_rx_exec:
	if (!isr) {
    13a4:	2f00      	cmp	r7, #0
    13a6:	d10e      	bne.n	13c6 <_usb_d_dev_out_next+0x1ba>
			_usbd_ep_clear_bank_status(epn, 1);
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    13a8:	2225      	movs	r2, #37	; 0x25
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
	return;

_out_rx_exec:
	if (!isr) {
		if (is_ctrl) {
    13aa:	4653      	mov	r3, sl
    13ac:	2b01      	cmp	r3, #1
    13ae:	d105      	bne.n	13bc <_usb_d_dev_out_next+0x1b0>
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
    13b0:	016b      	lsls	r3, r5, #5
    13b2:	4a1d      	ldr	r2, [pc, #116]	; (1428 <_usb_d_dev_out_next+0x21c>)
    13b4:	18d3      	adds	r3, r2, r3
    13b6:	2200      	movs	r2, #0
    13b8:	769a      	strb	r2, [r3, #26]
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    13ba:	322d      	adds	r2, #45	; 0x2d
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    13bc:	016b      	lsls	r3, r5, #5
    13be:	4921      	ldr	r1, [pc, #132]	; (1444 <_usb_d_dev_out_next+0x238>)
    13c0:	468c      	mov	ip, r1
    13c2:	4463      	add	r3, ip
    13c4:	701a      	strb	r2, [r3, #0]
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    13c6:	016d      	lsls	r5, r5, #5
    13c8:	4b19      	ldr	r3, [pc, #100]	; (1430 <_usb_d_dev_out_next+0x224>)
    13ca:	469c      	mov	ip, r3
    13cc:	4465      	add	r5, ip
    13ce:	2340      	movs	r3, #64	; 0x40
    13d0:	712b      	strb	r3, [r5, #4]
    13d2:	e022      	b.n	141a <_usb_d_dev_out_next+0x20e>
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t           last_pkt   = last_trans & size_mask;
    13d4:	0592      	lsls	r2, r2, #22
    13d6:	0d93      	lsrs	r3, r2, #22
    13d8:	469b      	mov	fp, r3
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13da:	7cc3      	ldrb	r3, [r0, #19]
    13dc:	2207      	movs	r2, #7
    13de:	401a      	ands	r2, r3
    13e0:	4692      	mov	sl, r2
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    13e2:	4e12      	ldr	r6, [pc, #72]	; (142c <_usb_d_dev_out_next+0x220>)
    13e4:	e742      	b.n	126c <_usb_d_dev_out_next+0x60>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
		ept->trans_count += last_trans;
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    13e6:	68a3      	ldr	r3, [r4, #8]
    13e8:	4443      	add	r3, r8
    13ea:	60a3      	str	r3, [r4, #8]
    13ec:	e7bf      	b.n	136e <_usb_d_dev_out_next+0x162>
		ept->flags.bits.need_zlp  = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    13ee:	2f00      	cmp	r7, #0
    13f0:	d10e      	bne.n	1410 <_usb_d_dev_out_next+0x204>
    13f2:	e7f8      	b.n	13e6 <_usb_d_dev_out_next+0x1da>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t           last_pkt   = last_trans & size_mask;
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13f4:	7cc3      	ldrb	r3, [r0, #19]
    13f6:	2207      	movs	r2, #7
    13f8:	401a      	ands	r2, r3
    13fa:	4692      	mov	sl, r2
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
	uint16_t           last_pkt   = last_trans & size_mask;
    13fc:	2300      	movs	r3, #0
    13fe:	469b      	mov	fp, r3
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1400:	4e0a      	ldr	r6, [pc, #40]	; (142c <_usb_d_dev_out_next+0x220>)
{
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1402:	4699      	mov	r9, r3
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
	Usb *              hw         = USB;
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1404:	4698      	mov	r8, r3
    1406:	e737      	b.n	1278 <_usb_d_dev_out_next+0x6c>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
		ept->trans_count += last_trans;
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    1408:	68a3      	ldr	r3, [r4, #8]
    140a:	4443      	add	r3, r8
    140c:	60a3      	str	r3, [r4, #8]
    140e:	e7ae      	b.n	136e <_usb_d_dev_out_next+0x162>
		ept->flags.bits.need_zlp  = 0;
		ept->flags.bits.use_cache = 1;
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
		goto _out_rx_exec;
	} else if (isr && last_pkt < ept->size) {
    1410:	8a23      	ldrh	r3, [r4, #16]
    1412:	455b      	cmp	r3, fp
    1414:	d900      	bls.n	1418 <_usb_d_dev_out_next+0x20c>
    1416:	e766      	b.n	12e6 <_usb_d_dev_out_next+0xda>
    1418:	e7f6      	b.n	1408 <_usb_d_dev_out_next+0x1fc>
			inten = USB_D_BANK0_INT_FLAGS;
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
}
    141a:	bc3c      	pop	{r2, r3, r4, r5}
    141c:	4690      	mov	r8, r2
    141e:	4699      	mov	r9, r3
    1420:	46a2      	mov	sl, r4
    1422:	46ab      	mov	fp, r5
    1424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	200002ec 	.word	0x200002ec
    142c:	000003ff 	.word	0x000003ff
    1430:	41000100 	.word	0x41000100
    1434:	00002d51 	.word	0x00002d51
    1438:	f0003fff 	.word	0xf0003fff
    143c:	41000108 	.word	0x41000108
    1440:	00000e7d 	.word	0x00000e7d
    1444:	41000109 	.word	0x41000109

00001448 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    1448:	b5f0      	push	{r4, r5, r6, r7, lr}
    144a:	4647      	mov	r7, r8
    144c:	b480      	push	{r7}
    144e:	4d0d      	ldr	r5, [pc, #52]	; (1484 <_usb_d_dev_reset_epts+0x3c>)
    1450:	002c      	movs	r4, r5
    1452:	347c      	adds	r4, #124	; 0x7c
    1454:	23a6      	movs	r3, #166	; 0xa6
    1456:	009b      	lsls	r3, r3, #2
    1458:	469c      	mov	ip, r3
    145a:	4465      	add	r5, ip
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    145c:	4b0a      	ldr	r3, [pc, #40]	; (1488 <_usb_d_dev_reset_epts+0x40>)
    145e:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1460:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1462:	2600      	movs	r6, #0
 */
static void _usb_d_dev_reset_epts(void)
{
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1464:	2103      	movs	r1, #3
    1466:	0020      	movs	r0, r4
    1468:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    146a:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    146c:	74e6      	strb	r6, [r4, #19]
    146e:	3414      	adds	r4, #20
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    1470:	42ac      	cmp	r4, r5
    1472:	d1f7      	bne.n	1464 <_usb_d_dev_reset_epts+0x1c>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
		dev_inst.ep[i].ep       = 0xFF;
		dev_inst.ep[i].flags.u8 = 0;
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1474:	2260      	movs	r2, #96	; 0x60
    1476:	2100      	movs	r1, #0
    1478:	4802      	ldr	r0, [pc, #8]	; (1484 <_usb_d_dev_reset_epts+0x3c>)
    147a:	4b04      	ldr	r3, [pc, #16]	; (148c <_usb_d_dev_reset_epts+0x44>)
    147c:	4798      	blx	r3
}
    147e:	bc04      	pop	{r2}
    1480:	4690      	mov	r8, r2
    1482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1484:	200002ec 	.word	0x200002ec
    1488:	00000e7d 	.word	0x00000e7d
    148c:	00002d63 	.word	0x00002d63

00001490 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void *unused)
{
    1490:	b5f0      	push	{r4, r5, r6, r7, lr}
    1492:	4647      	mov	r7, r8
    1494:	b480      	push	{r7}
	Usb *   hw = USB;
	uint8_t i;
	(void)unused;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1496:	2382      	movs	r3, #130	; 0x82
    1498:	05db      	lsls	r3, r3, #23
    149a:	8c1e      	ldrh	r6, [r3, #32]
    149c:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    149e:	2e00      	cmp	r6, #0
    14a0:	d000      	beq.n	14a4 <_usb_d_dev_handler+0x14>
    14a2:	e088      	b.n	15b6 <_usb_d_dev_handler+0x126>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    14a4:	001a      	movs	r2, r3
    14a6:	8b9b      	ldrh	r3, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    14a8:	8b12      	ldrh	r2, [r2, #24]
 */
static inline bool _usb_d_dev_handle_nep(void)
{
	bool     rc    = true;
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    14aa:	4013      	ands	r3, r2

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    14ac:	075a      	lsls	r2, r3, #29
    14ae:	d507      	bpl.n	14c0 <_usb_d_dev_handler+0x30>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    14b0:	2204      	movs	r2, #4
    14b2:	2382      	movs	r3, #130	; 0x82
    14b4:	05db      	lsls	r3, r3, #23
    14b6:	839a      	strh	r2, [r3, #28]
 */
static inline void _usb_d_dev_sof(void)
{
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
	dev_inst.callbacks.sof();
    14b8:	4b7e      	ldr	r3, [pc, #504]	; (16b4 <_usb_d_dev_handler+0x224>)
    14ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    14bc:	4798      	blx	r3
    14be:	e0f5      	b.n	16ac <_usb_d_dev_handler+0x21c>

	if (flags & USB_DEVICE_INTFLAG_SOF) {
		_usb_d_dev_sof();
		return true;
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    14c0:	059a      	lsls	r2, r3, #22
    14c2:	d524      	bpl.n	150e <_usb_d_dev_handler+0x7e>
    14c4:	2382      	movs	r3, #130	; 0x82
    14c6:	05db      	lsls	r3, r3, #23
    14c8:	4a7b      	ldr	r2, [pc, #492]	; (16b8 <_usb_d_dev_handler+0x228>)
    14ca:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    14cc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    14ce:	3a92      	subs	r2, #146	; 0x92
    14d0:	3aff      	subs	r2, #255	; 0xff
    14d2:	831a      	strh	r2, [r3, #24]
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    14d4:	4b77      	ldr	r3, [pc, #476]	; (16b4 <_usb_d_dev_handler+0x224>)
    14d6:	891b      	ldrh	r3, [r3, #8]
    14d8:	071b      	lsls	r3, r3, #28
    14da:	0f1b      	lsrs	r3, r3, #28
    14dc:	2b03      	cmp	r3, #3
    14de:	d008      	beq.n	14f2 <_usb_d_dev_handler+0x62>
    14e0:	4b74      	ldr	r3, [pc, #464]	; (16b4 <_usb_d_dev_handler+0x224>)
    14e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    14e4:	071b      	lsls	r3, r3, #28
    14e6:	0f1b      	lsrs	r3, r3, #28
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
	uint8_t  i;
	uint32_t lpm_variable = 0;
    14e8:	2100      	movs	r1, #0
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    14ea:	2b03      	cmp	r3, #3
    14ec:	d10a      	bne.n	1504 <_usb_d_dev_handler+0x74>
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    14ee:	3b02      	subs	r3, #2
    14f0:	e000      	b.n	14f4 <_usb_d_dev_handler+0x64>
    14f2:	2300      	movs	r3, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    14f4:	015b      	lsls	r3, r3, #5
    14f6:	4a6f      	ldr	r2, [pc, #444]	; (16b4 <_usb_d_dev_handler+0x224>)
    14f8:	18d3      	adds	r3, r2, r3
    14fa:	8919      	ldrh	r1, [r3, #8]
    14fc:	0449      	lsls	r1, r1, #17
    14fe:	0d49      	lsrs	r1, r1, #21
			/* Clear */
			bank->EXTREG.reg = 0;
    1500:	2200      	movs	r2, #0
    1502:	811a      	strh	r2, [r3, #8]
			break;
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1504:	4b6b      	ldr	r3, [pc, #428]	; (16b4 <_usb_d_dev_handler+0x224>)
    1506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1508:	2003      	movs	r0, #3
    150a:	4798      	blx	r3
    150c:	e0ce      	b.n	16ac <_usb_d_dev_handler+0x21c>
		_usb_d_dev_sof();
		return true;
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    150e:	061a      	lsls	r2, r3, #24
    1510:	d509      	bpl.n	1526 <_usb_d_dev_handler+0x96>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1512:	2280      	movs	r2, #128	; 0x80
    1514:	2382      	movs	r3, #130	; 0x82
    1516:	05db      	lsls	r3, r3, #23
    1518:	839a      	strh	r2, [r3, #28]
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    151a:	4b66      	ldr	r3, [pc, #408]	; (16b4 <_usb_d_dev_handler+0x224>)
    151c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    151e:	2100      	movs	r1, #0
    1520:	2005      	movs	r0, #5
    1522:	4798      	blx	r3
    1524:	e0c2      	b.n	16ac <_usb_d_dev_handler+0x21c>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1526:	2270      	movs	r2, #112	; 0x70
    1528:	421a      	tst	r2, r3
    152a:	d01e      	beq.n	156a <_usb_d_dev_handler+0xda>
    152c:	2382      	movs	r3, #130	; 0x82
    152e:	05db      	lsls	r3, r3, #23
    1530:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1532:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1534:	4a60      	ldr	r2, [pc, #384]	; (16b8 <_usb_d_dev_handler+0x228>)
    1536:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    1538:	4b60      	ldr	r3, [pc, #384]	; (16bc <_usb_d_dev_handler+0x22c>)
    153a:	8b1b      	ldrh	r3, [r3, #24]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(OSCCTRL)) {
    153c:	075b      	lsls	r3, r3, #29
    153e:	d507      	bpl.n	1550 <_usb_d_dev_handler+0xc0>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1540:	495e      	ldr	r1, [pc, #376]	; (16bc <_usb_d_dev_handler+0x22c>)
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1542:	2290      	movs	r2, #144	; 0x90
    1544:	0112      	lsls	r2, r2, #4
    1546:	68cb      	ldr	r3, [r1, #12]
    1548:	4013      	ands	r3, r2
    154a:	4293      	cmp	r3, r2
    154c:	d1fb      	bne.n	1546 <_usb_d_dev_handler+0xb6>
    154e:	e006      	b.n	155e <_usb_d_dev_handler+0xce>
    1550:	495a      	ldr	r1, [pc, #360]	; (16bc <_usb_d_dev_handler+0x22c>)
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1552:	2280      	movs	r2, #128	; 0x80
    1554:	0052      	lsls	r2, r2, #1
    1556:	68cb      	ldr	r3, [r1, #12]
    1558:	4013      	ands	r3, r2
    155a:	4293      	cmp	r3, r2
    155c:	d1fb      	bne.n	1556 <_usb_d_dev_handler+0xc6>
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    155e:	4b55      	ldr	r3, [pc, #340]	; (16b4 <_usb_d_dev_handler+0x224>)
    1560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1562:	2100      	movs	r1, #0
    1564:	2002      	movs	r0, #2
    1566:	4798      	blx	r3
    1568:	e0a0      	b.n	16ac <_usb_d_dev_handler+0x21c>
		_usb_d_dev_lpmsusp();
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
		_usb_d_dev_wakeup();
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    156a:	071a      	lsls	r2, r3, #28
    156c:	d513      	bpl.n	1596 <_usb_d_dev_handler+0x106>

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    156e:	2382      	movs	r3, #130	; 0x82
    1570:	05db      	lsls	r3, r3, #23
    1572:	2100      	movs	r1, #0
    1574:	2280      	movs	r2, #128	; 0x80
    1576:	0052      	lsls	r2, r2, #1
    1578:	5499      	strb	r1, [r3, r2]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    157a:	3af8      	subs	r2, #248	; 0xf8
    157c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    157e:	3268      	adds	r2, #104	; 0x68
    1580:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1582:	4a4d      	ldr	r2, [pc, #308]	; (16b8 <_usb_d_dev_handler+0x228>)
    1584:	831a      	strh	r2, [r3, #24]

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);

	_usb_d_dev_reset_epts();
    1586:	4b4e      	ldr	r3, [pc, #312]	; (16c0 <_usb_d_dev_handler+0x230>)
    1588:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    158a:	4b4a      	ldr	r3, [pc, #296]	; (16b4 <_usb_d_dev_handler+0x224>)
    158c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    158e:	2100      	movs	r1, #0
    1590:	2001      	movs	r0, #1
    1592:	4798      	blx	r3
    1594:	e08a      	b.n	16ac <_usb_d_dev_handler+0x21c>
		_usb_d_dev_ramerr();
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
		_usb_d_dev_wakeup();
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
		_usb_d_dev_reset();
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1596:	07db      	lsls	r3, r3, #31
    1598:	d50d      	bpl.n	15b6 <_usb_d_dev_handler+0x126>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
}

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    159a:	2382      	movs	r3, #130	; 0x82
    159c:	05db      	lsls	r3, r3, #23
    159e:	4a46      	ldr	r2, [pc, #280]	; (16b8 <_usb_d_dev_handler+0x228>)
    15a0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    15a2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    15a4:	3a92      	subs	r2, #146	; 0x92
    15a6:	3aff      	subs	r2, #255	; 0xff
    15a8:	831a      	strh	r2, [r3, #24]
{
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    15aa:	4b42      	ldr	r3, [pc, #264]	; (16b4 <_usb_d_dev_handler+0x224>)
    15ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    15ae:	2100      	movs	r1, #0
    15b0:	2004      	movs	r0, #4
    15b2:	4798      	blx	r3
    15b4:	e07a      	b.n	16ac <_usb_d_dev_handler+0x21c>
    15b6:	4c3f      	ldr	r4, [pc, #252]	; (16b4 <_usb_d_dev_handler+0x224>)
    15b8:	347c      	adds	r4, #124	; 0x7c
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
	uint8_t  i;
	uint32_t lpm_variable = 0;
    15ba:	2500      	movs	r5, #0
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
	flags &= mask;
	if (flags) {
		if (!_usb_d_dev_ep_is_busy(ept)) {
    15bc:	4b3d      	ldr	r3, [pc, #244]	; (16b4 <_usb_d_dev_handler+0x224>)
    15be:	4698      	mov	r8, r3
    15c0:	0020      	movs	r0, r4
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
		if (ept->ep == 0xFF) {
    15c2:	7ca3      	ldrb	r3, [r4, #18]
    15c4:	2bff      	cmp	r3, #255	; 0xff
    15c6:	d06d      	beq.n	16a4 <_usb_d_dev_handler+0x214>
	Usb *hw = USB;

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);

	if (!(epint & (1u << epn))) {
    15c8:	210f      	movs	r1, #15
    15ca:	400b      	ands	r3, r1
    15cc:	390e      	subs	r1, #14
    15ce:	4099      	lsls	r1, r3
    15d0:	420e      	tst	r6, r1
    15d2:	d067      	beq.n	16a4 <_usb_d_dev_handler+0x214>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    15d4:	0159      	lsls	r1, r3, #5
    15d6:	4f3b      	ldr	r7, [pc, #236]	; (16c4 <_usb_d_dev_handler+0x234>)
    15d8:	46bc      	mov	ip, r7
    15da:	4461      	add	r1, ip
    15dc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    15de:	015b      	lsls	r3, r3, #5
    15e0:	4f39      	ldr	r7, [pc, #228]	; (16c8 <_usb_d_dev_handler+0x238>)
    15e2:	46bc      	mov	ip, r7
    15e4:	4463      	add	r3, ip
    15e6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    15e8:	400b      	ands	r3, r1
	if (flags) {
    15ea:	d05b      	beq.n	16a4 <_usb_d_dev_handler+0x214>
		if (!_usb_d_dev_ep_is_busy(ept)) {
    15ec:	00a9      	lsls	r1, r5, #2
    15ee:	194a      	adds	r2, r1, r5
    15f0:	0092      	lsls	r2, r2, #2
    15f2:	4442      	add	r2, r8
    15f4:	3278      	adds	r2, #120	; 0x78
    15f6:	7dd2      	ldrb	r2, [r2, #23]
    15f8:	0651      	lsls	r1, r2, #25
    15fa:	d410      	bmi.n	161e <_usb_d_dev_handler+0x18e>
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    15fc:	06da      	lsls	r2, r3, #27
    15fe:	d502      	bpl.n	1606 <_usb_d_dev_handler+0x176>
		_usb_d_dev_handle_setup(ept);
    1600:	4b32      	ldr	r3, [pc, #200]	; (16cc <_usb_d_dev_handler+0x23c>)
    1602:	4798      	blx	r3
    1604:	e04e      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1606:	065a      	lsls	r2, r3, #25
    1608:	d503      	bpl.n	1612 <_usb_d_dev_handler+0x182>
		_usb_d_dev_handle_stall(ept, 1);
    160a:	2101      	movs	r1, #1
    160c:	4b30      	ldr	r3, [pc, #192]	; (16d0 <_usb_d_dev_handler+0x240>)
    160e:	4798      	blx	r3
    1610:	e048      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1612:	069b      	lsls	r3, r3, #26
    1614:	d546      	bpl.n	16a4 <_usb_d_dev_handler+0x214>
		_usb_d_dev_handle_stall(ept, 0);
    1616:	2100      	movs	r1, #0
    1618:	4b2d      	ldr	r3, [pc, #180]	; (16d0 <_usb_d_dev_handler+0x240>)
    161a:	4798      	blx	r3
    161c:	e042      	b.n	16a4 <_usb_d_dev_handler+0x214>
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
	flags &= mask;
	if (flags) {
		if (!_usb_d_dev_ep_is_busy(ept)) {
			_usb_d_dev_trans_setup_isr(ept, flags);
		} else if (_usb_d_dev_ep_is_in(ept)) {
    161e:	09d1      	lsrs	r1, r2, #7
    1620:	d020      	beq.n	1664 <_usb_d_dev_handler+0x1d4>
{
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1622:	0659      	lsls	r1, r3, #25
    1624:	d503      	bpl.n	162e <_usb_d_dev_handler+0x19e>
		_usb_d_dev_handle_stall(ept, 1);
    1626:	2101      	movs	r1, #1
    1628:	4b29      	ldr	r3, [pc, #164]	; (16d0 <_usb_d_dev_handler+0x240>)
    162a:	4798      	blx	r3
    162c:	e03a      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    162e:	0719      	lsls	r1, r3, #28
    1630:	d503      	bpl.n	163a <_usb_d_dev_handler+0x1aa>
		_usb_d_dev_handle_trfail(ept, 1);
    1632:	2101      	movs	r1, #1
    1634:	4b27      	ldr	r3, [pc, #156]	; (16d4 <_usb_d_dev_handler+0x244>)
    1636:	4798      	blx	r3
    1638:	e034      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    163a:	0799      	lsls	r1, r3, #30
    163c:	d503      	bpl.n	1646 <_usb_d_dev_handler+0x1b6>
		_usb_d_dev_in_next(ept, true);
    163e:	2101      	movs	r1, #1
    1640:	4b25      	ldr	r3, [pc, #148]	; (16d8 <_usb_d_dev_handler+0x248>)
    1642:	4798      	blx	r3
    1644:	e02e      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1646:	2107      	movs	r1, #7
    1648:	400a      	ands	r2, r1
    164a:	2a01      	cmp	r2, #1
    164c:	d12a      	bne.n	16a4 <_usb_d_dev_handler+0x214>
		/* Check OUT NAK
		 * Check SETUP
		 */
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    164e:	075a      	lsls	r2, r3, #29
    1650:	d503      	bpl.n	165a <_usb_d_dev_handler+0x1ca>
			_usb_d_dev_handle_trfail(ept, 0);
    1652:	2100      	movs	r1, #0
    1654:	4b1f      	ldr	r3, [pc, #124]	; (16d4 <_usb_d_dev_handler+0x244>)
    1656:	4798      	blx	r3
    1658:	e024      	b.n	16a4 <_usb_d_dev_handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    165a:	06db      	lsls	r3, r3, #27
    165c:	d522      	bpl.n	16a4 <_usb_d_dev_handler+0x214>
			_usb_d_dev_handle_setup(ept);
    165e:	4b1b      	ldr	r3, [pc, #108]	; (16cc <_usb_d_dev_handler+0x23c>)
    1660:	4798      	blx	r3
    1662:	e01f      	b.n	16a4 <_usb_d_dev_handler+0x214>
{
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1664:	0699      	lsls	r1, r3, #26
    1666:	d503      	bpl.n	1670 <_usb_d_dev_handler+0x1e0>
		_usb_d_dev_handle_stall(ept, 0);
    1668:	2100      	movs	r1, #0
    166a:	4b19      	ldr	r3, [pc, #100]	; (16d0 <_usb_d_dev_handler+0x240>)
    166c:	4798      	blx	r3
    166e:	e019      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1670:	0759      	lsls	r1, r3, #29
    1672:	d503      	bpl.n	167c <_usb_d_dev_handler+0x1ec>
		_usb_d_dev_handle_trfail(ept, 0);
    1674:	2100      	movs	r1, #0
    1676:	4b17      	ldr	r3, [pc, #92]	; (16d4 <_usb_d_dev_handler+0x244>)
    1678:	4798      	blx	r3
    167a:	e013      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    167c:	07d9      	lsls	r1, r3, #31
    167e:	d503      	bpl.n	1688 <_usb_d_dev_handler+0x1f8>
		_usb_d_dev_out_next(ept, true);
    1680:	2101      	movs	r1, #1
    1682:	4b16      	ldr	r3, [pc, #88]	; (16dc <_usb_d_dev_handler+0x24c>)
    1684:	4798      	blx	r3
    1686:	e00d      	b.n	16a4 <_usb_d_dev_handler+0x214>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1688:	2107      	movs	r1, #7
    168a:	400a      	ands	r2, r1
    168c:	2a01      	cmp	r2, #1
    168e:	d109      	bne.n	16a4 <_usb_d_dev_handler+0x214>
		/* Check IN NAK
		 * Check SETUP
		 */
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1690:	071a      	lsls	r2, r3, #28
    1692:	d503      	bpl.n	169c <_usb_d_dev_handler+0x20c>
			_usb_d_dev_handle_trfail(ept, 1);
    1694:	3906      	subs	r1, #6
    1696:	4b0f      	ldr	r3, [pc, #60]	; (16d4 <_usb_d_dev_handler+0x244>)
    1698:	4798      	blx	r3
    169a:	e003      	b.n	16a4 <_usb_d_dev_handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    169c:	06db      	lsls	r3, r3, #27
    169e:	d501      	bpl.n	16a4 <_usb_d_dev_handler+0x214>
			_usb_d_dev_handle_setup(ept);
    16a0:	4b0a      	ldr	r3, [pc, #40]	; (16cc <_usb_d_dev_handler+0x23c>)
    16a2:	4798      	blx	r3
    16a4:	3501      	adds	r5, #1
    16a6:	3414      	adds	r4, #20
		if (_usb_d_dev_handle_nep()) {
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    16a8:	2d1b      	cmp	r5, #27
    16aa:	d189      	bne.n	15c0 <_usb_d_dev_handler+0x130>
		if (ept->ep == 0xFF) {
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
	}
}
    16ac:	bc04      	pop	{r2}
    16ae:	4690      	mov	r8, r2
    16b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	200002ec 	.word	0x200002ec
    16b8:	00000201 	.word	0x00000201
    16bc:	40000c00 	.word	0x40000c00
    16c0:	00001449 	.word	0x00001449
    16c4:	41000100 	.word	0x41000100
    16c8:	41000109 	.word	0x41000109
    16cc:	00000ded 	.word	0x00000ded
    16d0:	00000ea5 	.word	0x00000ea5
    16d4:	00000f49 	.word	0x00000f49
    16d8:	00001059 	.word	0x00001059
    16dc:	0000120d 	.word	0x0000120d

000016e0 <_usb_d_dev_init>:
	(void)unused1;
	return false;
}

int32_t _usb_d_dev_init(void)
{
    16e0:	b510      	push	{r4, lr}
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16e2:	2182      	movs	r1, #130	; 0x82
    16e4:	05c9      	lsls	r1, r1, #23
    16e6:	2201      	movs	r2, #1
    16e8:	788b      	ldrb	r3, [r1, #2]
    16ea:	4213      	tst	r3, r2
    16ec:	d1fc      	bne.n	16e8 <_usb_d_dev_init+0x8>
    16ee:	2182      	movs	r1, #130	; 0x82
    16f0:	05c9      	lsls	r1, r1, #23
    16f2:	2203      	movs	r2, #3
    16f4:	788b      	ldrb	r3, [r1, #2]
    16f6:	4213      	tst	r3, r2
    16f8:	d1fc      	bne.n	16f4 <_usb_d_dev_init+0x14>

static inline bool hri_usbdevice_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    16fa:	2382      	movs	r3, #130	; 0x82
    16fc:	05db      	lsls	r3, r3, #23
    16fe:	781b      	ldrb	r3, [r3, #0]
	    0,
	    0 /* Reserved */
	};

	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
    1700:	079b      	lsls	r3, r3, #30
    1702:	d442      	bmi.n	178a <_usb_d_dev_init+0xaa>
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1704:	2182      	movs	r1, #130	; 0x82
    1706:	05c9      	lsls	r1, r1, #23
    1708:	2201      	movs	r2, #1
    170a:	788b      	ldrb	r3, [r1, #2]
    170c:	4213      	tst	r3, r2
    170e:	d1fc      	bne.n	170a <_usb_d_dev_init+0x2a>

static inline void hri_usbdevice_set_CTRLA_SWRST_bit(const void *const hw)
{
	USB_CRITICAL_SECTION_ENTER();
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	((Usb *)hw)->DEVICE.CTRLA.reg |= USB_CTRLA_SWRST;
    1710:	2282      	movs	r2, #130	; 0x82
    1712:	05d2      	lsls	r2, r2, #23
    1714:	7811      	ldrb	r1, [r2, #0]
    1716:	2301      	movs	r3, #1
    1718:	430b      	orrs	r3, r1
    171a:	7013      	strb	r3, [r2, #0]
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usbdevice_wait_for_sync(const void *const hw, hri_usbdevice_syncbusy_reg_t reg)
{
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    171c:	0011      	movs	r1, r2
    171e:	2201      	movs	r2, #1
    1720:	788b      	ldrb	r3, [r1, #2]
    1722:	4213      	tst	r3, r2
    1724:	d1fc      	bne.n	1720 <_usb_d_dev_init+0x40>
		return ERR_DENIED;
	}
	hri_usbdevice_set_CTRLA_SWRST_bit(hw);
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1726:	4b1a      	ldr	r3, [pc, #104]	; (1790 <_usb_d_dev_init+0xb0>)
    1728:	4a1a      	ldr	r2, [pc, #104]	; (1794 <_usb_d_dev_init+0xb4>)
    172a:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    172c:	66da      	str	r2, [r3, #108]	; 0x6c

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    172e:	671a      	str	r2, [r3, #112]	; 0x70
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1730:	675a      	str	r2, [r3, #116]	; 0x74
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1732:	679a      	str	r2, [r3, #120]	; 0x78

	_usb_d_dev_reset_epts();
    1734:	4b18      	ldr	r3, [pc, #96]	; (1798 <_usb_d_dev_init+0xb8>)
    1736:	4798      	blx	r3
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1738:	4b18      	ldr	r3, [pc, #96]	; (179c <_usb_d_dev_init+0xbc>)
    173a:	681b      	ldr	r3, [r3, #0]
#define NVM_USB_PAD_TRANSP_POS 50
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
    173c:	0b58      	lsrs	r0, r3, #13
    173e:	221f      	movs	r2, #31
    1740:	4010      	ands	r0, r2
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
    1742:	0c99      	lsrs	r1, r3, #18
    1744:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1746:	019b      	lsls	r3, r3, #6
    1748:	0f5b      	lsrs	r3, r3, #29
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    174a:	281f      	cmp	r0, #31
    174c:	d100      	bne.n	1750 <_usb_d_dev_init+0x70>
		pad_transn = 5;
    174e:	381a      	subs	r0, #26
	}
	if (pad_transp == 0x1F) {
    1750:	2a1f      	cmp	r2, #31
    1752:	d100      	bne.n	1756 <_usb_d_dev_init+0x76>
		pad_transp = 29;
    1754:	3a02      	subs	r2, #2
	}
	if (pad_trim == 0x7) {
    1756:	2b07      	cmp	r3, #7
    1758:	d100      	bne.n	175c <_usb_d_dev_init+0x7c>
		pad_trim = 5;
    175a:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    175c:	0180      	lsls	r0, r0, #6
    175e:	4302      	orrs	r2, r0
    1760:	031b      	lsls	r3, r3, #12
    1762:	4313      	orrs	r3, r2
    1764:	2282      	movs	r2, #130	; 0x82
    1766:	05d2      	lsls	r2, r2, #23
    1768:	8513      	strh	r3, [r2, #40]	; 0x28
}

static inline void hri_usbdevice_write_CTRLA_reg(const void *const hw, hri_usbdevice_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    176a:	2304      	movs	r3, #4
    176c:	7013      	strb	r3, [r2, #0]
	_usb_d_dev_reset_epts();

	_usb_d_dev_load_calib();

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    176e:	4908      	ldr	r1, [pc, #32]	; (1790 <_usb_d_dev_init+0xb0>)
}

static inline void hri_usbdevice_write_DESCADD_reg(const void *const hw, hri_usbdevice_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    1770:	6251      	str	r1, [r2, #36]	; 0x24
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1772:	3b03      	subs	r3, #3
    1774:	8113      	strh	r3, [r2, #8]
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);

	dev_inst.irq.handler   = _usb_d_dev_handler;
    1776:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <_usb_d_dev_init+0xc0>)
    1778:	660b      	str	r3, [r1, #96]	; 0x60
	dev_inst.irq.parameter = NULL;
    177a:	2300      	movs	r3, #0
    177c:	664b      	str	r3, [r1, #100]	; 0x64

	_irq_register(USB_IRQn, &dev_inst.irq);
    177e:	3160      	adds	r1, #96	; 0x60
    1780:	2006      	movs	r0, #6
    1782:	4b08      	ldr	r3, [pc, #32]	; (17a4 <_usb_d_dev_init+0xc4>)
    1784:	4798      	blx	r3

	return ERR_NONE;
    1786:	2000      	movs	r0, #0
    1788:	e001      	b.n	178e <_usb_d_dev_init+0xae>
	    0 /* Reserved */
	};

	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
	if (hri_usbdevice_get_CTRLA_ENABLE_bit(hw)) {
		return ERR_DENIED;
    178a:	2011      	movs	r0, #17
    178c:	4240      	negs	r0, r0
	dev_inst.irq.parameter = NULL;

	_irq_register(USB_IRQn, &dev_inst.irq);

	return ERR_NONE;
}
    178e:	bd10      	pop	{r4, pc}
    1790:	200002ec 	.word	0x200002ec
    1794:	00000e79 	.word	0x00000e79
    1798:	00001449 	.word	0x00001449
    179c:	0080601c 	.word	0x0080601c
    17a0:	00001491 	.word	0x00001491
    17a4:	00000979 	.word	0x00000979

000017a8 <_usb_d_dev_enable>:
	_irq_disable(USB_IRQn);
	_irq_clear(USB_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    17a8:	b510      	push	{r4, lr}

static inline hri_usbdevice_syncbusy_reg_t hri_usbdevice_get_SYNCBUSY_reg(const void *const            hw,
                                                                          hri_usbdevice_syncbusy_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    17aa:	2382      	movs	r3, #130	; 0x82
    17ac:	05db      	lsls	r3, r3, #23
    17ae:	789b      	ldrb	r3, [r3, #2]
	Usb *   hw = USB;
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    17b0:	079b      	lsls	r3, r3, #30
    17b2:	d113      	bne.n	17dc <_usb_d_dev_enable+0x34>
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbdevice_ctrla_reg_t hri_usbdevice_read_CTRLA_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    17b4:	2382      	movs	r3, #130	; 0x82
    17b6:	05db      	lsls	r3, r3, #23
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	b2db      	uxtb	r3, r3
		return -USB_ERR_DENIED;
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    17bc:	079a      	lsls	r2, r3, #30
    17be:	d404      	bmi.n	17ca <_usb_d_dev_enable+0x22>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    17c0:	2202      	movs	r2, #2
    17c2:	4313      	orrs	r3, r2
}

static inline void hri_usbdevice_write_CTRLA_reg(const void *const hw, hri_usbdevice_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    17c4:	2282      	movs	r2, #130	; 0x82
    17c6:	05d2      	lsls	r2, r2, #23
    17c8:	7013      	strb	r3, [r2, #0]
	}

	_irq_enable(USB_IRQn);
    17ca:	2006      	movs	r0, #6
    17cc:	4b05      	ldr	r3, [pc, #20]	; (17e4 <_usb_d_dev_enable+0x3c>)
    17ce:	4798      	blx	r3
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    17d0:	4a05      	ldr	r2, [pc, #20]	; (17e8 <_usb_d_dev_enable+0x40>)
    17d2:	2382      	movs	r3, #130	; 0x82
    17d4:	05db      	lsls	r3, r3, #23
    17d6:	831a      	strh	r2, [r3, #24]

	hri_usbdevice_set_INTEN_reg(hw,
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    17d8:	2000      	movs	r0, #0
    17da:	e001      	b.n	17e0 <_usb_d_dev_enable+0x38>
{
	Usb *   hw = USB;
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
		return -USB_ERR_DENIED;
    17dc:	2011      	movs	r0, #17
    17de:	4240      	negs	r0, r0
	hri_usbdevice_set_INTEN_reg(hw,
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
}
    17e0:	bd10      	pop	{r4, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	00000965 	.word	0x00000965
    17e8:	0000028d 	.word	0x0000028d

000017ec <_usb_d_dev_attach>:
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    17ec:	2282      	movs	r2, #130	; 0x82
    17ee:	05d2      	lsls	r2, r2, #23
    17f0:	8913      	ldrh	r3, [r2, #8]
    17f2:	2101      	movs	r1, #1
    17f4:	438b      	bics	r3, r1
    17f6:	8113      	strh	r3, [r2, #8]
}

void _usb_d_dev_attach(void)
{
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)

000017fc <_usb_d_dev_set_address>:
	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    17fc:	2380      	movs	r3, #128	; 0x80
    17fe:	4318      	orrs	r0, r3
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1800:	2382      	movs	r3, #130	; 0x82
    1802:	05db      	lsls	r3, r3, #23
    1804:	7298      	strb	r0, [r3, #10]
}
    1806:	4770      	bx	lr

00001808 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    1808:	b5f0      	push	{r4, r5, r6, r7, lr}
    180a:	4647      	mov	r7, r8
    180c:	b480      	push	{r7}
	uint8_t               epn = USB_EP_GET_N(ep);
    180e:	250f      	movs	r5, #15
    1810:	4005      	ands	r5, r0
    1812:	237f      	movs	r3, #127	; 0x7f
    1814:	0007      	movs	r7, r0
    1816:	439f      	bics	r7, r3
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1818:	2d00      	cmp	r5, #0
    181a:	d100      	bne.n	181e <_usb_d_dev_ep_init+0x16>
    181c:	e08a      	b.n	1934 <_usb_d_dev_ep_init+0x12c>
    181e:	002b      	movs	r3, r5
    1820:	2f00      	cmp	r7, #0
    1822:	d000      	beq.n	1826 <_usb_d_dev_ep_init+0x1e>
    1824:	1cab      	adds	r3, r5, #2
	return &dev_inst.ep[ep_index];
    1826:	001e      	movs	r6, r3
{
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1828:	2303      	movs	r3, #3
    182a:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    182c:	1e2b      	subs	r3, r5, #0

	if (epn > CONF_USB_D_MAX_EP_N) {
    182e:	2b02      	cmp	r3, #2
    1830:	d86e      	bhi.n	1910 <_usb_d_dev_ep_init+0x108>
		return -USB_ERR_PARAM;
	}
	if (ept->ep != 0xFF) {
    1832:	00b4      	lsls	r4, r6, #2
    1834:	19a4      	adds	r4, r4, r6
    1836:	00a4      	lsls	r4, r4, #2
    1838:	46a0      	mov	r8, r4
    183a:	4c44      	ldr	r4, [pc, #272]	; (194c <_usb_d_dev_ep_init+0x144>)
    183c:	46a4      	mov	ip, r4
    183e:	4644      	mov	r4, r8
    1840:	4464      	add	r4, ip
    1842:	348e      	adds	r4, #142	; 0x8e
    1844:	7824      	ldrb	r4, [r4, #0]
    1846:	2cff      	cmp	r4, #255	; 0xff
    1848:	d165      	bne.n	1916 <_usb_d_dev_ep_init+0x10e>
		return -USB_ERR_REDO;
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    184a:	2900      	cmp	r1, #0
    184c:	d117      	bne.n	187e <_usb_d_dev_ep_init+0x76>
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    184e:	2d00      	cmp	r5, #0
    1850:	d003      	beq.n	185a <_usb_d_dev_ep_init+0x52>
    1852:	2f00      	cmp	r7, #0
    1854:	d101      	bne.n	185a <_usb_d_dev_ep_init+0x52>
    1856:	3502      	adds	r5, #2
    1858:	b2ed      	uxtb	r5, r5
	if (ept->ep != 0xFF) {
		return -USB_ERR_REDO;
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
		if (ept_in->ep != 0xFF) {
    185a:	00ac      	lsls	r4, r5, #2
    185c:	1965      	adds	r5, r4, r5
    185e:	00ad      	lsls	r5, r5, #2
    1860:	4c3a      	ldr	r4, [pc, #232]	; (194c <_usb_d_dev_ep_init+0x144>)
    1862:	1965      	adds	r5, r4, r5
    1864:	358e      	adds	r5, #142	; 0x8e
    1866:	782c      	ldrb	r4, [r5, #0]
    1868:	2cff      	cmp	r4, #255	; 0xff
    186a:	d157      	bne.n	191c <_usb_d_dev_ep_init+0x114>
			return -USB_ERR_REDO;
		}
		if (pcfg->cache == NULL) {
    186c:	005c      	lsls	r4, r3, #1
    186e:	18e4      	adds	r4, r4, r3
    1870:	00a4      	lsls	r4, r4, #2
    1872:	4d37      	ldr	r5, [pc, #220]	; (1950 <_usb_d_dev_ep_init+0x148>)
    1874:	192c      	adds	r4, r5, r4
    1876:	68a4      	ldr	r4, [r4, #8]
    1878:	2c00      	cmp	r4, #0
    187a:	d160      	bne.n	193e <_usb_d_dev_ep_init+0x136>
    187c:	e051      	b.n	1922 <_usb_d_dev_ep_init+0x11a>
			return -USB_ERR_FUNC;
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    187e:	2f00      	cmp	r7, #0
    1880:	d008      	beq.n	1894 <_usb_d_dev_ep_init+0x8c>
    1882:	005c      	lsls	r4, r3, #1
    1884:	18e4      	adds	r4, r4, r3
    1886:	00a4      	lsls	r4, r4, #2
    1888:	4d31      	ldr	r5, [pc, #196]	; (1950 <_usb_d_dev_ep_init+0x148>)
    188a:	192c      	adds	r4, r5, r4
    188c:	68e4      	ldr	r4, [r4, #12]
    188e:	2c00      	cmp	r4, #0
    1890:	d01b      	beq.n	18ca <_usb_d_dev_ep_init+0xc2>
    1892:	e008      	b.n	18a6 <_usb_d_dev_ep_init+0x9e>
    1894:	005c      	lsls	r4, r3, #1
    1896:	18e4      	adds	r4, r4, r3
    1898:	00a4      	lsls	r4, r4, #2
    189a:	4d2d      	ldr	r5, [pc, #180]	; (1950 <_usb_d_dev_ep_init+0x148>)
    189c:	192c      	adds	r4, r5, r4
    189e:	68a4      	ldr	r4, [r4, #8]
    18a0:	2c00      	cmp	r4, #0
    18a2:	d019      	beq.n	18d8 <_usb_d_dev_ep_init+0xd0>
    18a4:	e008      	b.n	18b8 <_usb_d_dev_ep_init+0xb0>
    18a6:	005c      	lsls	r4, r3, #1
    18a8:	18e4      	adds	r4, r4, r3
    18aa:	00a4      	lsls	r4, r4, #2
    18ac:	4d28      	ldr	r5, [pc, #160]	; (1950 <_usb_d_dev_ep_init+0x148>)
    18ae:	192c      	adds	r4, r5, r4
    18b0:	8a64      	ldrh	r4, [r4, #18]
    18b2:	4294      	cmp	r4, r2
    18b4:	da09      	bge.n	18ca <_usb_d_dev_ep_init+0xc2>
    18b6:	e037      	b.n	1928 <_usb_d_dev_ep_init+0x120>
    18b8:	005c      	lsls	r4, r3, #1
    18ba:	18e4      	adds	r4, r4, r3
    18bc:	00a4      	lsls	r4, r4, #2
    18be:	4d24      	ldr	r5, [pc, #144]	; (1950 <_usb_d_dev_ep_init+0x148>)
    18c0:	192c      	adds	r4, r5, r4
    18c2:	8a24      	ldrh	r4, [r4, #16]
    18c4:	4294      	cmp	r4, r2
    18c6:	da07      	bge.n	18d8 <_usb_d_dev_ep_init+0xd0>
    18c8:	e031      	b.n	192e <_usb_d_dev_ep_init+0x126>
		return -USB_ERR_FUNC;
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    18ca:	005c      	lsls	r4, r3, #1
    18cc:	18e3      	adds	r3, r4, r3
    18ce:	009b      	lsls	r3, r3, #2
    18d0:	4c1f      	ldr	r4, [pc, #124]	; (1950 <_usb_d_dev_ep_init+0x148>)
    18d2:	18e3      	adds	r3, r4, r3
    18d4:	68df      	ldr	r7, [r3, #12]
    18d6:	e005      	b.n	18e4 <_usb_d_dev_ep_init+0xdc>
    18d8:	005c      	lsls	r4, r3, #1
    18da:	18e3      	adds	r3, r4, r3
    18dc:	009b      	lsls	r3, r3, #2
    18de:	4c1c      	ldr	r4, [pc, #112]	; (1950 <_usb_d_dev_ep_init+0x148>)
    18e0:	18e3      	adds	r3, r4, r3
    18e2:	689f      	ldr	r7, [r3, #8]
    18e4:	4d19      	ldr	r5, [pc, #100]	; (194c <_usb_d_dev_ep_init+0x144>)
    18e6:	00b3      	lsls	r3, r6, #2
    18e8:	199c      	adds	r4, r3, r6
    18ea:	00a4      	lsls	r4, r4, #2
    18ec:	192c      	adds	r4, r5, r4
    18ee:	3488      	adds	r4, #136	; 0x88
    18f0:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    18f2:	3560      	adds	r5, #96	; 0x60
    18f4:	199c      	adds	r4, r3, r6
    18f6:	00a4      	lsls	r4, r4, #2
    18f8:	192c      	adds	r4, r5, r4
    18fa:	85a2      	strh	r2, [r4, #44]	; 0x2c
	ept->flags.u8 = (ep_type + 1);
    18fc:	342f      	adds	r4, #47	; 0x2f
    18fe:	3101      	adds	r1, #1
    1900:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1902:	199b      	adds	r3, r3, r6
    1904:	009b      	lsls	r3, r3, #2
    1906:	18eb      	adds	r3, r5, r3
    1908:	332e      	adds	r3, #46	; 0x2e
    190a:	7018      	strb	r0, [r3, #0]

	return USB_OK;
    190c:	2000      	movs	r0, #0
    190e:	e019      	b.n	1944 <_usb_d_dev_ep_init+0x13c>

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
    1910:	2012      	movs	r0, #18
    1912:	4240      	negs	r0, r0
    1914:	e016      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
	}
	if (ept->ep != 0xFF) {
		return -USB_ERR_REDO;
    1916:	2014      	movs	r0, #20
    1918:	4240      	negs	r0, r0
    191a:	e013      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
		if (ept_in->ep != 0xFF) {
			return -USB_ERR_REDO;
    191c:	2014      	movs	r0, #20
    191e:	4240      	negs	r0, r0
    1920:	e010      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
		}
		if (pcfg->cache == NULL) {
			return -USB_ERR_FUNC;
    1922:	2013      	movs	r0, #19
    1924:	4240      	negs	r0, r0
    1926:	e00d      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
		return -USB_ERR_FUNC;
    1928:	2013      	movs	r0, #19
    192a:	4240      	negs	r0, r0
    192c:	e00a      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
    192e:	2013      	movs	r0, #19
    1930:	4240      	negs	r0, r0
    1932:	e007      	b.n	1944 <_usb_d_dev_ep_init+0x13c>
{
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1934:	2303      	movs	r3, #3
    1936:	4019      	ands	r1, r3
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    1938:	2600      	movs	r6, #0
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    193a:	2300      	movs	r3, #0
    193c:	e779      	b.n	1832 <_usb_d_dev_ep_init+0x2a>
		}
		if (pcfg->cache == NULL) {
			return -USB_ERR_FUNC;
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    193e:	2f00      	cmp	r7, #0
    1940:	d19f      	bne.n	1882 <_usb_d_dev_ep_init+0x7a>
    1942:	e7b9      	b.n	18b8 <_usb_d_dev_ep_init+0xb0>
	ept->size     = max_pkt_siz;
	ept->flags.u8 = (ep_type + 1);
	ept->ep       = ep;

	return USB_OK;
}
    1944:	bc04      	pop	{r2}
    1946:	4690      	mov	r8, r2
    1948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	200002ec 	.word	0x200002ec
    1950:	00002e94 	.word	0x00002e94

00001954 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    1954:	b570      	push	{r4, r5, r6, lr}
    1956:	0006      	movs	r6, r0
	Usb *                 hw  = USB;
	uint8_t               epn = USB_EP_GET_N(ep);
    1958:	250f      	movs	r5, #15
    195a:	4005      	ands	r5, r0
    195c:	237f      	movs	r3, #127	; 0x7f
    195e:	0001      	movs	r1, r0
    1960:	4399      	bics	r1, r3
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1962:	2d00      	cmp	r5, #0
    1964:	d00d      	beq.n	1982 <_usb_d_dev_ep_deinit+0x2e>
    1966:	002b      	movs	r3, r5
    1968:	2900      	cmp	r1, #0
    196a:	d000      	beq.n	196e <_usb_d_dev_ep_deinit+0x1a>
    196c:	1cab      	adds	r3, r5, #2
	Usb *                 hw  = USB;
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    196e:	2d02      	cmp	r5, #2
    1970:	d854      	bhi.n	1a1c <_usb_d_dev_ep_deinit+0xc8>
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    1972:	001c      	movs	r4, r3
    1974:	0098      	lsls	r0, r3, #2
    1976:	18c3      	adds	r3, r0, r3
    1978:	009b      	lsls	r3, r3, #2
    197a:	4829      	ldr	r0, [pc, #164]	; (1a20 <_usb_d_dev_ep_deinit+0xcc>)
    197c:	18c0      	adds	r0, r0, r3
    197e:	307c      	adds	r0, #124	; 0x7c
    1980:	e002      	b.n	1988 <_usb_d_dev_ep_deinit+0x34>
    1982:	4827      	ldr	r0, [pc, #156]	; (1a20 <_usb_d_dev_ep_deinit+0xcc>)
    1984:	307c      	adds	r0, #124	; 0x7c
    1986:	2400      	movs	r4, #0
	Usb *                 hw  = USB;
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1988:	00a3      	lsls	r3, r4, #2
    198a:	191b      	adds	r3, r3, r4
    198c:	009b      	lsls	r3, r3, #2
    198e:	4a24      	ldr	r2, [pc, #144]	; (1a20 <_usb_d_dev_ep_deinit+0xcc>)
    1990:	18d3      	adds	r3, r2, r3
    1992:	338e      	adds	r3, #142	; 0x8e
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	2bff      	cmp	r3, #255	; 0xff
    1998:	d040      	beq.n	1a1c <_usb_d_dev_ep_deinit+0xc8>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    199a:	1e4b      	subs	r3, r1, #1
    199c:	4199      	sbcs	r1, r3
    199e:	b2c9      	uxtb	r1, r1
    19a0:	2203      	movs	r2, #3
    19a2:	4b20      	ldr	r3, [pc, #128]	; (1a24 <_usb_d_dev_ep_deinit+0xd0>)
    19a4:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    19a6:	00a3      	lsls	r3, r4, #2
    19a8:	191b      	adds	r3, r3, r4
    19aa:	009b      	lsls	r3, r3, #2
    19ac:	4a1c      	ldr	r2, [pc, #112]	; (1a20 <_usb_d_dev_ep_deinit+0xcc>)
    19ae:	18d3      	adds	r3, r2, r3
    19b0:	3378      	adds	r3, #120	; 0x78
    19b2:	7ddb      	ldrb	r3, [r3, #23]
    19b4:	2207      	movs	r2, #7
    19b6:	4013      	ands	r3, r2
    19b8:	2b01      	cmp	r3, #1
    19ba:	d106      	bne.n	19ca <_usb_d_dev_ep_deinit+0x76>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    19bc:	3608      	adds	r6, #8
    19be:	0176      	lsls	r6, r6, #5
    19c0:	2200      	movs	r2, #0
    19c2:	2382      	movs	r3, #130	; 0x82
    19c4:	05db      	lsls	r3, r3, #23
    19c6:	54f2      	strb	r2, [r6, r3]
    19c8:	e019      	b.n	19fe <_usb_d_dev_ep_deinit+0xaa>
	} else if (USB_EP_GET_DIR(ep)) {
    19ca:	b273      	sxtb	r3, r6
    19cc:	2b00      	cmp	r3, #0
    19ce:	da0b      	bge.n	19e8 <_usb_d_dev_ep_deinit+0x94>
    19d0:	016d      	lsls	r5, r5, #5
    19d2:	2382      	movs	r3, #130	; 0x82
    19d4:	05db      	lsls	r3, r3, #23
    19d6:	469c      	mov	ip, r3
    19d8:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    19da:	2280      	movs	r2, #128	; 0x80
    19dc:	0052      	lsls	r2, r2, #1
    19de:	5cab      	ldrb	r3, [r5, r2]
    19e0:	2170      	movs	r1, #112	; 0x70
    19e2:	438b      	bics	r3, r1
    19e4:	54ab      	strb	r3, [r5, r2]
    19e6:	e00a      	b.n	19fe <_usb_d_dev_ep_deinit+0xaa>
    19e8:	0176      	lsls	r6, r6, #5
    19ea:	2382      	movs	r3, #130	; 0x82
    19ec:	05db      	lsls	r3, r3, #23
    19ee:	469c      	mov	ip, r3
    19f0:	4466      	add	r6, ip
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	0052      	lsls	r2, r2, #1
    19f6:	5cb3      	ldrb	r3, [r6, r2]
    19f8:	2107      	movs	r1, #7
    19fa:	438b      	bics	r3, r1
    19fc:	54b3      	strb	r3, [r6, r2]
	}
	ept->flags.u8 = 0;
    19fe:	4a08      	ldr	r2, [pc, #32]	; (1a20 <_usb_d_dev_ep_deinit+0xcc>)
    1a00:	3260      	adds	r2, #96	; 0x60
    1a02:	00a1      	lsls	r1, r4, #2
    1a04:	190b      	adds	r3, r1, r4
    1a06:	009b      	lsls	r3, r3, #2
    1a08:	18d3      	adds	r3, r2, r3
    1a0a:	332f      	adds	r3, #47	; 0x2f
    1a0c:	2000      	movs	r0, #0
    1a0e:	7018      	strb	r0, [r3, #0]
	ept->ep       = 0xFF;
    1a10:	190c      	adds	r4, r1, r4
    1a12:	00a4      	lsls	r4, r4, #2
    1a14:	1914      	adds	r4, r2, r4
    1a16:	342e      	adds	r4, #46	; 0x2e
    1a18:	23ff      	movs	r3, #255	; 0xff
    1a1a:	7023      	strb	r3, [r4, #0]
}
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	200002ec 	.word	0x200002ec
    1a24:	00000ecd 	.word	0x00000ecd

00001a28 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    1a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	Usb *                 hw    = USB;
	uint8_t               epn   = USB_EP_GET_N(ep);
    1a2a:	230f      	movs	r3, #15
    1a2c:	4003      	ands	r3, r0
    1a2e:	227f      	movs	r2, #127	; 0x7f
    1a30:	4390      	bics	r0, r2
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1a32:	2b00      	cmp	r3, #0
    1a34:	d100      	bne.n	1a38 <_usb_d_dev_ep_enable+0x10>
    1a36:	e130      	b.n	1c9a <_usb_d_dev_ep_enable+0x272>
    1a38:	001a      	movs	r2, r3
    1a3a:	2800      	cmp	r0, #0
    1a3c:	d000      	beq.n	1a40 <_usb_d_dev_ep_enable+0x18>
    1a3e:	1c9a      	adds	r2, r3, #2
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1a40:	0019      	movs	r1, r3
    1a42:	3308      	adds	r3, #8
    1a44:	015b      	lsls	r3, r3, #5
    1a46:	2482      	movs	r4, #130	; 0x82
    1a48:	05e4      	lsls	r4, r4, #23
    1a4a:	5d1c      	ldrb	r4, [r3, r4]
    1a4c:	b2e4      	uxtb	r4, r4
	bool                  dir   = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1a4e:	2902      	cmp	r1, #2
    1a50:	d900      	bls.n	1a54 <_usb_d_dev_ep_enable+0x2c>
    1a52:	e113      	b.n	1c7c <_usb_d_dev_ep_enable+0x254>
    1a54:	0093      	lsls	r3, r2, #2
    1a56:	189b      	adds	r3, r3, r2
    1a58:	009b      	lsls	r3, r3, #2
    1a5a:	4dad      	ldr	r5, [pc, #692]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1a5c:	18eb      	adds	r3, r5, r3
    1a5e:	338e      	adds	r3, #142	; 0x8e
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2bff      	cmp	r3, #255	; 0xff
    1a64:	d100      	bne.n	1a68 <_usb_d_dev_ep_enable+0x40>
    1a66:	e10c      	b.n	1c82 <_usb_d_dev_ep_enable+0x25a>
		return -USB_ERR_PARAM;
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1a68:	002e      	movs	r6, r5
    1a6a:	014d      	lsls	r5, r1, #5
    1a6c:	1975      	adds	r5, r6, r5
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1a6e:	0093      	lsls	r3, r2, #2
    1a70:	189b      	adds	r3, r3, r2
    1a72:	009b      	lsls	r3, r3, #2
    1a74:	18f3      	adds	r3, r6, r3
    1a76:	3378      	adds	r3, #120	; 0x78
    1a78:	7ddb      	ldrb	r3, [r3, #23]
    1a7a:	2607      	movs	r6, #7
    1a7c:	4033      	ands	r3, r6
    1a7e:	2b01      	cmp	r3, #1
    1a80:	d175      	bne.n	1b6e <_usb_d_dev_ep_enable+0x146>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1a82:	3376      	adds	r3, #118	; 0x76
    1a84:	4223      	tst	r3, r4
    1a86:	d000      	beq.n	1a8a <_usb_d_dev_ep_enable+0x62>
    1a88:	e0fe      	b.n	1c88 <_usb_d_dev_ep_enable+0x260>
    1a8a:	014c      	lsls	r4, r1, #5
    1a8c:	2382      	movs	r3, #130	; 0x82
    1a8e:	05db      	lsls	r3, r3, #23
    1a90:	469c      	mov	ip, r3
    1a92:	4464      	add	r4, ip

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a94:	2011      	movs	r0, #17
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	005b      	lsls	r3, r3, #1
    1a9a:	54e0      	strb	r0, [r4, r3]
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a9c:	0093      	lsls	r3, r2, #2
    1a9e:	189b      	adds	r3, r3, r2
    1aa0:	0098      	lsls	r0, r3, #2
    1aa2:	4b9b      	ldr	r3, [pc, #620]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1aa4:	3360      	adds	r3, #96	; 0x60
    1aa6:	181b      	adds	r3, r3, r0
    1aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1aaa:	039e      	lsls	r6, r3, #14
    1aac:	4899      	ldr	r0, [pc, #612]	; (1d14 <_usb_d_dev_ep_enable+0x2ec>)
    1aae:	4030      	ands	r0, r6
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1ab0:	2680      	movs	r6, #128	; 0x80
    1ab2:	00b6      	lsls	r6, r6, #2
    1ab4:	42b3      	cmp	r3, r6
    1ab6:	d900      	bls.n	1aba <_usb_d_dev_ep_enable+0x92>
    1ab8:	e0f8      	b.n	1cac <_usb_d_dev_ep_enable+0x284>
    1aba:	3e01      	subs	r6, #1
    1abc:	3eff      	subs	r6, #255	; 0xff
    1abe:	42b3      	cmp	r3, r6
    1ac0:	d900      	bls.n	1ac4 <_usb_d_dev_ep_enable+0x9c>
    1ac2:	e10b      	b.n	1cdc <_usb_d_dev_ep_enable+0x2b4>
    1ac4:	2b80      	cmp	r3, #128	; 0x80
    1ac6:	d900      	bls.n	1aca <_usb_d_dev_ep_enable+0xa2>
    1ac8:	e0f8      	b.n	1cbc <_usb_d_dev_ep_enable+0x294>
    1aca:	2b40      	cmp	r3, #64	; 0x40
    1acc:	d900      	bls.n	1ad0 <_usb_d_dev_ep_enable+0xa8>
    1ace:	e10d      	b.n	1cec <_usb_d_dev_ep_enable+0x2c4>
    1ad0:	2b20      	cmp	r3, #32
    1ad2:	d900      	bls.n	1ad6 <_usb_d_dev_ep_enable+0xae>
    1ad4:	e0fa      	b.n	1ccc <_usb_d_dev_ep_enable+0x2a4>
    1ad6:	2b10      	cmp	r3, #16
    1ad8:	d900      	bls.n	1adc <_usb_d_dev_ep_enable+0xb4>
    1ada:	e10f      	b.n	1cfc <_usb_d_dev_ep_enable+0x2d4>
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1adc:	3ef8      	subs	r6, #248	; 0xf8
    1ade:	429e      	cmp	r6, r3
    1ae0:	41b6      	sbcs	r6, r6
    1ae2:	4276      	negs	r6, r6
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ae4:	0737      	lsls	r7, r6, #28
    1ae6:	4338      	orrs	r0, r7
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ae8:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1aea:	0498      	lsls	r0, r3, #18
    1aec:	0c83      	lsrs	r3, r0, #18
    1aee:	0736      	lsls	r6, r6, #28
    1af0:	4333      	orrs	r3, r6
    1af2:	616b      	str	r3, [r5, #20]
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1af4:	2506      	movs	r5, #6
    1af6:	35ff      	adds	r5, #255	; 0xff
    1af8:	2640      	movs	r6, #64	; 0x40
    1afa:	5566      	strb	r6, [r4, r5]
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1afc:	2782      	movs	r7, #130	; 0x82
    1afe:	007f      	lsls	r7, r7, #1
    1b00:	2380      	movs	r3, #128	; 0x80
    1b02:	55e3      	strb	r3, [r4, r7]
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
    1b04:	4882      	ldr	r0, [pc, #520]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1b06:	0149      	lsls	r1, r1, #5
    1b08:	1841      	adds	r1, r0, r1
    1b0a:	2300      	movs	r3, #0
    1b0c:	728b      	strb	r3, [r1, #10]
    1b0e:	768b      	strb	r3, [r1, #26]
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
	Usb *   hw  = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b10:	3360      	adds	r3, #96	; 0x60
    1b12:	469c      	mov	ip, r3
    1b14:	4484      	add	ip, r0
    1b16:	0091      	lsls	r1, r2, #2
    1b18:	188b      	adds	r3, r1, r2
    1b1a:	009b      	lsls	r3, r3, #2
    1b1c:	4463      	add	r3, ip
    1b1e:	332e      	adds	r3, #46	; 0x2e
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	240f      	movs	r4, #15
    1b24:	4023      	ands	r3, r4

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b26:	188c      	adds	r4, r1, r2
    1b28:	00a4      	lsls	r4, r4, #2
    1b2a:	1904      	adds	r4, r0, r4
    1b2c:	3488      	adds	r4, #136	; 0x88
    1b2e:	6824      	ldr	r4, [r4, #0]
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->ADDR.reg          = addr;
    1b30:	015b      	lsls	r3, r3, #5
    1b32:	501c      	str	r4, [r3, r0]
{
	Usb *   hw  = USB;
	uint8_t epn = USB_EP_GET_N(ept->ep);

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1b34:	188a      	adds	r2, r1, r2
    1b36:	0092      	lsls	r2, r2, #2
    1b38:	4462      	add	r2, ip
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b3a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
    1b3c:	18c0      	adds	r0, r0, r3
    1b3e:	6844      	ldr	r4, [r0, #4]
    1b40:	0489      	lsls	r1, r1, #18
    1b42:	0909      	lsrs	r1, r1, #4
    1b44:	4a74      	ldr	r2, [pc, #464]	; (1d18 <_usb_d_dev_ep_enable+0x2f0>)
    1b46:	4022      	ands	r2, r4
    1b48:	430a      	orrs	r2, r1
    1b4a:	6042      	str	r2, [r0, #4]
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b4c:	6842      	ldr	r2, [r0, #4]
    1b4e:	0b92      	lsrs	r2, r2, #14
    1b50:	0392      	lsls	r2, r2, #14
    1b52:	6042      	str	r2, [r0, #4]
    1b54:	2282      	movs	r2, #130	; 0x82
    1b56:	05d2      	lsls	r2, r2, #23
    1b58:	189a      	adds	r2, r3, r2
    1b5a:	21b0      	movs	r1, #176	; 0xb0
    1b5c:	55d1      	strb	r1, [r2, r7]
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b5e:	5556      	strb	r6, [r2, r5]
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b60:	4a6e      	ldr	r2, [pc, #440]	; (1d1c <_usb_d_dev_ep_enable+0x2f4>)
    1b62:	4694      	mov	ip, r2
    1b64:	4463      	add	r3, ip
    1b66:	2210      	movs	r2, #16
    1b68:	701a      	strb	r2, [r3, #0]
		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
		_usbd_ep_clear_bank_status(epn, 0);
	}

	return USB_OK;
    1b6a:	2000      	movs	r0, #0
    1b6c:	e0ce      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
		_usbd_ep_clear_bank_status(epn, 1);

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);

	} else if (dir) {
    1b6e:	2800      	cmp	r0, #0
    1b70:	d042      	beq.n	1bf8 <_usb_d_dev_ep_enable+0x1d0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1b72:	2370      	movs	r3, #112	; 0x70
    1b74:	4223      	tst	r3, r4
    1b76:	d000      	beq.n	1b7a <_usb_d_dev_ep_enable+0x152>
    1b78:	e089      	b.n	1c8e <_usb_d_dev_ep_enable+0x266>
			return -USB_ERR_REDO;
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1b7a:	4e65      	ldr	r6, [pc, #404]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1b7c:	0093      	lsls	r3, r2, #2
    1b7e:	1898      	adds	r0, r3, r2
    1b80:	0080      	lsls	r0, r0, #2
    1b82:	1830      	adds	r0, r6, r0
    1b84:	3088      	adds	r0, #136	; 0x88
    1b86:	79c0      	ldrb	r0, [r0, #7]
    1b88:	0740      	lsls	r0, r0, #29
    1b8a:	0e40      	lsrs	r0, r0, #25
    1b8c:	4304      	orrs	r4, r0
    1b8e:	0148      	lsls	r0, r1, #5
    1b90:	2782      	movs	r7, #130	; 0x82
    1b92:	05ff      	lsls	r7, r7, #23
    1b94:	46bc      	mov	ip, r7
    1b96:	4460      	add	r0, ip

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1b98:	2780      	movs	r7, #128	; 0x80
    1b9a:	007f      	lsls	r7, r7, #1
    1b9c:	55c4      	strb	r4, [r0, r7]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);

		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b9e:	3660      	adds	r6, #96	; 0x60
    1ba0:	189a      	adds	r2, r3, r2
    1ba2:	0092      	lsls	r2, r2, #2
    1ba4:	18b2      	adds	r2, r6, r2
    1ba6:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
    1ba8:	04a3      	lsls	r3, r4, #18
    1baa:	0c9a      	lsrs	r2, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1bac:	2307      	movs	r3, #7
    1bae:	2680      	movs	r6, #128	; 0x80
    1bb0:	00b6      	lsls	r6, r6, #2
    1bb2:	42b4      	cmp	r4, r6
    1bb4:	d812      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bb6:	3b01      	subs	r3, #1
    1bb8:	42bc      	cmp	r4, r7
    1bba:	d80f      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bbc:	3b01      	subs	r3, #1
    1bbe:	2c80      	cmp	r4, #128	; 0x80
    1bc0:	d80c      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bc2:	3b01      	subs	r3, #1
    1bc4:	2c40      	cmp	r4, #64	; 0x40
    1bc6:	d809      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bc8:	3b01      	subs	r3, #1
    1bca:	2c20      	cmp	r4, #32
    1bcc:	d806      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bce:	3b01      	subs	r3, #1
    1bd0:	2c10      	cmp	r4, #16
    1bd2:	d803      	bhi.n	1bdc <_usb_d_dev_ep_enable+0x1b4>
    1bd4:	3306      	adds	r3, #6
    1bd6:	42a3      	cmp	r3, r4
    1bd8:	419b      	sbcs	r3, r3
    1bda:	425b      	negs	r3, r3
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);

		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bdc:	071b      	lsls	r3, r3, #28
    1bde:	4313      	orrs	r3, r2
    1be0:	616b      	str	r3, [r5, #20]
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1be2:	2280      	movs	r2, #128	; 0x80
    1be4:	2382      	movs	r3, #130	; 0x82
    1be6:	005b      	lsls	r3, r3, #1
    1be8:	54c2      	strb	r2, [r0, r3]
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
    1bea:	0149      	lsls	r1, r1, #5
    1bec:	4b48      	ldr	r3, [pc, #288]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1bee:	1859      	adds	r1, r3, r1
    1bf0:	2300      	movs	r3, #0
    1bf2:	768b      	strb	r3, [r1, #26]
		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
		_usbd_ep_clear_bank_status(epn, 0);
	}

	return USB_OK;
    1bf4:	2000      	movs	r0, #0
    1bf6:	e089      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_clear_bank_status(epn, 1);

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1bf8:	0763      	lsls	r3, r4, #29
    1bfa:	d14b      	bne.n	1c94 <_usb_d_dev_ep_enable+0x26c>
			return -USB_ERR_REDO;
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1bfc:	4e44      	ldr	r6, [pc, #272]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1bfe:	0093      	lsls	r3, r2, #2
    1c00:	1898      	adds	r0, r3, r2
    1c02:	0080      	lsls	r0, r0, #2
    1c04:	1830      	adds	r0, r6, r0
    1c06:	3088      	adds	r0, #136	; 0x88
    1c08:	79c0      	ldrb	r0, [r0, #7]
    1c0a:	0740      	lsls	r0, r0, #29
    1c0c:	0f40      	lsrs	r0, r0, #29
    1c0e:	4304      	orrs	r4, r0
    1c10:	0148      	lsls	r0, r1, #5
    1c12:	2782      	movs	r7, #130	; 0x82
    1c14:	05ff      	lsls	r7, r7, #23
    1c16:	46bc      	mov	ip, r7
    1c18:	4460      	add	r0, ip

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1c1a:	2780      	movs	r7, #128	; 0x80
    1c1c:	007f      	lsls	r7, r7, #1
    1c1e:	55c4      	strb	r4, [r0, r7]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1c20:	3660      	adds	r6, #96	; 0x60
    1c22:	189a      	adds	r2, r3, r2
    1c24:	0092      	lsls	r2, r2, #2
    1c26:	18b2      	adds	r2, r6, r2
    1c28:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
    1c2a:	03a2      	lsls	r2, r4, #14
    1c2c:	4b39      	ldr	r3, [pc, #228]	; (1d14 <_usb_d_dev_ep_enable+0x2ec>)
    1c2e:	401a      	ands	r2, r3
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1c30:	2307      	movs	r3, #7
    1c32:	2680      	movs	r6, #128	; 0x80
    1c34:	00b6      	lsls	r6, r6, #2
    1c36:	42b4      	cmp	r4, r6
    1c38:	d812      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c3a:	3b01      	subs	r3, #1
    1c3c:	42bc      	cmp	r4, r7
    1c3e:	d80f      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c40:	3b01      	subs	r3, #1
    1c42:	2c80      	cmp	r4, #128	; 0x80
    1c44:	d80c      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c46:	3b01      	subs	r3, #1
    1c48:	2c40      	cmp	r4, #64	; 0x40
    1c4a:	d809      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c4c:	3b01      	subs	r3, #1
    1c4e:	2c20      	cmp	r4, #32
    1c50:	d806      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c52:	3b01      	subs	r3, #1
    1c54:	2c10      	cmp	r4, #16
    1c56:	d803      	bhi.n	1c60 <_usb_d_dev_ep_enable+0x238>
    1c58:	3306      	adds	r3, #6
    1c5a:	42a3      	cmp	r3, r4
    1c5c:	419b      	sbcs	r3, r3
    1c5e:	425b      	negs	r3, r3
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1c60:	071b      	lsls	r3, r3, #28
    1c62:	4313      	orrs	r3, r2
			return -USB_ERR_REDO;
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1c64:	606b      	str	r3, [r5, #4]
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c66:	2240      	movs	r2, #64	; 0x40
    1c68:	2306      	movs	r3, #6
    1c6a:	33ff      	adds	r3, #255	; 0xff
    1c6c:	54c2      	strb	r2, [r0, r3]
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
	bank->STATUS_BK.reg     = 0;
    1c6e:	0149      	lsls	r1, r1, #5
    1c70:	4b27      	ldr	r3, [pc, #156]	; (1d10 <_usb_d_dev_ep_enable+0x2e8>)
    1c72:	1859      	adds	r1, r3, r1
    1c74:	2300      	movs	r3, #0
    1c76:	728b      	strb	r3, [r1, #10]
		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
		_usbd_ep_clear_bank_status(epn, 0);
	}

	return USB_OK;
    1c78:	2000      	movs	r0, #0
    1c7a:	e047      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
		return -USB_ERR_PARAM;
    1c7c:	2012      	movs	r0, #18
    1c7e:	4240      	negs	r0, r0
    1c80:	e044      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
    1c82:	2012      	movs	r0, #18
    1c84:	4240      	negs	r0, r0
    1c86:	e041      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
    1c88:	2014      	movs	r0, #20
    1c8a:	4240      	negs	r0, r0
    1c8c:	e03e      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);

	} else if (dir) {
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
			return -USB_ERR_REDO;
    1c8e:	2014      	movs	r0, #20
    1c90:	4240      	negs	r0, r0
    1c92:	e03b      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
		_usbd_ep_clear_bank_status(epn, 1);

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
			return -USB_ERR_REDO;
    1c94:	2014      	movs	r0, #20
    1c96:	4240      	negs	r0, r0
    1c98:	e038      	b.n	1d0c <_usb_d_dev_ep_enable+0x2e4>
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1c9a:	2380      	movs	r3, #128	; 0x80
    1c9c:	005b      	lsls	r3, r3, #1
    1c9e:	2282      	movs	r2, #130	; 0x82
    1ca0:	05d2      	lsls	r2, r2, #23
    1ca2:	5cd4      	ldrb	r4, [r2, r3]
    1ca4:	b2e4      	uxtb	r4, r4
    1ca6:	2100      	movs	r1, #0
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    1ca8:	2200      	movs	r2, #0
    1caa:	e6d3      	b.n	1a54 <_usb_d_dev_ep_enable+0x2c>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cac:	26e0      	movs	r6, #224	; 0xe0
    1cae:	05f6      	lsls	r6, r6, #23
    1cb0:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1cb2:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cb4:	049b      	lsls	r3, r3, #18
    1cb6:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1cb8:	2607      	movs	r6, #7
    1cba:	e718      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cbc:	26a0      	movs	r6, #160	; 0xa0
    1cbe:	05f6      	lsls	r6, r6, #23
    1cc0:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1cc2:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cc4:	049b      	lsls	r3, r3, #18
    1cc6:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1cc8:	2605      	movs	r6, #5
    1cca:	e710      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ccc:	26c0      	movs	r6, #192	; 0xc0
    1cce:	05b6      	lsls	r6, r6, #22
    1cd0:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1cd2:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cd4:	049b      	lsls	r3, r3, #18
    1cd6:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1cd8:	2603      	movs	r6, #3
    1cda:	e708      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cdc:	26c0      	movs	r6, #192	; 0xc0
    1cde:	05f6      	lsls	r6, r6, #23
    1ce0:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ce2:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ce4:	049b      	lsls	r3, r3, #18
    1ce6:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1ce8:	2606      	movs	r6, #6
    1cea:	e700      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cec:	2680      	movs	r6, #128	; 0x80
    1cee:	05f6      	lsls	r6, r6, #23
    1cf0:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1cf2:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cf4:	049b      	lsls	r3, r3, #18
    1cf6:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1cf8:	2604      	movs	r6, #4
    1cfa:	e6f8      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1cfc:	2680      	movs	r6, #128	; 0x80
    1cfe:	05b6      	lsls	r6, r6, #22
    1d00:	4330      	orrs	r0, r6
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
			return -USB_ERR_REDO;
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1d02:	6068      	str	r0, [r5, #4]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
		bank[1].PCKSIZE.reg
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1d04:	049b      	lsls	r3, r3, #18
    1d06:	0c9b      	lsrs	r3, r3, #18
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
	return (
    1d08:	2602      	movs	r6, #2
    1d0a:	e6f0      	b.n	1aee <_usb_d_dev_ep_enable+0xc6>
		_usbd_ep_set_out_rdy(epn, 0, false);
		_usbd_ep_clear_bank_status(epn, 0);
	}

	return USB_OK;
}
    1d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	200002ec 	.word	0x200002ec
    1d14:	0fffc000 	.word	0x0fffc000
    1d18:	f0003fff 	.word	0xf0003fff
    1d1c:	41000109 	.word	0x41000109

00001d20 <_usb_d_dev_ep_stall>:
	}
	return ERR_NONE;
}

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    1d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1d22:	220f      	movs	r2, #15
    1d24:	4002      	ands	r2, r0
    1d26:	237f      	movs	r3, #127	; 0x7f
    1d28:	4398      	bics	r0, r3
	bool                  dir = USB_EP_GET_DIR(ep);
    1d2a:	0004      	movs	r4, r0
    1d2c:	1e63      	subs	r3, r4, #1
    1d2e:	419c      	sbcs	r4, r3
    1d30:	b2e4      	uxtb	r4, r4
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d32:	2a00      	cmp	r2, #0
    1d34:	d006      	beq.n	1d44 <_usb_d_dev_ep_stall+0x24>
    1d36:	0013      	movs	r3, r2
    1d38:	2800      	cmp	r0, #0
    1d3a:	d000      	beq.n	1d3e <_usb_d_dev_ep_stall+0x1e>
    1d3c:	1c93      	adds	r3, r2, #2
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1d3e:	2a02      	cmp	r2, #2
    1d40:	d901      	bls.n	1d46 <_usb_d_dev_ep_stall+0x26>
    1d42:	e095      	b.n	1e70 <_usb_d_dev_ep_stall+0x150>
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    1d44:	2300      	movs	r3, #0

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
	}

	if (USB_EP_STALL_SET == ctrl) {
    1d46:	2901      	cmp	r1, #1
    1d48:	d122      	bne.n	1d90 <_usb_d_dev_ep_stall+0x70>
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
	if (st) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1d4a:	2510      	movs	r5, #16
    1d4c:	40a5      	lsls	r5, r4
    1d4e:	b2ed      	uxtb	r5, r5
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1d50:	4849      	ldr	r0, [pc, #292]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1d52:	009a      	lsls	r2, r3, #2
    1d54:	18d1      	adds	r1, r2, r3
    1d56:	0089      	lsls	r1, r1, #2
    1d58:	1841      	adds	r1, r0, r1
    1d5a:	318e      	adds	r1, #142	; 0x8e
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1d5c:	7809      	ldrb	r1, [r1, #0]
    1d5e:	260f      	movs	r6, #15
    1d60:	4031      	ands	r1, r6
    1d62:	014e      	lsls	r6, r1, #5
    1d64:	4f45      	ldr	r7, [pc, #276]	; (1e7c <_usb_d_dev_ep_stall+0x15c>)
    1d66:	46bc      	mov	ip, r7
    1d68:	4466      	add	r6, ip
    1d6a:	7175      	strb	r5, [r6, #5]
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1d6c:	2520      	movs	r5, #32
    1d6e:	40a5      	lsls	r5, r4
    1d70:	b2ec      	uxtb	r4, r5
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1d72:	0149      	lsls	r1, r1, #5
    1d74:	4d42      	ldr	r5, [pc, #264]	; (1e80 <_usb_d_dev_ep_stall+0x160>)
    1d76:	46ac      	mov	ip, r5
    1d78:	4461      	add	r1, ip
    1d7a:	700c      	strb	r4, [r1, #0]
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
	_usbd_ep_set_stall(epn, dir, true);
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	ept->flags.bits.is_stalled = 1;
    1d7c:	18d3      	adds	r3, r2, r3
    1d7e:	009b      	lsls	r3, r3, #2
    1d80:	18c3      	adds	r3, r0, r3
    1d82:	3388      	adds	r3, #136	; 0x88
    1d84:	79d9      	ldrb	r1, [r3, #7]
    1d86:	2208      	movs	r2, #8
    1d88:	430a      	orrs	r2, r1
    1d8a:	71da      	strb	r2, [r3, #7]
	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1d8c:	2000      	movs	r0, #0
    1d8e:	e071      	b.n	1e74 <_usb_d_dev_ep_stall+0x154>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1d90:	2900      	cmp	r1, #0
    1d92:	d159      	bne.n	1e48 <_usb_d_dev_ep_stall+0x128>
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1d94:	009a      	lsls	r2, r3, #2
    1d96:	18d2      	adds	r2, r2, r3
    1d98:	0092      	lsls	r2, r2, #2
    1d9a:	4937      	ldr	r1, [pc, #220]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1d9c:	188a      	adds	r2, r1, r2
    1d9e:	328e      	adds	r2, #142	; 0x8e
    1da0:	7812      	ldrb	r2, [r2, #0]
    1da2:	210f      	movs	r1, #15
    1da4:	400a      	ands	r2, r1
    1da6:	0151      	lsls	r1, r2, #5
    1da8:	2082      	movs	r0, #130	; 0x82
    1daa:	05c0      	lsls	r0, r0, #23
    1dac:	4684      	mov	ip, r0
    1dae:	4461      	add	r1, ip
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1db0:	2083      	movs	r0, #131	; 0x83
    1db2:	0040      	lsls	r0, r0, #1
    1db4:	5c0e      	ldrb	r6, [r1, r0]
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
	Usb *hw = USB;
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1db6:	2510      	movs	r5, #16
    1db8:	40a5      	lsls	r5, r4
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1dba:	2000      	movs	r0, #0
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
	uint8_t epn        = USB_EP_GET_N(ept->ep);
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
	if (!is_stalled) {
    1dbc:	422e      	tst	r6, r5
    1dbe:	d059      	beq.n	1e74 <_usb_d_dev_ep_stall+0x154>
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
	if (st) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1dc0:	b2ed      	uxtb	r5, r5
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1dc2:	3005      	adds	r0, #5
    1dc4:	30ff      	adds	r0, #255	; 0xff
    1dc6:	540d      	strb	r5, [r1, r0]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
	if (!is_stalled) {
		return ERR_NONE;
	}
	_usbd_ep_set_stall(epn, dir, false);
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1dc8:	38e4      	subs	r0, #228	; 0xe4
    1dca:	40a0      	lsls	r0, r4
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1dcc:	b2c5      	uxtb	r5, r0
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1dce:	0152      	lsls	r2, r2, #5
    1dd0:	4e2c      	ldr	r6, [pc, #176]	; (1e84 <_usb_d_dev_ep_stall+0x164>)
    1dd2:	46b4      	mov	ip, r6
    1dd4:	4462      	add	r2, ip
    1dd6:	7015      	strb	r5, [r2, #0]
}

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1dd8:	2208      	movs	r2, #8
    1dda:	32ff      	adds	r2, #255	; 0xff
    1ddc:	5c8a      	ldrb	r2, [r1, r2]
	if (!is_stalled) {
		return ERR_NONE;
	}
	_usbd_ep_set_stall(epn, dir, false);
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1dde:	4202      	tst	r2, r0
    1de0:	d009      	beq.n	1df6 <_usb_d_dev_ep_stall+0xd6>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1de2:	2208      	movs	r2, #8
    1de4:	32ff      	adds	r2, #255	; 0xff
    1de6:	548d      	strb	r5, [r1, r2]
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
	if (tgl) {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1de8:	3a07      	subs	r2, #7
    1dea:	3aff      	subs	r2, #255	; 0xff
    1dec:	40a2      	lsls	r2, r4
    1dee:	b2d2      	uxtb	r2, r2
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1df0:	2082      	movs	r0, #130	; 0x82
    1df2:	0040      	lsls	r0, r0, #1
    1df4:	540a      	strb	r2, [r1, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
	if (_usbd_ep_is_stall_sent(epn, dir)) {
		_usbd_ep_ack_stall(epn, dir);
		_usbd_ep_set_toggle(epn, dir, 0);
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1df6:	009a      	lsls	r2, r3, #2
    1df8:	18d2      	adds	r2, r2, r3
    1dfa:	0092      	lsls	r2, r2, #2
    1dfc:	481e      	ldr	r0, [pc, #120]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1dfe:	1882      	adds	r2, r0, r2
    1e00:	3278      	adds	r2, #120	; 0x78
    1e02:	7dd2      	ldrb	r2, [r2, #23]
    1e04:	2007      	movs	r0, #7
    1e06:	4002      	ands	r2, r0
    1e08:	2a01      	cmp	r2, #1
    1e0a:	d111      	bne.n	1e30 <_usb_d_dev_ep_stall+0x110>
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1e0c:	3206      	adds	r2, #6
    1e0e:	32ff      	adds	r2, #255	; 0xff
    1e10:	5c89      	ldrb	r1, [r1, r2]
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1e12:	2000      	movs	r0, #0
	if (_usbd_ep_is_stall_sent(epn, dir)) {
		_usbd_ep_ack_stall(epn, dir);
		_usbd_ep_set_toggle(epn, dir, 0);
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1e14:	3ad6      	subs	r2, #214	; 0xd6
    1e16:	4211      	tst	r1, r2
    1e18:	d12c      	bne.n	1e74 <_usb_d_dev_ep_stall+0x154>
			ept->flags.bits.is_stalled = 0;
    1e1a:	009a      	lsls	r2, r3, #2
    1e1c:	18d3      	adds	r3, r2, r3
    1e1e:	009b      	lsls	r3, r3, #2
    1e20:	4a15      	ldr	r2, [pc, #84]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1e22:	18d3      	adds	r3, r2, r3
    1e24:	3388      	adds	r3, #136	; 0x88
    1e26:	79da      	ldrb	r2, [r3, #7]
    1e28:	2108      	movs	r1, #8
    1e2a:	438a      	bics	r2, r1
    1e2c:	71da      	strb	r2, [r3, #7]
    1e2e:	e021      	b.n	1e74 <_usb_d_dev_ep_stall+0x154>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    1e30:	009a      	lsls	r2, r3, #2
    1e32:	18d3      	adds	r3, r2, r3
    1e34:	009b      	lsls	r3, r3, #2
    1e36:	4a10      	ldr	r2, [pc, #64]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1e38:	18d3      	adds	r3, r2, r3
    1e3a:	3388      	adds	r3, #136	; 0x88
    1e3c:	79da      	ldrb	r2, [r3, #7]
    1e3e:	2108      	movs	r1, #8
    1e40:	438a      	bics	r2, r1
    1e42:	71da      	strb	r2, [r3, #7]
	}

	if (USB_EP_STALL_SET == ctrl) {
		rc = _usb_d_dev_ep_stall_set(ept, dir);
	} else if (USB_EP_STALL_CLR == ctrl) {
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1e44:	2000      	movs	r0, #0
    1e46:	e015      	b.n	1e74 <_usb_d_dev_ep_stall+0x154>
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1e48:	009a      	lsls	r2, r3, #2
    1e4a:	18d3      	adds	r3, r2, r3
    1e4c:	009b      	lsls	r3, r3, #2
    1e4e:	4a0a      	ldr	r2, [pc, #40]	; (1e78 <_usb_d_dev_ep_stall+0x158>)
    1e50:	18d3      	adds	r3, r2, r3
    1e52:	338e      	adds	r3, #142	; 0x8e
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	220f      	movs	r2, #15
    1e58:	4013      	ands	r3, r2
    1e5a:	015b      	lsls	r3, r3, #5
    1e5c:	4a07      	ldr	r2, [pc, #28]	; (1e7c <_usb_d_dev_ep_stall+0x15c>)
    1e5e:	4694      	mov	ip, r2
    1e60:	4463      	add	r3, ip
    1e62:	799b      	ldrb	r3, [r3, #6]
	return _usbd_ep_is_stalled(epn, dir);
    1e64:	2010      	movs	r0, #16
    1e66:	40a0      	lsls	r0, r4
    1e68:	4018      	ands	r0, r3
    1e6a:	1e43      	subs	r3, r0, #1
    1e6c:	4198      	sbcs	r0, r3
    1e6e:	e001      	b.n	1e74 <_usb_d_dev_ep_stall+0x154>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
    1e70:	2012      	movs	r0, #18
    1e72:	4240      	negs	r0, r0
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
	}
	return rc;
}
    1e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	200002ec 	.word	0x200002ec
    1e7c:	41000100 	.word	0x41000100
    1e80:	41000109 	.word	0x41000109
    1e84:	41000108 	.word	0x41000108

00001e88 <_usb_d_dev_ep_read_req>:
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1e88:	b570      	push	{r4, r5, r6, lr}
    1e8a:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1e8c:	230f      	movs	r3, #15
    1e8e:	4018      	ands	r0, r3
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1e90:	0143      	lsls	r3, r0, #5
    1e92:	4a16      	ldr	r2, [pc, #88]	; (1eec <_usb_d_dev_ep_read_req+0x64>)
    1e94:	18d3      	adds	r3, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    1e96:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	049b      	lsls	r3, r3, #18
    1e9c:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1e9e:	2802      	cmp	r0, #2
    1ea0:	d81a      	bhi.n	1ed8 <_usb_d_dev_ep_read_req+0x50>
    1ea2:	2d00      	cmp	r5, #0
    1ea4:	d01b      	beq.n	1ede <_usb_d_dev_ep_read_req+0x56>
    1ea6:	0140      	lsls	r0, r0, #5
    1ea8:	2382      	movs	r3, #130	; 0x82
    1eaa:	05db      	lsls	r3, r3, #23
    1eac:	18c4      	adds	r4, r0, r3
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1eae:	2380      	movs	r3, #128	; 0x80
    1eb0:	005b      	lsls	r3, r3, #1
    1eb2:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1eb4:	2b11      	cmp	r3, #17
    1eb6:	d115      	bne.n	1ee4 <_usb_d_dev_ep_read_req+0x5c>

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1eb8:	2308      	movs	r3, #8
    1eba:	33ff      	adds	r3, #255	; 0xff
    1ebc:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1ebe:	2000      	movs	r0, #0
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1ec0:	06db      	lsls	r3, r3, #27
    1ec2:	d511      	bpl.n	1ee8 <_usb_d_dev_ep_read_req+0x60>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    1ec4:	2208      	movs	r2, #8
    1ec6:	0028      	movs	r0, r5
    1ec8:	4b09      	ldr	r3, [pc, #36]	; (1ef0 <_usb_d_dev_ep_read_req+0x68>)
    1eca:	4798      	blx	r3
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ecc:	2210      	movs	r2, #16
    1ece:	2308      	movs	r3, #8
    1ed0:	33ff      	adds	r3, #255	; 0xff
    1ed2:	54e2      	strb	r2, [r4, r3]
	_usbd_ep_ack_setup(epn);

	return bytes;
    1ed4:	0030      	movs	r0, r6
    1ed6:	e007      	b.n	1ee8 <_usb_d_dev_ep_read_req+0x60>
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
	uint32_t           addr  = bank[0].ADDR.reg;
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
		return -USB_ERR_PARAM;
    1ed8:	2012      	movs	r0, #18
    1eda:	4240      	negs	r0, r0
    1edc:	e004      	b.n	1ee8 <_usb_d_dev_ep_read_req+0x60>
    1ede:	2012      	movs	r0, #18
    1ee0:	4240      	negs	r0, r0
    1ee2:	e001      	b.n	1ee8 <_usb_d_dev_ep_read_req+0x60>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
		return -USB_ERR_FUNC;
    1ee4:	2013      	movs	r0, #19
    1ee6:	4240      	negs	r0, r0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1ee8:	bd70      	pop	{r4, r5, r6, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	200002ec 	.word	0x200002ec
    1ef0:	00002d51 	.word	0x00002d51

00001ef4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	465f      	mov	r7, fp
    1ef8:	4656      	mov	r6, sl
    1efa:	464d      	mov	r5, r9
    1efc:	4644      	mov	r4, r8
    1efe:	b4f0      	push	{r4, r5, r6, r7}
    1f00:	b085      	sub	sp, #20
    1f02:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1f04:	7a06      	ldrb	r6, [r0, #8]
    1f06:	220f      	movs	r2, #15
    1f08:	4032      	ands	r2, r6
    1f0a:	237f      	movs	r3, #127	; 0x7f
    1f0c:	439e      	bics	r6, r3
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f0e:	2a00      	cmp	r2, #0
    1f10:	d100      	bne.n	1f14 <_usb_d_dev_ep_trans+0x20>
    1f12:	e0d1      	b.n	20b8 <STACK_SIZE+0xb8>
    1f14:	0013      	movs	r3, r2
    1f16:	2e00      	cmp	r6, #0
    1f18:	d000      	beq.n	1f1c <_usb_d_dev_ep_trans+0x28>
    1f1a:	1c93      	adds	r3, r2, #2
	return &dev_inst.ep[ep_index];
    1f1c:	001c      	movs	r4, r3
    1f1e:	4974      	ldr	r1, [pc, #464]	; (20f0 <STACK_SIZE+0xf0>)
    1f20:	3160      	adds	r1, #96	; 0x60
    1f22:	0098      	lsls	r0, r3, #2
    1f24:	18c5      	adds	r5, r0, r3
    1f26:	00ad      	lsls	r5, r5, #2
    1f28:	194d      	adds	r5, r1, r5
    1f2a:	351c      	adds	r5, #28
{
	uint8_t               epn = USB_EP_GET_N(trans->ep);
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f2c:	18c3      	adds	r3, r0, r3
    1f2e:	009b      	lsls	r3, r3, #2
    1f30:	18cb      	adds	r3, r1, r3
    1f32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1f34:	496f      	ldr	r1, [pc, #444]	; (20f4 <STACK_SIZE+0xf4>)
    1f36:	428b      	cmp	r3, r1
    1f38:	d103      	bne.n	1f42 <_usb_d_dev_ep_trans+0x4e>
    1f3a:	e005      	b.n	1f48 <_usb_d_dev_ep_trans+0x54>
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    1f3c:	4d6c      	ldr	r5, [pc, #432]	; (20f0 <STACK_SIZE+0xf0>)
    1f3e:	357c      	adds	r5, #124	; 0x7c
    1f40:	2400      	movs	r4, #0
{
	uint8_t               epn = USB_EP_GET_N(trans->ep);
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f42:	1e5f      	subs	r7, r3, #1
    1f44:	b2bf      	uxth	r7, r7
    1f46:	e000      	b.n	1f4a <_usb_d_dev_ep_trans+0x56>
    1f48:	4f6a      	ldr	r7, [pc, #424]	; (20f4 <STACK_SIZE+0xf4>)
	bool     size_n_aligned = (trans->size & size_mask);
    1f4a:	4641      	mov	r1, r8
    1f4c:	6849      	ldr	r1, [r1, #4]
    1f4e:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1f50:	2a02      	cmp	r2, #2
    1f52:	d900      	bls.n	1f56 <_usb_d_dev_ep_trans+0x62>
    1f54:	e09c      	b.n	2090 <STACK_SIZE+0x90>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1f56:	4642      	mov	r2, r8
    1f58:	6812      	ldr	r2, [r2, #0]
    1f5a:	4867      	ldr	r0, [pc, #412]	; (20f8 <STACK_SIZE+0xf8>)
    1f5c:	4282      	cmp	r2, r0
    1f5e:	d90e      	bls.n	1f7e <_usb_d_dev_ep_trans+0x8a>
    1f60:	1850      	adds	r0, r2, r1
    1f62:	9001      	str	r0, [sp, #4]
    1f64:	4865      	ldr	r0, [pc, #404]	; (20fc <STACK_SIZE+0xfc>)
    1f66:	4684      	mov	ip, r0
    1f68:	9801      	ldr	r0, [sp, #4]
    1f6a:	4560      	cmp	r0, ip
    1f6c:	d807      	bhi.n	1f7e <_usb_d_dev_ep_trans+0x8a>
    1f6e:	0792      	lsls	r2, r2, #30
    1f70:	d105      	bne.n	1f7e <_usb_d_dev_ep_trans+0x8a>
	    || (!dir && (trans->size < ept->size))) {
    1f72:	2e00      	cmp	r6, #0
    1f74:	d11e      	bne.n	1fb4 <_usb_d_dev_ep_trans+0xc0>
    1f76:	428b      	cmp	r3, r1
    1f78:	d900      	bls.n	1f7c <_usb_d_dev_ep_trans+0x88>
    1f7a:	e0a5      	b.n	20c8 <STACK_SIZE+0xc8>
    1f7c:	e00c      	b.n	1f98 <_usb_d_dev_ep_trans+0xa4>
		if (!ept->cache) {
    1f7e:	00a3      	lsls	r3, r4, #2
    1f80:	191b      	adds	r3, r3, r4
    1f82:	009b      	lsls	r3, r3, #2
    1f84:	4a5a      	ldr	r2, [pc, #360]	; (20f0 <STACK_SIZE+0xf0>)
    1f86:	18d3      	adds	r3, r2, r3
    1f88:	3388      	adds	r3, #136	; 0x88
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d100      	bne.n	1f92 <_usb_d_dev_ep_trans+0x9e>
    1f90:	e081      	b.n	2096 <STACK_SIZE+0x96>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    1f92:	2301      	movs	r3, #1
    1f94:	4699      	mov	r9, r3
    1f96:	e012      	b.n	1fbe <_usb_d_dev_ep_trans+0xca>
	}
	if (!dir && size_n_aligned) {
    1f98:	2f00      	cmp	r7, #0
    1f9a:	d00e      	beq.n	1fba <_usb_d_dev_ep_trans+0xc6>
		if (!ept->cache) {
    1f9c:	00a3      	lsls	r3, r4, #2
    1f9e:	191b      	adds	r3, r3, r4
    1fa0:	009b      	lsls	r3, r3, #2
    1fa2:	4a53      	ldr	r2, [pc, #332]	; (20f0 <STACK_SIZE+0xf0>)
    1fa4:	18d3      	adds	r3, r2, r3
    1fa6:	3388      	adds	r3, #136	; 0x88
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d076      	beq.n	209c <STACK_SIZE+0x9c>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
	bool     size_n_aligned = (trans->size & size_mask);

	bool use_cache = false;
    1fae:	2300      	movs	r3, #0
    1fb0:	4699      	mov	r9, r3
    1fb2:	e004      	b.n	1fbe <_usb_d_dev_ep_trans+0xca>
    1fb4:	2300      	movs	r3, #0
    1fb6:	4699      	mov	r9, r3
    1fb8:	e001      	b.n	1fbe <_usb_d_dev_ep_trans+0xca>
    1fba:	2300      	movs	r3, #0
    1fbc:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1fbe:	00a3      	lsls	r3, r4, #2
    1fc0:	191b      	adds	r3, r3, r4
    1fc2:	009b      	lsls	r3, r3, #2
    1fc4:	4a4a      	ldr	r2, [pc, #296]	; (20f0 <STACK_SIZE+0xf0>)
    1fc6:	18d3      	adds	r3, r2, r3
    1fc8:	3378      	adds	r3, #120	; 0x78
    1fca:	7ddb      	ldrb	r3, [r3, #23]
		return USB_HALTED;
    1fcc:	2002      	movs	r0, #2
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1fce:	071b      	lsls	r3, r3, #28
    1fd0:	d500      	bpl.n	1fd4 <_usb_d_dev_ep_trans+0xe0>
    1fd2:	e085      	b.n	20e0 <STACK_SIZE+0xe0>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    1fd4:	a803      	add	r0, sp, #12
    1fd6:	4b4a      	ldr	r3, [pc, #296]	; (2100 <STACK_SIZE+0x100>)
    1fd8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1fda:	00a3      	lsls	r3, r4, #2
    1fdc:	191b      	adds	r3, r3, r4
    1fde:	009b      	lsls	r3, r3, #2
    1fe0:	4a43      	ldr	r2, [pc, #268]	; (20f0 <STACK_SIZE+0xf0>)
    1fe2:	18d3      	adds	r3, r2, r3
    1fe4:	3378      	adds	r3, #120	; 0x78
    1fe6:	7ddb      	ldrb	r3, [r3, #23]
    1fe8:	065b      	lsls	r3, r3, #25
    1fea:	d504      	bpl.n	1ff6 <_usb_d_dev_ep_trans+0x102>
		atomic_leave_critical(&flags);
    1fec:	a803      	add	r0, sp, #12
    1fee:	4b45      	ldr	r3, [pc, #276]	; (2104 <STACK_SIZE+0x104>)
    1ff0:	4798      	blx	r3
		return USB_BUSY;
    1ff2:	2001      	movs	r0, #1
    1ff4:	e074      	b.n	20e0 <STACK_SIZE+0xe0>
	}
	ept->flags.bits.is_busy = 1;
    1ff6:	00a3      	lsls	r3, r4, #2
    1ff8:	191b      	adds	r3, r3, r4
    1ffa:	009b      	lsls	r3, r3, #2
    1ffc:	4a3c      	ldr	r2, [pc, #240]	; (20f0 <STACK_SIZE+0xf0>)
    1ffe:	4692      	mov	sl, r2
    2000:	449a      	add	sl, r3
    2002:	2388      	movs	r3, #136	; 0x88
    2004:	4453      	add	r3, sl
    2006:	469b      	mov	fp, r3
    2008:	79da      	ldrb	r2, [r3, #7]
    200a:	2340      	movs	r3, #64	; 0x40
    200c:	4313      	orrs	r3, r2
    200e:	465a      	mov	r2, fp
    2010:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2012:	a803      	add	r0, sp, #12
    2014:	4b3b      	ldr	r3, [pc, #236]	; (2104 <STACK_SIZE+0x104>)
    2016:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    2018:	4653      	mov	r3, sl
    201a:	4642      	mov	r2, r8
    201c:	6812      	ldr	r2, [r2, #0]
    201e:	67da      	str	r2, [r3, #124]	; 0x7c
	ept->trans_size  = trans->size;
    2020:	3380      	adds	r3, #128	; 0x80
    2022:	4642      	mov	r2, r8
    2024:	6852      	ldr	r2, [r2, #4]
    2026:	601a      	str	r2, [r3, #0]
	ept->trans_count = 0;
    2028:	3304      	adds	r3, #4
    202a:	2200      	movs	r2, #0
    202c:	601a      	str	r2, [r3, #0]

	ept->flags.bits.dir       = dir;
    202e:	0033      	movs	r3, r6
    2030:	1e5a      	subs	r2, r3, #1
    2032:	4193      	sbcs	r3, r2
    2034:	01da      	lsls	r2, r3, #7
    2036:	465b      	mov	r3, fp
    2038:	79db      	ldrb	r3, [r3, #7]
    203a:	217f      	movs	r1, #127	; 0x7f
    203c:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    203e:	4649      	mov	r1, r9
    2040:	0149      	lsls	r1, r1, #5
    2042:	4313      	orrs	r3, r2
    2044:	2220      	movs	r2, #32
    2046:	4393      	bics	r3, r2
    2048:	430b      	orrs	r3, r1
    204a:	465a      	mov	r2, fp
    204c:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    204e:	4643      	mov	r3, r8
    2050:	7a5b      	ldrb	r3, [r3, #9]
    2052:	2200      	movs	r2, #0
    2054:	2b00      	cmp	r3, #0
    2056:	d001      	beq.n	205c <STACK_SIZE+0x5c>
    2058:	427a      	negs	r2, r7
    205a:	417a      	adcs	r2, r7
    205c:	00a3      	lsls	r3, r4, #2
    205e:	191c      	adds	r4, r3, r4
    2060:	00a4      	lsls	r4, r4, #2
    2062:	4b23      	ldr	r3, [pc, #140]	; (20f0 <STACK_SIZE+0xf0>)
    2064:	191b      	adds	r3, r3, r4
    2066:	3388      	adds	r3, #136	; 0x88
    2068:	0112      	lsls	r2, r2, #4
    206a:	79d9      	ldrb	r1, [r3, #7]
    206c:	2010      	movs	r0, #16
    206e:	4381      	bics	r1, r0
    2070:	430a      	orrs	r2, r1
    2072:	71da      	strb	r2, [r3, #7]

	if (dir) {
    2074:	2e00      	cmp	r6, #0
    2076:	d005      	beq.n	2084 <STACK_SIZE+0x84>
		_usb_d_dev_in_next(ept, false);
    2078:	2100      	movs	r1, #0
    207a:	0028      	movs	r0, r5
    207c:	4b22      	ldr	r3, [pc, #136]	; (2108 <STACK_SIZE+0x108>)
    207e:	4798      	blx	r3
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
    2080:	2000      	movs	r0, #0
    2082:	e02d      	b.n	20e0 <STACK_SIZE+0xe0>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));

	if (dir) {
		_usb_d_dev_in_next(ept, false);
	} else {
		_usb_d_dev_out_next(ept, false);
    2084:	2100      	movs	r1, #0
    2086:	0028      	movs	r0, r5
    2088:	4b20      	ldr	r3, [pc, #128]	; (210c <STACK_SIZE+0x10c>)
    208a:	4798      	blx	r3
	}

	return ERR_NONE;
    208c:	2000      	movs	r0, #0
    208e:	e027      	b.n	20e0 <STACK_SIZE+0xe0>
	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
		return -USB_ERR_PARAM;
    2090:	2012      	movs	r0, #18
    2092:	4240      	negs	r0, r0
    2094:	e024      	b.n	20e0 <STACK_SIZE+0xe0>
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
			return -USB_ERR_FUNC;
    2096:	2013      	movs	r0, #19
    2098:	4240      	negs	r0, r0
    209a:	e021      	b.n	20e0 <STACK_SIZE+0xe0>
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
		if (!ept->cache) {
			return -USB_ERR_PARAM;
    209c:	2012      	movs	r0, #18
    209e:	4240      	negs	r0, r0
    20a0:	e01e      	b.n	20e0 <STACK_SIZE+0xe0>
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
			return -USB_ERR_FUNC;
    20a2:	2013      	movs	r0, #19
    20a4:	4240      	negs	r0, r0
    20a6:	e01b      	b.n	20e0 <STACK_SIZE+0xe0>
	uint8_t               epn = USB_EP_GET_N(trans->ep);
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
	bool     size_n_aligned = (trans->size & size_mask);
    20a8:	4642      	mov	r2, r8
    20aa:	6851      	ldr	r1, [r2, #4]
    20ac:	058f      	lsls	r7, r1, #22
    20ae:	0dbf      	lsrs	r7, r7, #22
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
	return &dev_inst.ep[ep_index];
    20b0:	4d0f      	ldr	r5, [pc, #60]	; (20f0 <STACK_SIZE+0xf0>)
    20b2:	357c      	adds	r5, #124	; 0x7c
    20b4:	2400      	movs	r4, #0
    20b6:	e74e      	b.n	1f56 <_usb_d_dev_ep_trans+0x62>
{
	uint8_t               epn = USB_EP_GET_N(trans->ep);
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <STACK_SIZE+0xf0>)
    20ba:	3360      	adds	r3, #96	; 0x60
    20bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    20be:	490d      	ldr	r1, [pc, #52]	; (20f4 <STACK_SIZE+0xf4>)
    20c0:	428b      	cmp	r3, r1
    20c2:	d000      	beq.n	20c6 <STACK_SIZE+0xc6>
    20c4:	e73a      	b.n	1f3c <_usb_d_dev_ep_trans+0x48>
    20c6:	e7ef      	b.n	20a8 <STACK_SIZE+0xa8>
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
	    || (!dir && (trans->size < ept->size))) {
		if (!ept->cache) {
    20c8:	00a3      	lsls	r3, r4, #2
    20ca:	191b      	adds	r3, r3, r4
    20cc:	009b      	lsls	r3, r3, #2
    20ce:	4a08      	ldr	r2, [pc, #32]	; (20f0 <STACK_SIZE+0xf0>)
    20d0:	18d3      	adds	r3, r2, r3
    20d2:	3388      	adds	r3, #136	; 0x88
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d0e3      	beq.n	20a2 <STACK_SIZE+0xa2>
    20da:	2301      	movs	r3, #1
    20dc:	4699      	mov	r9, r3
    20de:	e76e      	b.n	1fbe <_usb_d_dev_ep_trans+0xca>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    20e0:	b005      	add	sp, #20
    20e2:	bc3c      	pop	{r2, r3, r4, r5}
    20e4:	4690      	mov	r8, r2
    20e6:	4699      	mov	r9, r3
    20e8:	46a2      	mov	sl, r4
    20ea:	46ab      	mov	fp, r5
    20ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	200002ec 	.word	0x200002ec
    20f4:	000003ff 	.word	0x000003ff
    20f8:	1fffffff 	.word	0x1fffffff
    20fc:	20007fff 	.word	0x20007fff
    2100:	000002d5 	.word	0x000002d5
    2104:	000002e5 	.word	0x000002e5
    2108:	00001059 	.word	0x00001059
    210c:	0000120d 	.word	0x0000120d

00002110 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2110:	2900      	cmp	r1, #0
    2112:	d100      	bne.n	2116 <_usb_d_dev_register_callback+0x6>
    2114:	4905      	ldr	r1, [pc, #20]	; (212c <_usb_d_dev_register_callback+0x1c>)
	if (type == USB_D_CB_EVENT) {
    2116:	2801      	cmp	r0, #1
    2118:	d102      	bne.n	2120 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    211a:	4b05      	ldr	r3, [pc, #20]	; (2130 <_usb_d_dev_register_callback+0x20>)
    211c:	66d9      	str	r1, [r3, #108]	; 0x6c
    211e:	e003      	b.n	2128 <_usb_d_dev_register_callback+0x18>
	} else if (type == USB_D_CB_SOF) {
    2120:	2800      	cmp	r0, #0
    2122:	d101      	bne.n	2128 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2124:	4b02      	ldr	r3, [pc, #8]	; (2130 <_usb_d_dev_register_callback+0x20>)
    2126:	6699      	str	r1, [r3, #104]	; 0x68
	}
}
    2128:	4770      	bx	lr
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	00000e79 	.word	0x00000e79
    2130:	200002ec 	.word	0x200002ec

00002134 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2134:	2900      	cmp	r1, #0
    2136:	d100      	bne.n	213a <_usb_d_dev_register_ep_callback+0x6>
    2138:	4907      	ldr	r1, [pc, #28]	; (2158 <_usb_d_dev_register_ep_callback+0x24>)
	if (type == USB_D_DEV_EP_CB_SETUP) {
    213a:	2800      	cmp	r0, #0
    213c:	d102      	bne.n	2144 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    213e:	4b07      	ldr	r3, [pc, #28]	; (215c <_usb_d_dev_register_ep_callback+0x28>)
    2140:	6719      	str	r1, [r3, #112]	; 0x70
    2142:	e008      	b.n	2156 <_usb_d_dev_register_ep_callback+0x22>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2144:	2801      	cmp	r0, #1
    2146:	d102      	bne.n	214e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2148:	4b04      	ldr	r3, [pc, #16]	; (215c <_usb_d_dev_register_ep_callback+0x28>)
    214a:	6759      	str	r1, [r3, #116]	; 0x74
    214c:	e003      	b.n	2156 <_usb_d_dev_register_ep_callback+0x22>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    214e:	2802      	cmp	r0, #2
    2150:	d101      	bne.n	2156 <_usb_d_dev_register_ep_callback+0x22>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2152:	4b02      	ldr	r3, [pc, #8]	; (215c <_usb_d_dev_register_ep_callback+0x28>)
    2154:	6799      	str	r1, [r3, #120]	; 0x78
	}
}
    2156:	4770      	bx	lr
    2158:	00000e79 	.word	0x00000e79
    215c:	200002ec 	.word	0x200002ec

00002160 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
    2162:	b083      	sub	sp, #12
    2164:	0006      	movs	r6, r0
    2166:	000c      	movs	r4, r1
    2168:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    216a:	780b      	ldrb	r3, [r1, #0]
    216c:	065a      	lsls	r2, r3, #25
    216e:	0f92      	lsrs	r2, r2, #30
    2170:	2a01      	cmp	r2, #1
    2172:	d16d      	bne.n	2250 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2174:	7909      	ldrb	r1, [r1, #4]
    2176:	7962      	ldrb	r2, [r4, #5]
    2178:	0212      	lsls	r2, r2, #8
    217a:	430a      	orrs	r2, r1
    217c:	493c      	ldr	r1, [pc, #240]	; (2270 <cdcdf_acm_req+0x110>)
    217e:	7809      	ldrb	r1, [r1, #0]
    2180:	4291      	cmp	r1, r2
    2182:	d003      	beq.n	218c <cdcdf_acm_req+0x2c>
    2184:	493a      	ldr	r1, [pc, #232]	; (2270 <cdcdf_acm_req+0x110>)
    2186:	7849      	ldrb	r1, [r1, #1]
    2188:	4291      	cmp	r1, r2
    218a:	d164      	bne.n	2256 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    218c:	b25b      	sxtb	r3, r3
    218e:	2b00      	cmp	r3, #0
    2190:	da12      	bge.n	21b8 <cdcdf_acm_req+0x58>
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	uint16_t len = req->wLength;

	if (USB_DATA_STAGE == stage) {
    2192:	2d01      	cmp	r5, #1
    2194:	d062      	beq.n	225c <cdcdf_acm_req+0xfc>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    2196:	7863      	ldrb	r3, [r4, #1]
    2198:	2b21      	cmp	r3, #33	; 0x21
    219a:	d161      	bne.n	2260 <cdcdf_acm_req+0x100>
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	uint16_t len = req->wLength;
    219c:	79a2      	ldrb	r2, [r4, #6]
    219e:	79e3      	ldrb	r3, [r4, #7]
    21a0:	021b      	lsls	r3, r3, #8
		return ERR_NONE;
	}

	switch (req->bRequest) {
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    21a2:	4313      	orrs	r3, r2
    21a4:	2b07      	cmp	r3, #7
    21a6:	d15e      	bne.n	2266 <cdcdf_acm_req+0x106>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    21a8:	2300      	movs	r3, #0
    21aa:	2207      	movs	r2, #7
    21ac:	4930      	ldr	r1, [pc, #192]	; (2270 <cdcdf_acm_req+0x110>)
    21ae:	3108      	adds	r1, #8
    21b0:	0030      	movs	r0, r6
    21b2:	4c30      	ldr	r4, [pc, #192]	; (2274 <cdcdf_acm_req+0x114>)
    21b4:	47a0      	blx	r4
    21b6:	e058      	b.n	226a <cdcdf_acm_req+0x10a>
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    21b8:	79a2      	ldrb	r2, [r4, #6]
    21ba:	79e3      	ldrb	r3, [r4, #7]
    21bc:	021b      	lsls	r3, r3, #8
    21be:	4313      	orrs	r3, r2
    21c0:	001f      	movs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    21c2:	4b2d      	ldr	r3, [pc, #180]	; (2278 <cdcdf_acm_req+0x118>)
    21c4:	4798      	blx	r3

	switch (req->bRequest) {
    21c6:	7863      	ldrb	r3, [r4, #1]
    21c8:	2b20      	cmp	r3, #32
    21ca:	d002      	beq.n	21d2 <cdcdf_acm_req+0x72>
    21cc:	2b22      	cmp	r3, #34	; 0x22
    21ce:	d026      	beq.n	221e <cdcdf_acm_req+0xbe>
    21d0:	e036      	b.n	2240 <cdcdf_acm_req+0xe0>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    21d2:	2f07      	cmp	r7, #7
    21d4:	d137      	bne.n	2246 <cdcdf_acm_req+0xe6>
			return ERR_INVALID_DATA;
		}
		if (USB_SETUP_STAGE == stage) {
    21d6:	2d00      	cmp	r5, #0
    21d8:	d106      	bne.n	21e8 <cdcdf_acm_req+0x88>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    21da:	2300      	movs	r3, #0
    21dc:	2207      	movs	r2, #7
    21de:	0001      	movs	r1, r0
    21e0:	0030      	movs	r0, r6
    21e2:	4c24      	ldr	r4, [pc, #144]	; (2274 <cdcdf_acm_req+0x114>)
    21e4:	47a0      	blx	r4
    21e6:	e040      	b.n	226a <cdcdf_acm_req+0x10a>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    21e8:	2207      	movs	r2, #7
    21ea:	0001      	movs	r1, r0
    21ec:	4668      	mov	r0, sp
    21ee:	4b23      	ldr	r3, [pc, #140]	; (227c <cdcdf_acm_req+0x11c>)
    21f0:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    21f2:	4b1f      	ldr	r3, [pc, #124]	; (2270 <cdcdf_acm_req+0x110>)
    21f4:	691b      	ldr	r3, [r3, #16]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d005      	beq.n	2206 <cdcdf_acm_req+0xa6>
    21fa:	4668      	mov	r0, sp
    21fc:	4798      	blx	r3
    21fe:	0003      	movs	r3, r0
				usbd_cdc_line_coding = line_coding_tmp;
			}
			return ERR_NONE;
    2200:	2000      	movs	r0, #0
		}
		if (USB_SETUP_STAGE == stage) {
			return usbdc_xfer(ep, ctrl_buf, len, false);
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2202:	2b00      	cmp	r3, #0
    2204:	d031      	beq.n	226a <cdcdf_acm_req+0x10a>
				usbd_cdc_line_coding = line_coding_tmp;
    2206:	4a1a      	ldr	r2, [pc, #104]	; (2270 <cdcdf_acm_req+0x110>)
    2208:	0013      	movs	r3, r2
    220a:	9900      	ldr	r1, [sp, #0]
    220c:	6091      	str	r1, [r2, #8]
    220e:	466a      	mov	r2, sp
    2210:	8892      	ldrh	r2, [r2, #4]
    2212:	819a      	strh	r2, [r3, #12]
    2214:	466a      	mov	r2, sp
    2216:	7992      	ldrb	r2, [r2, #6]
    2218:	739a      	strb	r2, [r3, #14]
			}
			return ERR_NONE;
    221a:	2000      	movs	r0, #0
    221c:	e025      	b.n	226a <cdcdf_acm_req+0x10a>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    221e:	2300      	movs	r3, #0
    2220:	2200      	movs	r2, #0
    2222:	2100      	movs	r1, #0
    2224:	2000      	movs	r0, #0
    2226:	4d13      	ldr	r5, [pc, #76]	; (2274 <cdcdf_acm_req+0x114>)
    2228:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    222a:	4b11      	ldr	r3, [pc, #68]	; (2270 <cdcdf_acm_req+0x110>)
    222c:	695a      	ldr	r2, [r3, #20]
    222e:	2a00      	cmp	r2, #0
    2230:	d00c      	beq.n	224c <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    2232:	78a3      	ldrb	r3, [r4, #2]
    2234:	78e0      	ldrb	r0, [r4, #3]
    2236:	0200      	lsls	r0, r0, #8
    2238:	4318      	orrs	r0, r3
    223a:	4790      	blx	r2
		}
		return ERR_NONE;
    223c:	2000      	movs	r0, #0
    223e:	e014      	b.n	226a <cdcdf_acm_req+0x10a>
	default:
		return ERR_INVALID_ARG;
    2240:	200d      	movs	r0, #13
    2242:	4240      	negs	r0, r0
    2244:	e011      	b.n	226a <cdcdf_acm_req+0x10a>
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();

	switch (req->bRequest) {
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
			return ERR_INVALID_DATA;
    2246:	2001      	movs	r0, #1
    2248:	4240      	negs	r0, r0
    224a:	e00e      	b.n	226a <cdcdf_acm_req+0x10a>
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
		if (NULL != cdcdf_acm_notify_state) {
			cdcdf_acm_notify_state(req->wValue);
		}
		return ERR_NONE;
    224c:	2000      	movs	r0, #0
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
		if (req->bmRequestType & USB_EP_DIR_IN) {
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    224e:	e00c      	b.n	226a <cdcdf_acm_req+0x10a>
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
		return ERR_NOT_FOUND;
    2250:	200a      	movs	r0, #10
    2252:	4240      	negs	r0, r0
    2254:	e009      	b.n	226a <cdcdf_acm_req+0x10a>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
    2256:	200a      	movs	r0, #10
    2258:	4240      	negs	r0, r0
    225a:	e006      	b.n	226a <cdcdf_acm_req+0x10a>
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	uint16_t len = req->wLength;

	if (USB_DATA_STAGE == stage) {
		return ERR_NONE;
    225c:	2000      	movs	r0, #0
    225e:	e004      	b.n	226a <cdcdf_acm_req+0x10a>
		if (sizeof(struct usb_cdc_line_coding) != len) {
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
	default:
		return ERR_INVALID_ARG;
    2260:	200d      	movs	r0, #13
    2262:	4240      	negs	r0, r0
    2264:	e001      	b.n	226a <cdcdf_acm_req+0x10a>
	}

	switch (req->bRequest) {
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
			return ERR_INVALID_DATA;
    2266:	2001      	movs	r0, #1
    2268:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    226a:	b003      	add	sp, #12
    226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	20000644 	.word	0x20000644
    2274:	0000272d 	.word	0x0000272d
    2278:	00002ae1 	.word	0x00002ae1
    227c:	00002d51 	.word	0x00002d51

00002280 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    2280:	b5f0      	push	{r4, r5, r6, r7, lr}
    2282:	465f      	mov	r7, fp
    2284:	4656      	mov	r6, sl
    2286:	464d      	mov	r5, r9
    2288:	4644      	mov	r4, r8
    228a:	b4f0      	push	{r4, r5, r6, r7}
    228c:	b083      	sub	sp, #12
    228e:	0016      	movs	r6, r2
	switch (ctrl) {
    2290:	2901      	cmp	r1, #1
    2292:	d05d      	beq.n	2350 <cdcdf_acm_ctrl+0xd0>
    2294:	2900      	cmp	r1, #0
    2296:	d005      	beq.n	22a4 <cdcdf_acm_ctrl+0x24>
    2298:	2902      	cmp	r1, #2
    229a:	d100      	bne.n	229e <cdcdf_acm_ctrl+0x1e>
    229c:	e085      	b.n	23aa <cdcdf_acm_ctrl+0x12a>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;

	default:
		return ERR_INVALID_ARG;
    229e:	200d      	movs	r0, #13
    22a0:	4240      	negs	r0, r0
    22a2:	e099      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    22a4:	6883      	ldr	r3, [r0, #8]
    22a6:	4698      	mov	r8, r3
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    22a8:	6810      	ldr	r0, [r2, #0]
	for (i = 0; i < 2; i++) {
		if (NULL == ifc) {
    22aa:	2800      	cmp	r0, #0
    22ac:	d100      	bne.n	22b0 <cdcdf_acm_ctrl+0x30>
    22ae:	e07f      	b.n	23b0 <cdcdf_acm_ctrl+0x130>
    22b0:	9301      	str	r3, [sp, #4]
    22b2:	2301      	movs	r3, #1
    22b4:	4443      	add	r3, r8
    22b6:	469b      	mov	fp, r3
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
		while (NULL != ep) {
			ep_desc.bEndpointAddress = ep[2];
			ep_desc.bmAttributes     = ep[3];
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    22b8:	4f4b      	ldr	r7, [pc, #300]	; (23e8 <cdcdf_acm_ctrl+0x168>)
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
				usb_d_ep_enable(func_data->func_ep_in[i]);
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
				usb_d_ep_enable(func_data->func_ep_out);
    22ba:	4b4c      	ldr	r3, [pc, #304]	; (23ec <cdcdf_acm_ctrl+0x16c>)
    22bc:	4699      	mov	r9, r3
    22be:	e004      	b.n	22ca <cdcdf_acm_ctrl+0x4a>
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	3301      	adds	r3, #1
    22c4:	9301      	str	r3, [sp, #4]
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
	for (i = 0; i < 2; i++) {
		if (NULL == ifc) {
    22c6:	2800      	cmp	r0, #0
    22c8:	d075      	beq.n	23b6 <cdcdf_acm_ctrl+0x136>
			return ERR_NOT_FOUND;
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    22ca:	7882      	ldrb	r2, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    22cc:	7943      	ldrb	r3, [r0, #5]
    22ce:	2108      	movs	r1, #8
    22d0:	438b      	bics	r3, r1
    22d2:	2b02      	cmp	r3, #2
    22d4:	d172      	bne.n	23bc <cdcdf_acm_ctrl+0x13c>
    22d6:	9901      	ldr	r1, [sp, #4]
    22d8:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    22da:	780b      	ldrb	r3, [r1, #0]
    22dc:	429a      	cmp	r2, r3
    22de:	d070      	beq.n	23c2 <cdcdf_acm_ctrl+0x142>
				return ERR_ALREADY_INITIALIZED;
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    22e0:	2bff      	cmp	r3, #255	; 0xff
    22e2:	d171      	bne.n	23c8 <cdcdf_acm_ctrl+0x148>
				return ERR_NO_RESOURCE;
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    22e4:	700a      	strb	r2, [r1, #0]
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    22e6:	2205      	movs	r2, #5
    22e8:	6871      	ldr	r1, [r6, #4]
    22ea:	4b41      	ldr	r3, [pc, #260]	; (23f0 <cdcdf_acm_ctrl+0x170>)
    22ec:	4798      	blx	r3
    22ee:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    22f0:	d01f      	beq.n	2332 <cdcdf_acm_ctrl+0xb2>
			ep_desc.bEndpointAddress = ep[2];
    22f2:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    22f4:	7962      	ldrb	r2, [r4, #5]
    22f6:	0212      	lsls	r2, r2, #8
    22f8:	7923      	ldrb	r3, [r4, #4]
    22fa:	189a      	adds	r2, r3, r2
    22fc:	b292      	uxth	r2, r2
    22fe:	78e1      	ldrb	r1, [r4, #3]
    2300:	0028      	movs	r0, r5
    2302:	47b8      	blx	r7
    2304:	2800      	cmp	r0, #0
    2306:	d162      	bne.n	23ce <cdcdf_acm_ctrl+0x14e>
				return ERR_NOT_INITIALIZED;
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2308:	b26b      	sxtb	r3, r5
    230a:	2b00      	cmp	r3, #0
    230c:	da05      	bge.n	231a <cdcdf_acm_ctrl+0x9a>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    230e:	4653      	mov	r3, sl
    2310:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    2312:	0028      	movs	r0, r5
    2314:	4b35      	ldr	r3, [pc, #212]	; (23ec <cdcdf_acm_ctrl+0x16c>)
    2316:	4798      	blx	r3
    2318:	e003      	b.n	2322 <cdcdf_acm_ctrl+0xa2>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    231a:	4643      	mov	r3, r8
    231c:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    231e:	0028      	movs	r0, r5
    2320:	47c8      	blx	r9
			}
			desc->sod = ep;
    2322:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2324:	7820      	ldrb	r0, [r4, #0]
    2326:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2328:	6871      	ldr	r1, [r6, #4]
    232a:	4b32      	ldr	r3, [pc, #200]	; (23f4 <cdcdf_acm_ctrl+0x174>)
    232c:	4798      	blx	r3
    232e:	1e04      	subs	r4, r0, #0
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
		while (NULL != ep) {
    2330:	d1df      	bne.n	22f2 <cdcdf_acm_ctrl+0x72>
				usb_d_ep_enable(func_data->func_ep_out);
			}
			desc->sod = ep;
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2332:	6833      	ldr	r3, [r6, #0]
    2334:	7818      	ldrb	r0, [r3, #0]
    2336:	1818      	adds	r0, r3, r0
    2338:	2204      	movs	r2, #4
    233a:	6871      	ldr	r1, [r6, #4]
    233c:	4b2c      	ldr	r3, [pc, #176]	; (23f0 <cdcdf_acm_ctrl+0x170>)
    233e:	4798      	blx	r3
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
	for (i = 0; i < 2; i++) {
    2340:	9b01      	ldr	r3, [sp, #4]
    2342:	455b      	cmp	r3, fp
    2344:	d1bc      	bne.n	22c0 <cdcdf_acm_ctrl+0x40>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    2346:	2201      	movs	r2, #1
    2348:	4b2b      	ldr	r3, [pc, #172]	; (23f8 <cdcdf_acm_ctrl+0x178>)
    234a:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    234c:	2000      	movs	r0, #0
    234e:	e043      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2350:	6884      	ldr	r4, [r0, #8]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    2352:	2a00      	cmp	r2, #0
    2354:	d005      	beq.n	2362 <cdcdf_acm_ctrl+0xe2>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2356:	6813      	ldr	r3, [r2, #0]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2358:	795b      	ldrb	r3, [r3, #5]
    235a:	2208      	movs	r2, #8
    235c:	4393      	bics	r3, r2
    235e:	2b02      	cmp	r3, #2
    2360:	d138      	bne.n	23d4 <cdcdf_acm_ctrl+0x154>
			return ERR_NOT_FOUND;
		}
	}

	for (i = 0; i < 2; i++) {
		if (func_data->func_iface[i] == 0xFF) {
    2362:	7823      	ldrb	r3, [r4, #0]
    2364:	2bff      	cmp	r3, #255	; 0xff
    2366:	d008      	beq.n	237a <cdcdf_acm_ctrl+0xfa>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    2368:	23ff      	movs	r3, #255	; 0xff
    236a:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    236c:	78a0      	ldrb	r0, [r4, #2]
    236e:	28ff      	cmp	r0, #255	; 0xff
    2370:	d003      	beq.n	237a <cdcdf_acm_ctrl+0xfa>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2372:	4b22      	ldr	r3, [pc, #136]	; (23fc <cdcdf_acm_ctrl+0x17c>)
    2374:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2376:	23ff      	movs	r3, #255	; 0xff
    2378:	70a3      	strb	r3, [r4, #2]
			return ERR_NOT_FOUND;
		}
	}

	for (i = 0; i < 2; i++) {
		if (func_data->func_iface[i] == 0xFF) {
    237a:	7863      	ldrb	r3, [r4, #1]
    237c:	2bff      	cmp	r3, #255	; 0xff
    237e:	d008      	beq.n	2392 <cdcdf_acm_ctrl+0x112>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    2380:	23ff      	movs	r3, #255	; 0xff
    2382:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2384:	78e0      	ldrb	r0, [r4, #3]
    2386:	28ff      	cmp	r0, #255	; 0xff
    2388:	d003      	beq.n	2392 <cdcdf_acm_ctrl+0x112>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    238a:	4b1c      	ldr	r3, [pc, #112]	; (23fc <cdcdf_acm_ctrl+0x17c>)
    238c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    238e:	23ff      	movs	r3, #255	; 0xff
    2390:	70e3      	strb	r3, [r4, #3]
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    2392:	7920      	ldrb	r0, [r4, #4]
    2394:	28ff      	cmp	r0, #255	; 0xff
    2396:	d003      	beq.n	23a0 <cdcdf_acm_ctrl+0x120>
		usb_d_ep_deinit(func_data->func_ep_out);
    2398:	4b18      	ldr	r3, [pc, #96]	; (23fc <cdcdf_acm_ctrl+0x17c>)
    239a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    239c:	23ff      	movs	r3, #255	; 0xff
    239e:	7123      	strb	r3, [r4, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    23a0:	2200      	movs	r2, #0
    23a2:	4b15      	ldr	r3, [pc, #84]	; (23f8 <cdcdf_acm_ctrl+0x178>)
    23a4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    23a6:	2000      	movs	r0, #0
    23a8:	e016      	b.n	23d8 <cdcdf_acm_ctrl+0x158>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    23aa:	201b      	movs	r0, #27
    23ac:	4240      	negs	r0, r0
    23ae:	e013      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
	uint8_t          i;

	ifc = desc->sod;
	for (i = 0; i < 2; i++) {
		if (NULL == ifc) {
			return ERR_NOT_FOUND;
    23b0:	200a      	movs	r0, #10
    23b2:	4240      	negs	r0, r0
    23b4:	e010      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
    23b6:	200a      	movs	r0, #10
    23b8:	4240      	negs	r0, r0
    23ba:	e00d      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
				return ERR_NO_RESOURCE;
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
			}
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
    23bc:	200a      	movs	r0, #10
    23be:	4240      	negs	r0, r0
    23c0:	e00a      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
		ifc_desc.bInterfaceNumber = ifc[2];
		ifc_desc.bInterfaceClass  = ifc[5];

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
				return ERR_ALREADY_INITIALIZED;
    23c2:	2012      	movs	r0, #18
    23c4:	4240      	negs	r0, r0
    23c6:	e007      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
				return ERR_NO_RESOURCE;
    23c8:	201c      	movs	r0, #28
    23ca:	4240      	negs	r0, r0
    23cc:	e004      	b.n	23d8 <cdcdf_acm_ctrl+0x158>
		while (NULL != ep) {
			ep_desc.bEndpointAddress = ep[2];
			ep_desc.bmAttributes     = ep[3];
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
				return ERR_NOT_INITIALIZED;
    23ce:	2014      	movs	r0, #20
    23d0:	4240      	negs	r0, r0
    23d2:	e001      	b.n	23d8 <cdcdf_acm_ctrl+0x158>

	if (desc) {
		ifc_desc.bInterfaceClass = desc->sod[5];
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
			return ERR_NOT_FOUND;
    23d4:	200a      	movs	r0, #10
    23d6:	4240      	negs	r0, r0
		return ERR_UNSUPPORTED_OP;

	default:
		return ERR_INVALID_ARG;
	}
}
    23d8:	b003      	add	sp, #12
    23da:	bc3c      	pop	{r2, r3, r4, r5}
    23dc:	4690      	mov	r8, r2
    23de:	4699      	mov	r9, r3
    23e0:	46a2      	mov	sl, r4
    23e2:	46ab      	mov	fp, r5
    23e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	000005fd 	.word	0x000005fd
    23ec:	00000691 	.word	0x00000691
    23f0:	00002afd 	.word	0x00002afd
    23f4:	00002b35 	.word	0x00002b35
    23f8:	20000644 	.word	0x20000644
    23fc:	00000665 	.word	0x00000665

00002400 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2400:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2402:	4b0a      	ldr	r3, [pc, #40]	; (242c <cdcdf_acm_init+0x2c>)
    2404:	4798      	blx	r3
    2406:	2801      	cmp	r0, #1
    2408:	d80c      	bhi.n	2424 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    240a:	4809      	ldr	r0, [pc, #36]	; (2430 <cdcdf_acm_init+0x30>)
    240c:	4b09      	ldr	r3, [pc, #36]	; (2434 <cdcdf_acm_init+0x34>)
    240e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2410:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2412:	3018      	adds	r0, #24
    2414:	4b08      	ldr	r3, [pc, #32]	; (2438 <cdcdf_acm_init+0x38>)
    2416:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2418:	4908      	ldr	r1, [pc, #32]	; (243c <cdcdf_acm_init+0x3c>)
    241a:	2001      	movs	r0, #1
    241c:	4b08      	ldr	r3, [pc, #32]	; (2440 <cdcdf_acm_init+0x40>)
    241e:	4798      	blx	r3
	return ERR_NONE;
    2420:	2000      	movs	r0, #0
    2422:	e001      	b.n	2428 <cdcdf_acm_init+0x28>
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
	if (usbdc_get_state() > USBD_S_POWER) {
		return ERR_DENIED;
    2424:	2011      	movs	r0, #17
    2426:	4240      	negs	r0, r0
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;

	usbdc_register_function(&_cdcdf_acm);
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
	return ERR_NONE;
}
    2428:	bd10      	pop	{r4, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	00002aed 	.word	0x00002aed
    2430:	20000644 	.word	0x20000644
    2434:	00002281 	.word	0x00002281
    2438:	00002a85 	.word	0x00002a85
    243c:	20000000 	.word	0x20000000
    2440:	000029ed 	.word	0x000029ed

00002444 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    2444:	b510      	push	{r4, lr}
    2446:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2448:	4b07      	ldr	r3, [pc, #28]	; (2468 <cdcdf_acm_read+0x24>)
/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
	if (!cdcdf_acm_is_enabled()) {
    244a:	795b      	ldrb	r3, [r3, #5]
    244c:	2b00      	cmp	r3, #0
    244e:	d007      	beq.n	2460 <cdcdf_acm_read+0x1c>
		return ERR_DENIED;
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2450:	4b05      	ldr	r3, [pc, #20]	; (2468 <cdcdf_acm_read+0x24>)
    2452:	7918      	ldrb	r0, [r3, #4]
    2454:	2300      	movs	r3, #0
    2456:	000a      	movs	r2, r1
    2458:	0021      	movs	r1, r4
    245a:	4c04      	ldr	r4, [pc, #16]	; (246c <cdcdf_acm_read+0x28>)
    245c:	47a0      	blx	r4
    245e:	e001      	b.n	2464 <cdcdf_acm_read+0x20>
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
	if (!cdcdf_acm_is_enabled()) {
		return ERR_DENIED;
    2460:	2011      	movs	r0, #17
    2462:	4240      	negs	r0, r0
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
}
    2464:	bd10      	pop	{r4, pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	20000644 	.word	0x20000644
    246c:	0000272d 	.word	0x0000272d

00002470 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    2470:	b510      	push	{r4, lr}
    2472:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2474:	4b07      	ldr	r3, [pc, #28]	; (2494 <cdcdf_acm_write+0x24>)
/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
	if (!cdcdf_acm_is_enabled()) {
    2476:	795b      	ldrb	r3, [r3, #5]
    2478:	2b00      	cmp	r3, #0
    247a:	d007      	beq.n	248c <cdcdf_acm_write+0x1c>
		return ERR_DENIED;
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <cdcdf_acm_write+0x24>)
    247e:	78d8      	ldrb	r0, [r3, #3]
    2480:	2301      	movs	r3, #1
    2482:	000a      	movs	r2, r1
    2484:	0021      	movs	r1, r4
    2486:	4c04      	ldr	r4, [pc, #16]	; (2498 <cdcdf_acm_write+0x28>)
    2488:	47a0      	blx	r4
    248a:	e001      	b.n	2490 <cdcdf_acm_write+0x20>
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
	if (!cdcdf_acm_is_enabled()) {
		return ERR_DENIED;
    248c:	2011      	movs	r0, #17
    248e:	4240      	negs	r0, r0
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
}
    2490:	bd10      	pop	{r4, pc}
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	20000644 	.word	0x20000644
    2498:	0000272d 	.word	0x0000272d

0000249c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    249c:	b510      	push	{r4, lr}
	switch (cb_type) {
    249e:	2801      	cmp	r0, #1
    24a0:	d00e      	beq.n	24c0 <cdcdf_acm_register_callback+0x24>
    24a2:	2800      	cmp	r0, #0
    24a4:	d004      	beq.n	24b0 <cdcdf_acm_register_callback+0x14>
    24a6:	2802      	cmp	r0, #2
    24a8:	d012      	beq.n	24d0 <cdcdf_acm_register_callback+0x34>
    24aa:	2803      	cmp	r0, #3
    24ac:	d014      	beq.n	24d8 <cdcdf_acm_register_callback+0x3c>
    24ae:	e017      	b.n	24e0 <cdcdf_acm_register_callback+0x44>
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    24b0:	4b0d      	ldr	r3, [pc, #52]	; (24e8 <cdcdf_acm_register_callback+0x4c>)
    24b2:	7918      	ldrb	r0, [r3, #4]
    24b4:	000a      	movs	r2, r1
    24b6:	2102      	movs	r1, #2
    24b8:	4b0c      	ldr	r3, [pc, #48]	; (24ec <cdcdf_acm_register_callback+0x50>)
    24ba:	4798      	blx	r3
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    24bc:	2000      	movs	r0, #0
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
	switch (cb_type) {
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
		break;
    24be:	e011      	b.n	24e4 <cdcdf_acm_register_callback+0x48>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    24c0:	4b09      	ldr	r3, [pc, #36]	; (24e8 <cdcdf_acm_register_callback+0x4c>)
    24c2:	78d8      	ldrb	r0, [r3, #3]
    24c4:	000a      	movs	r2, r1
    24c6:	2102      	movs	r1, #2
    24c8:	4b08      	ldr	r3, [pc, #32]	; (24ec <cdcdf_acm_register_callback+0x50>)
    24ca:	4798      	blx	r3
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    24cc:	2000      	movs	r0, #0
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
		break;
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
		break;
    24ce:	e009      	b.n	24e4 <cdcdf_acm_register_callback+0x48>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    24d0:	4b05      	ldr	r3, [pc, #20]	; (24e8 <cdcdf_acm_register_callback+0x4c>)
    24d2:	6119      	str	r1, [r3, #16]
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    24d4:	2000      	movs	r0, #0
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
		break;
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
		break;
    24d6:	e005      	b.n	24e4 <cdcdf_acm_register_callback+0x48>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    24d8:	4b03      	ldr	r3, [pc, #12]	; (24e8 <cdcdf_acm_register_callback+0x4c>)
    24da:	6159      	str	r1, [r3, #20]
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    24dc:	2000      	movs	r0, #0
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
    24de:	e001      	b.n	24e4 <cdcdf_acm_register_callback+0x48>
	default:
		return ERR_INVALID_ARG;
    24e0:	200d      	movs	r0, #13
    24e2:	4240      	negs	r0, r0
	}
	return ERR_NONE;
}
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	20000644 	.word	0x20000644
    24ec:	00000879 	.word	0x00000879

000024f0 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    24f0:	4b01      	ldr	r3, [pc, #4]	; (24f8 <cdcdf_acm_is_enabled+0x8>)
    24f2:	7958      	ldrb	r0, [r3, #5]
}
    24f4:	4770      	bx	lr
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	20000644 	.word	0x20000644

000024fc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    24fc:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <usbdc_unconfig+0x1c>)
    2500:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2502:	2c00      	cmp	r4, #0
    2504:	d007      	beq.n	2516 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2506:	2200      	movs	r2, #0
    2508:	2101      	movs	r1, #1
    250a:	0020      	movs	r0, r4
    250c:	6863      	ldr	r3, [r4, #4]
    250e:	4798      	blx	r3
		func = func->next;
    2510:	6824      	ldr	r4, [r4, #0]
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
	while (NULL != func) {
    2512:	2c00      	cmp	r4, #0
    2514:	d1f7      	bne.n	2506 <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    2516:	bd10      	pop	{r4, pc}
    2518:	20000668 	.word	0x20000668

0000251c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    251c:	b570      	push	{r4, r5, r6, lr}
    251e:	0006      	movs	r6, r0
    2520:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2522:	4b07      	ldr	r3, [pc, #28]	; (2540 <usbdc_change_notify+0x24>)
    2524:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2526:	2c00      	cmp	r4, #0
    2528:	d008      	beq.n	253c <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    252a:	6863      	ldr	r3, [r4, #4]
    252c:	2b00      	cmp	r3, #0
    252e:	d002      	beq.n	2536 <usbdc_change_notify+0x1a>
			cg->cb(change, value);
    2530:	0029      	movs	r1, r5
    2532:	0030      	movs	r0, r6
    2534:	4798      	blx	r3
		}
		cg = cg->next;
    2536:	6824      	ldr	r4, [r4, #0]
/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;

	while (cg != NULL) {
    2538:	2c00      	cmp	r4, #0
    253a:	d1f6      	bne.n	252a <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    253c:	bd70      	pop	{r4, r5, r6, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000668 	.word	0x20000668

00002544 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static bool usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2546:	0007      	movs	r7, r0
    2548:	000e      	movs	r6, r1
    254a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    254c:	4b0c      	ldr	r3, [pc, #48]	; (2580 <usbdc_request_handler+0x3c>)
    254e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2550:	2c00      	cmp	r4, #0
    2552:	d00f      	beq.n	2574 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    2554:	6863      	ldr	r3, [r4, #4]
    2556:	2b00      	cmp	r3, #0
    2558:	d007      	beq.n	256a <usbdc_request_handler+0x26>
			rc = h->cb(ep, req, stage);
    255a:	002a      	movs	r2, r5
    255c:	0031      	movs	r1, r6
    255e:	0038      	movs	r0, r7
    2560:	4798      	blx	r3
			if (0 == rc) {
    2562:	2800      	cmp	r0, #0
    2564:	d008      	beq.n	2578 <usbdc_request_handler+0x34>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
    2566:	300a      	adds	r0, #10
    2568:	d108      	bne.n	257c <usbdc_request_handler+0x38>
				return false;
			}
		}
		h = h->next;
    256a:	6824      	ldr	r4, [r4, #0]
static bool usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
	int32_t                   rc;

	while (h != NULL) {
    256c:	2c00      	cmp	r4, #0
    256e:	d1f1      	bne.n	2554 <usbdc_request_handler+0x10>
				return false;
			}
		}
		h = h->next;
	}
	return false;
    2570:	2000      	movs	r0, #0
    2572:	e004      	b.n	257e <usbdc_request_handler+0x3a>
    2574:	2000      	movs	r0, #0
    2576:	e002      	b.n	257e <usbdc_request_handler+0x3a>

	while (h != NULL) {
		if (NULL != h->cb) {
			rc = h->cb(ep, req, stage);
			if (0 == rc) {
				return true;
    2578:	2001      	movs	r0, #1
    257a:	e000      	b.n	257e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
				return false;
    257c:	2000      	movs	r0, #0
			}
		}
		h = h->next;
	}
	return false;
}
    257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2580:	20000668 	.word	0x20000668

00002584 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2584:	b510      	push	{r4, lr}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2586:	4b06      	ldr	r3, [pc, #24]	; (25a0 <usbd_sof_cb+0x1c>)
    2588:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    258a:	2c00      	cmp	r4, #0
    258c:	d006      	beq.n	259c <usbd_sof_cb+0x18>
		if (NULL != sof->cb) {
    258e:	6863      	ldr	r3, [r4, #4]
    2590:	2b00      	cmp	r3, #0
    2592:	d000      	beq.n	2596 <usbd_sof_cb+0x12>
			sof->cb();
    2594:	4798      	blx	r3
		}
		sof = sof->next;
    2596:	6824      	ldr	r4, [r4, #0]
/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;

	while (sof != NULL) {
    2598:	2c00      	cmp	r4, #0
    259a:	d1f8      	bne.n	258e <usbd_sof_cb+0xa>
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
	usbdc_sof_notify();
}
    259c:	bd10      	pop	{r4, pc}
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	20000668 	.word	0x20000668

000025a4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	4647      	mov	r7, r8
    25a8:	b480      	push	{r7}
    25aa:	b084      	sub	sp, #16
    25ac:	0015      	movs	r5, r2
	(void)ep;

	switch (code) {
    25ae:	2900      	cmp	r1, #0
    25b0:	d002      	beq.n	25b8 <usbdc_cb_ctl_done+0x14>
    25b2:	2901      	cmp	r1, #1
    25b4:	d064      	beq.n	2680 <usbdc_cb_ctl_done+0xdc>
    25b6:	e068      	b.n	268a <usbdc_cb_ctl_done+0xe6>
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
	switch (req->bRequest) {
    25b8:	7853      	ldrb	r3, [r2, #1]
    25ba:	2b05      	cmp	r3, #5
    25bc:	d050      	beq.n	2660 <usbdc_cb_ctl_done+0xbc>
    25be:	2b09      	cmp	r3, #9
    25c0:	d163      	bne.n	268a <usbdc_cb_ctl_done+0xe6>
	case USB_REQ_SET_CONFIG:
		usbdc.cfg_value = req->wValue;
    25c2:	7892      	ldrb	r2, [r2, #2]
    25c4:	4b33      	ldr	r3, [pc, #204]	; (2694 <usbdc_cb_ctl_done+0xf0>)
    25c6:	76da      	strb	r2, [r3, #27]
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc;
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;

	if (usbdc.cfg_value == 0) {
    25c8:	2a00      	cmp	r2, #0
    25ca:	d102      	bne.n	25d2 <usbdc_cb_ctl_done+0x2e>
		usbdc_unconfig();
    25cc:	4b32      	ldr	r3, [pc, #200]	; (2698 <usbdc_cb_ctl_done+0xf4>)
    25ce:	4798      	blx	r3
    25d0:	e039      	b.n	2646 <usbdc_cb_ctl_done+0xa2>
		return;
	}

	cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    25d2:	4b30      	ldr	r3, [pc, #192]	; (2694 <usbdc_cb_ctl_done+0xf0>)
    25d4:	681b      	ldr	r3, [r3, #0]
    25d6:	6859      	ldr	r1, [r3, #4]
    25d8:	6818      	ldr	r0, [r3, #0]
    25da:	4b30      	ldr	r3, [pc, #192]	; (269c <usbdc_cb_ctl_done+0xf8>)
    25dc:	4798      	blx	r3

	if (NULL == cfg_desc) {
    25de:	2800      	cmp	r0, #0
    25e0:	d031      	beq.n	2646 <usbdc_cb_ctl_done+0xa2>
		return;
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
	desc.eod  = cfg_desc + total_len;
    25e2:	78c1      	ldrb	r1, [r0, #3]
    25e4:	0209      	lsls	r1, r1, #8
    25e6:	7883      	ldrb	r3, [r0, #2]
    25e8:	1859      	adds	r1, r3, r1
    25ea:	b289      	uxth	r1, r1
    25ec:	1841      	adds	r1, r0, r1
    25ee:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    25f0:	2204      	movs	r2, #4
    25f2:	4b2b      	ldr	r3, [pc, #172]	; (26a0 <usbdc_cb_ctl_done+0xfc>)
    25f4:	4798      	blx	r3
    25f6:	9002      	str	r0, [sp, #8]

	while (NULL != desc.sod) {
    25f8:	2800      	cmp	r0, #0
    25fa:	d024      	beq.n	2646 <usbdc_cb_ctl_done+0xa2>
    25fc:	24ff      	movs	r4, #255	; 0xff
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
			last_iface = desc.sod[2];
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    25fe:	4f25      	ldr	r7, [pc, #148]	; (2694 <usbdc_cb_ctl_done+0xf0>)
					break;
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2600:	4b27      	ldr	r3, [pc, #156]	; (26a0 <usbdc_cb_ctl_done+0xfc>)
    2602:	4698      	mov	r8, r3
	desc.eod  = cfg_desc + total_len;
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);

	while (NULL != desc.sod) {
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2604:	7886      	ldrb	r6, [r0, #2]
    2606:	42a6      	cmp	r6, r4
    2608:	d011      	beq.n	262e <usbdc_cb_ctl_done+0x8a>
			last_iface = desc.sod[2];
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    260a:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    260c:	2c00      	cmp	r4, #0
    260e:	d00b      	beq.n	2628 <usbdc_cb_ctl_done+0x84>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2610:	aa02      	add	r2, sp, #8
    2612:	2100      	movs	r1, #0
    2614:	0020      	movs	r0, r4
    2616:	6863      	ldr	r3, [r4, #4]
    2618:	4798      	blx	r3
    261a:	2800      	cmp	r0, #0
    261c:	d006      	beq.n	262c <usbdc_cb_ctl_done+0x88>
					func = func->next;
    261e:	6824      	ldr	r4, [r4, #0]
	while (NULL != desc.sod) {
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
			last_iface = desc.sod[2];
			func       = (struct usbdf_driver *)usbdc.func_list.head;
			while (NULL != func) {
    2620:	2c00      	cmp	r4, #0
    2622:	d1f5      	bne.n	2610 <usbdc_cb_ctl_done+0x6c>
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);

	while (NULL != desc.sod) {
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
			last_iface = desc.sod[2];
    2624:	0034      	movs	r4, r6
    2626:	e002      	b.n	262e <usbdc_cb_ctl_done+0x8a>
    2628:	0034      	movs	r4, r6
    262a:	e000      	b.n	262e <usbdc_cb_ctl_done+0x8a>
    262c:	0034      	movs	r4, r6
				} else {
					break;
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    262e:	9b02      	ldr	r3, [sp, #8]
    2630:	7818      	ldrb	r0, [r3, #0]
    2632:	1818      	adds	r0, r3, r0
    2634:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	9301      	str	r3, [sp, #4]
    263a:	2204      	movs	r2, #4
    263c:	0019      	movs	r1, r3
    263e:	47c0      	blx	r8
    2640:	9002      	str	r0, [sp, #8]

	total_len = usb_cfg_desc_total_len(cfg_desc);
	desc.eod  = cfg_desc + total_len;
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);

	while (NULL != desc.sod) {
    2642:	2800      	cmp	r0, #0
    2644:	d1de      	bne.n	2604 <usbdc_cb_ctl_done+0x60>
{
	switch (req->bRequest) {
	case USB_REQ_SET_CONFIG:
		usbdc.cfg_value = req->wValue;
		usbdc_set_config();
		usbdc.state = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2646:	78ab      	ldrb	r3, [r5, #2]
    2648:	78e9      	ldrb	r1, [r5, #3]
    264a:	0209      	lsls	r1, r1, #8
    264c:	4319      	orrs	r1, r3
    264e:	1e4b      	subs	r3, r1, #1
    2650:	4199      	sbcs	r1, r3
    2652:	3103      	adds	r1, #3
    2654:	4b0f      	ldr	r3, [pc, #60]	; (2694 <usbdc_cb_ctl_done+0xf0>)
    2656:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2658:	2001      	movs	r0, #1
    265a:	4b12      	ldr	r3, [pc, #72]	; (26a4 <usbdc_cb_ctl_done+0x100>)
    265c:	4798      	blx	r3
    265e:	e014      	b.n	268a <usbdc_cb_ctl_done+0xe6>
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
	usb_d_set_address(addr);
    2660:	7890      	ldrb	r0, [r2, #2]
    2662:	4b11      	ldr	r3, [pc, #68]	; (26a8 <usbdc_cb_ctl_done+0x104>)
    2664:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	case USB_REQ_SET_ADDRESS:
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2666:	78ab      	ldrb	r3, [r5, #2]
    2668:	78e9      	ldrb	r1, [r5, #3]
    266a:	0209      	lsls	r1, r1, #8
    266c:	4319      	orrs	r1, r3
    266e:	1e4b      	subs	r3, r1, #1
    2670:	4199      	sbcs	r1, r3
    2672:	3102      	adds	r1, #2
    2674:	4b07      	ldr	r3, [pc, #28]	; (2694 <usbdc_cb_ctl_done+0xf0>)
    2676:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2678:	2001      	movs	r0, #1
    267a:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <usbdc_cb_ctl_done+0x100>)
    267c:	4798      	blx	r3
    267e:	e004      	b.n	268a <usbdc_cb_ctl_done+0xe6>
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2680:	2201      	movs	r2, #1
    2682:	0029      	movs	r1, r5
    2684:	2000      	movs	r0, #0
    2686:	4b09      	ldr	r3, [pc, #36]	; (26ac <usbdc_cb_ctl_done+0x108>)
    2688:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    268a:	2000      	movs	r0, #0
    268c:	b004      	add	sp, #16
    268e:	bc04      	pop	{r2}
    2690:	4690      	mov	r8, r2
    2692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2694:	20000668 	.word	0x20000668
    2698:	000024fd 	.word	0x000024fd
    269c:	00002b79 	.word	0x00002b79
    26a0:	00002afd 	.word	0x00002afd
    26a4:	0000251d 	.word	0x0000251d
    26a8:	000005f1 	.word	0x000005f1
    26ac:	00002545 	.word	0x00002545

000026b0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    26b0:	b510      	push	{r4, lr}
	usbdc_unconfig();
    26b2:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <usbdc_reset+0x38>)
    26b4:	4798      	blx	r3

	usbdc.state     = USBD_S_DEFAULT;
    26b6:	4c0d      	ldr	r4, [pc, #52]	; (26ec <usbdc_reset+0x3c>)
    26b8:	2302      	movs	r3, #2
    26ba:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value = 0;
    26bc:	2300      	movs	r3, #0
    26be:	76e3      	strb	r3, [r4, #27]

	// Setup EP0
	usb_d_ep_deinit(0);
    26c0:	2000      	movs	r0, #0
    26c2:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <usbdc_reset+0x40>)
    26c4:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    26c6:	7f20      	ldrb	r0, [r4, #28]
    26c8:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <usbdc_reset+0x44>)
    26ca:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    26cc:	4a0a      	ldr	r2, [pc, #40]	; (26f8 <usbdc_reset+0x48>)
    26ce:	2100      	movs	r1, #0
    26d0:	2000      	movs	r0, #0
    26d2:	4c0a      	ldr	r4, [pc, #40]	; (26fc <usbdc_reset+0x4c>)
    26d4:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    26d6:	4a0a      	ldr	r2, [pc, #40]	; (2700 <usbdc_reset+0x50>)
    26d8:	2102      	movs	r1, #2
    26da:	2000      	movs	r0, #0
    26dc:	47a0      	blx	r4
	usb_d_ep_enable(0);
    26de:	2000      	movs	r0, #0
    26e0:	4b08      	ldr	r3, [pc, #32]	; (2704 <usbdc_reset+0x54>)
    26e2:	4798      	blx	r3
}
    26e4:	bd10      	pop	{r4, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	000024fd 	.word	0x000024fd
    26ec:	20000668 	.word	0x20000668
    26f0:	00000665 	.word	0x00000665
    26f4:	00000651 	.word	0x00000651
    26f8:	00002749 	.word	0x00002749
    26fc:	00000879 	.word	0x00000879
    2700:	000025a5 	.word	0x000025a5
    2704:	00000691 	.word	0x00000691

00002708 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2708:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    270a:	2800      	cmp	r0, #0
    270c:	d002      	beq.n	2714 <usbd_event_cb+0xc>
    270e:	2801      	cmp	r0, #1
    2710:	d004      	beq.n	271c <usbd_event_cb+0x14>
    2712:	e005      	b.n	2720 <usbd_event_cb+0x18>
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    2714:	2000      	movs	r0, #0
    2716:	4b03      	ldr	r3, [pc, #12]	; (2724 <usbd_event_cb+0x1c>)
    2718:	4798      	blx	r3
		break;
    271a:	e001      	b.n	2720 <usbd_event_cb+0x18>

	case USB_EV_RESET:
		usbdc_reset();
    271c:	4b02      	ldr	r3, [pc, #8]	; (2728 <usbd_event_cb+0x20>)
    271e:	4798      	blx	r3
		break;

	default:
		break;
	}
}
    2720:	bd10      	pop	{r4, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	0000251d 	.word	0x0000251d
    2728:	000026b1 	.word	0x000026b1

0000272c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    272c:	b510      	push	{r4, lr}
    272e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2730:	ac01      	add	r4, sp, #4
    2732:	9101      	str	r1, [sp, #4]
    2734:	9202      	str	r2, [sp, #8]
    2736:	7220      	strb	r0, [r4, #8]
    2738:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    273a:	0020      	movs	r0, r4
    273c:	4b01      	ldr	r3, [pc, #4]	; (2744 <usbdc_xfer+0x18>)
    273e:	4798      	blx	r3
}
    2740:	b004      	add	sp, #16
    2742:	bd10      	pop	{r4, pc}
    2744:	000006d9 	.word	0x000006d9

00002748 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    2748:	b5f0      	push	{r4, r5, r6, r7, lr}
    274a:	b083      	sub	sp, #12
    274c:	0006      	movs	r6, r0
    274e:	000d      	movs	r5, r1
	if (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2750:	2200      	movs	r2, #0
    2752:	4b9d      	ldr	r3, [pc, #628]	; (29c8 <usbdc_cb_ctl_req+0x280>)
    2754:	4798      	blx	r3
    2756:	1e04      	subs	r4, r0, #0
    2758:	d000      	beq.n	275c <usbdc_cb_ctl_req+0x14>
    275a:	e131      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
		return true;
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    275c:	782a      	ldrb	r2, [r5, #0]
    275e:	231f      	movs	r3, #31
    2760:	0011      	movs	r1, r2
    2762:	4399      	bics	r1, r3
    2764:	d003      	beq.n	276e <usbdc_cb_ctl_req+0x26>
    2766:	b2cb      	uxtb	r3, r1
    2768:	2b80      	cmp	r3, #128	; 0x80
    276a:	d07a      	beq.n	2862 <usbdc_cb_ctl_req+0x11a>
    276c:	e128      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
	switch (req->bRequest) {
    276e:	786b      	ldrb	r3, [r5, #1]
    2770:	2b0b      	cmp	r3, #11
    2772:	d900      	bls.n	2776 <usbdc_cb_ctl_req+0x2e>
    2774:	e124      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
    2776:	009b      	lsls	r3, r3, #2
    2778:	4994      	ldr	r1, [pc, #592]	; (29cc <usbdc_cb_ctl_req+0x284>)
    277a:	58cb      	ldr	r3, [r1, r3]
    277c:	469f      	mov	pc, r3
	case USB_REQ_SET_ADDRESS:
	case USB_REQ_SET_CONFIG:
		if (ERR_NONE == usbdc_xfer(ep, NULL, 0, true)) {
    277e:	2301      	movs	r3, #1
    2780:	2200      	movs	r2, #0
    2782:	2100      	movs	r1, #0
    2784:	0030      	movs	r0, r6
    2786:	4c92      	ldr	r4, [pc, #584]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    2788:	47a0      	blx	r4
    278a:	4244      	negs	r4, r0
    278c:	4144      	adcs	r4, r0
    278e:	b2e4      	uxtb	r4, r4
    2790:	e116      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2792:	231f      	movs	r3, #31
    2794:	401a      	ands	r2, r3
    2796:	2a02      	cmp	r2, #2
    2798:	d000      	beq.n	279c <usbdc_cb_ctl_req+0x54>
    279a:	e111      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    279c:	79aa      	ldrb	r2, [r5, #6]
    279e:	79eb      	ldrb	r3, [r5, #7]
    27a0:	021b      	lsls	r3, r3, #8
    27a2:	4313      	orrs	r3, r2
    27a4:	d000      	beq.n	27a8 <usbdc_cb_ctl_req+0x60>
    27a6:	e10b      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
			return false;
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    27a8:	7928      	ldrb	r0, [r5, #4]
    27aa:	2100      	movs	r1, #0
    27ac:	4b89      	ldr	r3, [pc, #548]	; (29d4 <usbdc_cb_ctl_req+0x28c>)
    27ae:	4798      	blx	r3
		return true;
    27b0:	2401      	movs	r4, #1
    27b2:	e105      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    27b4:	231f      	movs	r3, #31
    27b6:	401a      	ands	r2, r3
    27b8:	2a02      	cmp	r2, #2
    27ba:	d000      	beq.n	27be <usbdc_cb_ctl_req+0x76>
    27bc:	e100      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    27be:	79aa      	ldrb	r2, [r5, #6]
    27c0:	79eb      	ldrb	r3, [r5, #7]
    27c2:	021b      	lsls	r3, r3, #8
    27c4:	4313      	orrs	r3, r2
    27c6:	d000      	beq.n	27ca <usbdc_cb_ctl_req+0x82>
    27c8:	e0fa      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
			return false;
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    27ca:	7928      	ldrb	r0, [r5, #4]
    27cc:	2101      	movs	r1, #1
    27ce:	4b81      	ldr	r3, [pc, #516]	; (29d4 <usbdc_cb_ctl_req+0x28c>)
    27d0:	4798      	blx	r3
		return true;
    27d2:	2401      	movs	r4, #1
    27d4:	e0f4      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    27d6:	78ab      	ldrb	r3, [r5, #2]
    27d8:	78ee      	ldrb	r6, [r5, #3]
    27da:	0236      	lsls	r6, r6, #8
    27dc:	431e      	orrs	r6, r3
    27de:	792b      	ldrb	r3, [r5, #4]
    27e0:	796d      	ldrb	r5, [r5, #5]
    27e2:	022d      	lsls	r5, r5, #8
    27e4:	431d      	orrs	r5, r3
{
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc;

	desc.sod = usbdc.desces.ls_fs->sod;
    27e6:	4b7c      	ldr	r3, [pc, #496]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    27e8:	681b      	ldr	r3, [r3, #0]
    27ea:	6818      	ldr	r0, [r3, #0]
    27ec:	9000      	str	r0, [sp, #0]
	desc.eod = usbdc.desces.ls_fs->eod;
    27ee:	6859      	ldr	r1, [r3, #4]
    27f0:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    27f2:	2204      	movs	r2, #4
    27f4:	4b79      	ldr	r3, [pc, #484]	; (29dc <usbdc_cb_ctl_req+0x294>)
    27f6:	4798      	blx	r3
    27f8:	2800      	cmp	r0, #0
    27fa:	d100      	bne.n	27fe <usbdc_cb_ctl_req+0xb6>
    27fc:	e0e0      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
		return false;
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    27fe:	4f77      	ldr	r7, [pc, #476]	; (29dc <usbdc_cb_ctl_req+0x294>)
    2800:	e009      	b.n	2816 <usbdc_cb_ctl_req+0xce>
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
		return false;
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    2802:	9b00      	ldr	r3, [sp, #0]
    2804:	7818      	ldrb	r0, [r3, #0]
    2806:	1818      	adds	r0, r3, r0
    2808:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    280a:	2204      	movs	r2, #4
    280c:	9901      	ldr	r1, [sp, #4]
    280e:	47b8      	blx	r7
		if (NULL == ifc) {
    2810:	2800      	cmp	r0, #0
    2812:	d100      	bne.n	2816 <usbdc_cb_ctl_req+0xce>
    2814:	e0d4      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	desc.eod = usbdc.desces.ls_fs->eod;
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
		return false;
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2816:	7883      	ldrb	r3, [r0, #2]
    2818:	42ab      	cmp	r3, r5
    281a:	d1f2      	bne.n	2802 <usbdc_cb_ctl_req+0xba>
    281c:	78c3      	ldrb	r3, [r0, #3]
    281e:	42b3      	cmp	r3, r6
    2820:	d1ef      	bne.n	2802 <usbdc_cb_ctl_req+0xba>
		if (NULL == ifc) {
			return false;
		}
	}

	desc.sod = ifc;
    2822:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2824:	4b6c      	ldr	r3, [pc, #432]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2826:	691d      	ldr	r5, [r3, #16]

	while (NULL != func) {
    2828:	2d00      	cmp	r5, #0
    282a:	d100      	bne.n	282e <usbdc_cb_ctl_req+0xe6>
    282c:	e0c8      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    282e:	466a      	mov	r2, sp
    2830:	2101      	movs	r1, #1
    2832:	0028      	movs	r0, r5
    2834:	686b      	ldr	r3, [r5, #4]
    2836:	4798      	blx	r3
    2838:	2800      	cmp	r0, #0
    283a:	d003      	beq.n	2844 <usbdc_cb_ctl_req+0xfc>
			func = func->next;
    283c:	682d      	ldr	r5, [r5, #0]
	}

	desc.sod = ifc;
	func     = (struct usbdf_driver *)usbdc.func_list.head;

	while (NULL != func) {
    283e:	2d00      	cmp	r5, #0
    2840:	d1f5      	bne.n	282e <usbdc_cb_ctl_req+0xe6>
    2842:	e0bd      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
			func = func->next;
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2844:	686b      	ldr	r3, [r5, #4]
    2846:	466a      	mov	r2, sp
    2848:	2100      	movs	r1, #0
    284a:	0028      	movs	r0, r5
    284c:	4798      	blx	r3
    284e:	2800      	cmp	r0, #0
    2850:	d000      	beq.n	2854 <usbdc_cb_ctl_req+0x10c>
    2852:	e0b5      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
			usbdc_xfer(0, NULL, 0, 0);
    2854:	2300      	movs	r3, #0
    2856:	2200      	movs	r2, #0
    2858:	2100      	movs	r1, #0
    285a:	4c5d      	ldr	r4, [pc, #372]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    285c:	47a0      	blx	r4
			return true;
    285e:	2401      	movs	r4, #1
    2860:	e0ae      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
	switch (req->bRequest) {
    2862:	786b      	ldrb	r3, [r5, #1]
    2864:	2b06      	cmp	r3, #6
    2866:	d00b      	beq.n	2880 <usbdc_cb_ctl_req+0x138>
    2868:	b2d9      	uxtb	r1, r3
    286a:	2906      	cmp	r1, #6
    286c:	d802      	bhi.n	2874 <usbdc_cb_ctl_req+0x12c>
    286e:	2b00      	cmp	r3, #0
    2870:	d06b      	beq.n	294a <usbdc_cb_ctl_req+0x202>
    2872:	e0a5      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
    2874:	2b08      	cmp	r3, #8
    2876:	d05c      	beq.n	2932 <usbdc_cb_ctl_req+0x1ea>
    2878:	2b0a      	cmp	r3, #10
    287a:	d100      	bne.n	287e <usbdc_cb_ctl_req+0x136>
    287c:	e087      	b.n	298e <usbdc_cb_ctl_req+0x246>
    287e:	e09f      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
	uint8_t *cfg_desc, *str_desc;
	uint16_t total_len;
	uint16_t length   = req->wLength;
    2880:	79ab      	ldrb	r3, [r5, #6]
    2882:	79ef      	ldrb	r7, [r5, #7]
    2884:	023f      	lsls	r7, r7, #8
    2886:	431f      	orrs	r7, r3
	uint8_t  type     = (uint8_t)(req->wValue >> 8);
    2888:	78aa      	ldrb	r2, [r5, #2]
    288a:	78eb      	ldrb	r3, [r5, #3]
    288c:	021b      	lsls	r3, r3, #8
    288e:	4313      	orrs	r3, r2
	uint8_t  index    = req->wValue & 0x00FF;
    2890:	b2da      	uxtb	r2, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2892:	4951      	ldr	r1, [pc, #324]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2894:	7f09      	ldrb	r1, [r1, #28]
    2896:	3901      	subs	r1, #1
    2898:	4039      	ands	r1, r7
    289a:	0008      	movs	r0, r1
    289c:	4241      	negs	r1, r0
    289e:	4141      	adcs	r1, r0
    28a0:	b2cd      	uxtb	r5, r1

	switch (type) {
    28a2:	0a1b      	lsrs	r3, r3, #8
    28a4:	2b02      	cmp	r3, #2
    28a6:	d012      	beq.n	28ce <usbdc_cb_ctl_req+0x186>
    28a8:	2b03      	cmp	r3, #3
    28aa:	d02c      	beq.n	2906 <usbdc_cb_ctl_req+0x1be>
    28ac:	2b01      	cmp	r3, #1
    28ae:	d000      	beq.n	28b2 <usbdc_cb_ctl_req+0x16a>
    28b0:	e086      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_DT_DEVICE:
		if (length > 0x12) {
			length = 0x12;
		}
		usbdc_xfer(ep, usbdc.desces.ls_fs->sod, length, false);
    28b2:	1c3a      	adds	r2, r7, #0
    28b4:	2f12      	cmp	r7, #18
    28b6:	d900      	bls.n	28ba <usbdc_cb_ctl_req+0x172>
    28b8:	2212      	movs	r2, #18
    28ba:	b292      	uxth	r2, r2
    28bc:	4b46      	ldr	r3, [pc, #280]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	6819      	ldr	r1, [r3, #0]
    28c2:	2300      	movs	r3, #0
    28c4:	0030      	movs	r0, r6
    28c6:	4c42      	ldr	r4, [pc, #264]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    28c8:	47a0      	blx	r4
		return true;
    28ca:	2401      	movs	r4, #1
    28cc:	e078      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_DT_CONFIG:
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    28ce:	4b42      	ldr	r3, [pc, #264]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	3201      	adds	r2, #1
    28d4:	b2d2      	uxtb	r2, r2
    28d6:	6859      	ldr	r1, [r3, #4]
    28d8:	6818      	ldr	r0, [r3, #0]
    28da:	4b41      	ldr	r3, [pc, #260]	; (29e0 <usbdc_cb_ctl_req+0x298>)
    28dc:	4798      	blx	r3
		if (NULL == cfg_desc) {
    28de:	2800      	cmp	r0, #0
    28e0:	d06e      	beq.n	29c0 <usbdc_cb_ctl_req+0x278>
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    28e2:	78c3      	ldrb	r3, [r0, #3]
    28e4:	021b      	lsls	r3, r3, #8
    28e6:	7882      	ldrb	r2, [r0, #2]
    28e8:	18d3      	adds	r3, r2, r3
    28ea:	b29b      	uxth	r3, r3
			return false;
		}
		total_len = usb_cfg_desc_total_len(cfg_desc);
		if (length <= total_len) {
    28ec:	429f      	cmp	r7, r3
    28ee:	d901      	bls.n	28f4 <usbdc_cb_ctl_req+0x1ac>
			need_zlp = false;
		} else {
			length = total_len;
    28f0:	001f      	movs	r7, r3
    28f2:	e000      	b.n	28f6 <usbdc_cb_ctl_req+0x1ae>
		if (NULL == cfg_desc) {
			return false;
		}
		total_len = usb_cfg_desc_total_len(cfg_desc);
		if (length <= total_len) {
			need_zlp = false;
    28f4:	2500      	movs	r5, #0
		} else {
			length = total_len;
		}
		usbdc_xfer(ep, cfg_desc, length, need_zlp);
    28f6:	002b      	movs	r3, r5
    28f8:	003a      	movs	r2, r7
    28fa:	0001      	movs	r1, r0
    28fc:	0030      	movs	r0, r6
    28fe:	4c34      	ldr	r4, [pc, #208]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    2900:	47a0      	blx	r4
		return true;
    2902:	2401      	movs	r4, #1
    2904:	e05c      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_DT_STRING:
		str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2906:	4b34      	ldr	r3, [pc, #208]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	6859      	ldr	r1, [r3, #4]
    290c:	6818      	ldr	r0, [r3, #0]
    290e:	4b35      	ldr	r3, [pc, #212]	; (29e4 <usbdc_cb_ctl_req+0x29c>)
    2910:	4798      	blx	r3
		if (NULL == str_desc) {
    2912:	2800      	cmp	r0, #0
    2914:	d054      	beq.n	29c0 <usbdc_cb_ctl_req+0x278>
			return false;
		}
		total_len = str_desc[0];
    2916:	7803      	ldrb	r3, [r0, #0]
		if (length <= total_len) {
    2918:	429f      	cmp	r7, r3
    291a:	d901      	bls.n	2920 <usbdc_cb_ctl_req+0x1d8>
			need_zlp = false;
		} else {
			length = total_len;
    291c:	001f      	movs	r7, r3
    291e:	e000      	b.n	2922 <usbdc_cb_ctl_req+0x1da>
		if (NULL == str_desc) {
			return false;
		}
		total_len = str_desc[0];
		if (length <= total_len) {
			need_zlp = false;
    2920:	2500      	movs	r5, #0
		} else {
			length = total_len;
		}
		usbdc_xfer(ep, str_desc, length, need_zlp);
    2922:	002b      	movs	r3, r5
    2924:	003a      	movs	r2, r7
    2926:	0001      	movs	r1, r0
    2928:	0030      	movs	r0, r6
    292a:	4c29      	ldr	r4, [pc, #164]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    292c:	47a0      	blx	r4
		return true;
    292e:	2401      	movs	r4, #1
    2930:	e046      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
{
	switch (req->bRequest) {
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2932:	4b29      	ldr	r3, [pc, #164]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2934:	7eda      	ldrb	r2, [r3, #27]
    2936:	6959      	ldr	r1, [r3, #20]
    2938:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    293a:	6959      	ldr	r1, [r3, #20]
    293c:	2300      	movs	r3, #0
    293e:	2201      	movs	r2, #1
    2940:	0030      	movs	r0, r6
    2942:	4c23      	ldr	r4, [pc, #140]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    2944:	47a0      	blx	r4
		return true;
    2946:	2401      	movs	r4, #1
    2948:	e03a      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    294a:	231f      	movs	r3, #31
    294c:	401a      	ands	r2, r3
    294e:	b2d3      	uxtb	r3, r2
    2950:	2b01      	cmp	r3, #1
    2952:	d902      	bls.n	295a <usbdc_cb_ctl_req+0x212>
    2954:	2a02      	cmp	r2, #2
    2956:	d003      	beq.n	2960 <usbdc_cb_ctl_req+0x218>
    2958:	e032      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    295a:	2300      	movs	r3, #0
    295c:	9300      	str	r3, [sp, #0]
    295e:	e008      	b.n	2972 <usbdc_cb_ctl_req+0x22a>
		break;
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2960:	7928      	ldrb	r0, [r5, #4]
    2962:	2102      	movs	r1, #2
    2964:	4b1b      	ldr	r3, [pc, #108]	; (29d4 <usbdc_cb_ctl_req+0x28c>)
    2966:	4798      	blx	r3
		if (st < 0) {
    2968:	2800      	cmp	r0, #0
    296a:	db29      	blt.n	29c0 <usbdc_cb_ctl_req+0x278>
			return false;
		}
		st = st & 0x1;
    296c:	2301      	movs	r3, #1
    296e:	4018      	ands	r0, r3
    2970:	9000      	str	r0, [sp, #0]
		break;
	default:
		return false;
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    2972:	4c19      	ldr	r4, [pc, #100]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2974:	2202      	movs	r2, #2
    2976:	4669      	mov	r1, sp
    2978:	6960      	ldr	r0, [r4, #20]
    297a:	4b1b      	ldr	r3, [pc, #108]	; (29e8 <usbdc_cb_ctl_req+0x2a0>)
    297c:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    297e:	6961      	ldr	r1, [r4, #20]
    2980:	2300      	movs	r3, #0
    2982:	2202      	movs	r2, #2
    2984:	0030      	movs	r0, r6
    2986:	4c12      	ldr	r4, [pc, #72]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    2988:	47a0      	blx	r4
	return true;
    298a:	2401      	movs	r4, #1
    298c:	e018      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    298e:	4b12      	ldr	r3, [pc, #72]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    2990:	691e      	ldr	r6, [r3, #16]
	int32_t              rc;

	while (NULL != func) {
    2992:	2e00      	cmp	r6, #0
    2994:	d014      	beq.n	29c0 <usbdc_cb_ctl_req+0x278>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2996:	002a      	movs	r2, r5
    2998:	2102      	movs	r1, #2
    299a:	0030      	movs	r0, r6
    299c:	6873      	ldr	r3, [r6, #4]
    299e:	4798      	blx	r3
    29a0:	2800      	cmp	r0, #0
    29a2:	da03      	bge.n	29ac <usbdc_cb_ctl_req+0x264>
			func = func->next;
    29a4:	6836      	ldr	r6, [r6, #0]
static bool usbdc_get_interface(struct usb_req *req)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
	int32_t              rc;

	while (NULL != func) {
    29a6:	2e00      	cmp	r6, #0
    29a8:	d1f5      	bne.n	2996 <usbdc_cb_ctl_req+0x24e>
    29aa:	e009      	b.n	29c0 <usbdc_cb_ctl_req+0x278>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
			func = func->next;
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    29ac:	4b0a      	ldr	r3, [pc, #40]	; (29d8 <usbdc_cb_ctl_req+0x290>)
    29ae:	695a      	ldr	r2, [r3, #20]
    29b0:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    29b2:	6959      	ldr	r1, [r3, #20]
    29b4:	2300      	movs	r3, #0
    29b6:	2201      	movs	r2, #1
    29b8:	2000      	movs	r0, #0
    29ba:	4c05      	ldr	r4, [pc, #20]	; (29d0 <usbdc_cb_ctl_req+0x288>)
    29bc:	47a0      	blx	r4
			return true;
    29be:	2401      	movs	r4, #1
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
	default:
		return false;
	}
}
    29c0:	0020      	movs	r0, r4
    29c2:	b003      	add	sp, #12
    29c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	00002545 	.word	0x00002545
    29cc:	00002ec0 	.word	0x00002ec0
    29d0:	0000272d 	.word	0x0000272d
    29d4:	0000080d 	.word	0x0000080d
    29d8:	20000668 	.word	0x20000668
    29dc:	00002afd 	.word	0x00002afd
    29e0:	00002b79 	.word	0x00002b79
    29e4:	00002be5 	.word	0x00002be5
    29e8:	00002d51 	.word	0x00002d51

000029ec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    29ec:	b510      	push	{r4, lr}
	switch (type) {
    29ee:	2801      	cmp	r0, #1
    29f0:	d009      	beq.n	2a06 <usbdc_register_handler+0x1a>
    29f2:	2800      	cmp	r0, #0
    29f4:	d002      	beq.n	29fc <usbdc_register_handler+0x10>
    29f6:	2802      	cmp	r0, #2
    29f8:	d00a      	beq.n	2a10 <usbdc_register_handler+0x24>
    29fa:	e00d      	b.n	2a18 <usbdc_register_handler+0x2c>
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    29fc:	4807      	ldr	r0, [pc, #28]	; (2a1c <usbdc_register_handler+0x30>)
    29fe:	3004      	adds	r0, #4
    2a00:	4b07      	ldr	r3, [pc, #28]	; (2a20 <usbdc_register_handler+0x34>)
    2a02:	4798      	blx	r3
		break;
    2a04:	e008      	b.n	2a18 <usbdc_register_handler+0x2c>
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2a06:	4805      	ldr	r0, [pc, #20]	; (2a1c <usbdc_register_handler+0x30>)
    2a08:	3008      	adds	r0, #8
    2a0a:	4b05      	ldr	r3, [pc, #20]	; (2a20 <usbdc_register_handler+0x34>)
    2a0c:	4798      	blx	r3
		break;
    2a0e:	e003      	b.n	2a18 <usbdc_register_handler+0x2c>
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2a10:	4802      	ldr	r0, [pc, #8]	; (2a1c <usbdc_register_handler+0x30>)
    2a12:	300c      	adds	r0, #12
    2a14:	4b02      	ldr	r3, [pc, #8]	; (2a20 <usbdc_register_handler+0x34>)
    2a16:	4798      	blx	r3
		break;
	default:
		break;
	}
}
    2a18:	bd10      	pop	{r4, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	20000668 	.word	0x20000668
    2a20:	000008f9 	.word	0x000008f9

00002a24 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2a28:	1e43      	subs	r3, r0, #1
    2a2a:	4198      	sbcs	r0, r3
    2a2c:	b2c0      	uxtb	r0, r0
    2a2e:	4a0c      	ldr	r2, [pc, #48]	; (2a60 <usbdc_init+0x3c>)
    2a30:	490c      	ldr	r1, [pc, #48]	; (2a64 <usbdc_init+0x40>)
    2a32:	4b0d      	ldr	r3, [pc, #52]	; (2a68 <usbdc_init+0x44>)
    2a34:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2a36:	4b0d      	ldr	r3, [pc, #52]	; (2a6c <usbdc_init+0x48>)
    2a38:	4798      	blx	r3
	if (rc < 0) {
    2a3a:	2800      	cmp	r0, #0
    2a3c:	db0e      	blt.n	2a5c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2a3e:	4d0c      	ldr	r5, [pc, #48]	; (2a70 <usbdc_init+0x4c>)
    2a40:	2220      	movs	r2, #32
    2a42:	2100      	movs	r1, #0
    2a44:	0028      	movs	r0, r5
    2a46:	4b0b      	ldr	r3, [pc, #44]	; (2a74 <usbdc_init+0x50>)
    2a48:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2a4a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2a4c:	490a      	ldr	r1, [pc, #40]	; (2a78 <usbdc_init+0x54>)
    2a4e:	2000      	movs	r0, #0
    2a50:	4c0a      	ldr	r4, [pc, #40]	; (2a7c <usbdc_init+0x58>)
    2a52:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2a54:	490a      	ldr	r1, [pc, #40]	; (2a80 <usbdc_init+0x5c>)
    2a56:	2001      	movs	r0, #1
    2a58:	47a0      	blx	r4

	return 0;
    2a5a:	2000      	movs	r0, #0
}
    2a5c:	bd70      	pop	{r4, r5, r6, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	00000299 	.word	0x00000299
    2a64:	00002ef0 	.word	0x00002ef0
    2a68:	000008c9 	.word	0x000008c9
    2a6c:	00000559 	.word	0x00000559
    2a70:	20000668 	.word	0x20000668
    2a74:	00002d63 	.word	0x00002d63
    2a78:	00002585 	.word	0x00002585
    2a7c:	000005cd 	.word	0x000005cd
    2a80:	00002709 	.word	0x00002709

00002a84 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2a84:	b510      	push	{r4, lr}
    2a86:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2a88:	4802      	ldr	r0, [pc, #8]	; (2a94 <usbdc_register_function+0x10>)
    2a8a:	3010      	adds	r0, #16
    2a8c:	4b02      	ldr	r3, [pc, #8]	; (2a98 <usbdc_register_function+0x14>)
    2a8e:	4798      	blx	r3
}
    2a90:	bd10      	pop	{r4, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000668 	.word	0x20000668
    2a98:	000008f9 	.word	0x000008f9

00002a9c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2a9c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2a9e:	4b0b      	ldr	r3, [pc, #44]	; (2acc <usbdc_start+0x30>)
    2aa0:	7e9b      	ldrb	r3, [r3, #26]
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d10c      	bne.n	2ac0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    2aa6:	2800      	cmp	r0, #0
    2aa8:	d00d      	beq.n	2ac6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    2aaa:	4b08      	ldr	r3, [pc, #32]	; (2acc <usbdc_start+0x30>)
    2aac:	6018      	str	r0, [r3, #0]
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2aae:	6802      	ldr	r2, [r0, #0]
    2ab0:	79d2      	ldrb	r2, [r2, #7]
    2ab2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2ab4:	2201      	movs	r2, #1
    2ab6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2ab8:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <usbdc_start+0x34>)
    2aba:	4798      	blx	r3
	return ERR_NONE;
    2abc:	2000      	movs	r0, #0
    2abe:	e004      	b.n	2aca <usbdc_start+0x2e>
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
	if (usbdc.state >= USBD_S_POWER) {
		return ERR_BUSY;
    2ac0:	2004      	movs	r0, #4
    2ac2:	4240      	negs	r0, r0
    2ac4:	e001      	b.n	2aca <usbdc_start+0x2e>
	}

	if (desces) {
		usbdc.desces.ls_fs = desces;
	} else {
		return ERR_BAD_DATA;
    2ac6:	2009      	movs	r0, #9
    2ac8:	4240      	negs	r0, r0

	usbdc.ctrl_size = desces->sod[7];
	usbdc.state     = USBD_S_POWER;
	usb_d_enable();
	return ERR_NONE;
}
    2aca:	bd10      	pop	{r4, pc}
    2acc:	20000668 	.word	0x20000668
    2ad0:	000005d9 	.word	0x000005d9

00002ad4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2ad4:	b510      	push	{r4, lr}
	usb_d_attach();
    2ad6:	4b01      	ldr	r3, [pc, #4]	; (2adc <usbdc_attach+0x8>)
    2ad8:	4798      	blx	r3
}
    2ada:	bd10      	pop	{r4, pc}
    2adc:	000005e5 	.word	0x000005e5

00002ae0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2ae0:	4b01      	ldr	r3, [pc, #4]	; (2ae8 <usbdc_get_ctrl_buffer+0x8>)
    2ae2:	6958      	ldr	r0, [r3, #20]
}
    2ae4:	4770      	bx	lr
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	20000668 	.word	0x20000668

00002aec <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2aec:	4b02      	ldr	r3, [pc, #8]	; (2af8 <usbdc_get_state+0xc>)
    2aee:	7e98      	ldrb	r0, [r3, #26]
    2af0:	06c3      	lsls	r3, r0, #27
    2af2:	d500      	bpl.n	2af6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2af4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2af6:	4770      	bx	lr
    2af8:	20000668 	.word	0x20000668

00002afc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2afc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2afe:	4288      	cmp	r0, r1
    2b00:	d211      	bcs.n	2b26 <usb_find_desc+0x2a>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    2b02:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2b04:	2b01      	cmp	r3, #1
    2b06:	d910      	bls.n	2b2a <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    2b08:	7844      	ldrb	r4, [r0, #1]
    2b0a:	4294      	cmp	r4, r2
    2b0c:	d106      	bne.n	2b1c <usb_find_desc+0x20>
    2b0e:	e00f      	b.n	2b30 <usb_find_desc+0x34>
    2b10:	7803      	ldrb	r3, [r0, #0]
uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
		_desc_len_check();
    2b12:	2b01      	cmp	r3, #1
    2b14:	d90b      	bls.n	2b2e <usb_find_desc+0x32>
		if (type == usb_desc_type(desc)) {
    2b16:	7844      	ldrb	r4, [r0, #1]
    2b18:	4294      	cmp	r4, r2
    2b1a:	d009      	beq.n	2b30 <usb_find_desc+0x34>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2b1c:	18c0      	adds	r0, r0, r3

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2b1e:	4281      	cmp	r1, r0
    2b20:	d8f6      	bhi.n	2b10 <usb_find_desc+0x14>
		if (type == usb_desc_type(desc)) {
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2b22:	2000      	movs	r0, #0
    2b24:	e004      	b.n	2b30 <usb_find_desc+0x34>
    2b26:	2000      	movs	r0, #0
    2b28:	e002      	b.n	2b30 <usb_find_desc+0x34>
uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
		_desc_len_check();
    2b2a:	2000      	movs	r0, #0
    2b2c:	e000      	b.n	2b30 <usb_find_desc+0x34>
    2b2e:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    2b30:	bd10      	pop	{r4, pc}
    2b32:	46c0      	nop			; (mov r8, r8)

00002b34 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2b34:	4288      	cmp	r0, r1
    2b36:	d215      	bcs.n	2b64 <usb_find_ep_desc+0x30>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    2b38:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2b3a:	2b01      	cmp	r3, #1
    2b3c:	d914      	bls.n	2b68 <usb_find_ep_desc+0x34>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor type
 */
static inline uint8_t usb_desc_type(const uint8_t *desc)
{
	return desc[1];
    2b3e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2b40:	2a04      	cmp	r2, #4
    2b42:	d013      	beq.n	2b6c <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2b44:	2a05      	cmp	r2, #5
    2b46:	d108      	bne.n	2b5a <usb_find_ep_desc+0x26>
    2b48:	e015      	b.n	2b76 <usb_find_ep_desc+0x42>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    2b4a:	7803      	ldrb	r3, [r0, #0]
uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
		_desc_len_check();
    2b4c:	2b01      	cmp	r3, #1
    2b4e:	d90f      	bls.n	2b70 <usb_find_ep_desc+0x3c>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor type
 */
static inline uint8_t usb_desc_type(const uint8_t *desc)
{
	return desc[1];
    2b50:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2b52:	2a04      	cmp	r2, #4
    2b54:	d00e      	beq.n	2b74 <usb_find_ep_desc+0x40>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2b56:	2a05      	cmp	r2, #5
    2b58:	d00d      	beq.n	2b76 <usb_find_ep_desc+0x42>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2b5a:	18c0      	adds	r0, r0, r3

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2b5c:	4281      	cmp	r1, r0
    2b5e:	d8f4      	bhi.n	2b4a <usb_find_ep_desc+0x16>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2b60:	2000      	movs	r0, #0
    2b62:	e008      	b.n	2b76 <usb_find_ep_desc+0x42>
    2b64:	2000      	movs	r0, #0
    2b66:	e006      	b.n	2b76 <usb_find_ep_desc+0x42>
uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
		_desc_len_check();
    2b68:	2000      	movs	r0, #0
    2b6a:	e004      	b.n	2b76 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2b6c:	2000      	movs	r0, #0
    2b6e:	e002      	b.n	2b76 <usb_find_ep_desc+0x42>
uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
		_desc_len_check();
    2b70:	2000      	movs	r0, #0
    2b72:	e000      	b.n	2b76 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2b74:	2000      	movs	r0, #0
}
    2b76:	4770      	bx	lr

00002b78 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2b78:	b570      	push	{r4, r5, r6, lr}
    2b7a:	000c      	movs	r4, r1
    2b7c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2b7e:	2202      	movs	r2, #2
    2b80:	4b17      	ldr	r3, [pc, #92]	; (2be0 <usb_find_cfg_desc+0x68>)
    2b82:	4798      	blx	r3
	if (!desc) {
    2b84:	2800      	cmp	r0, #0
    2b86:	d01e      	beq.n	2bc6 <usb_find_cfg_desc+0x4e>
		return NULL;
	}
	while (desc < eof) {
    2b88:	4284      	cmp	r4, r0
    2b8a:	d91e      	bls.n	2bca <usb_find_cfg_desc+0x52>
		_desc_len_check();
    2b8c:	7803      	ldrb	r3, [r0, #0]
    2b8e:	2b01      	cmp	r3, #1
    2b90:	d91d      	bls.n	2bce <usb_find_cfg_desc+0x56>
		if (desc[1] != USB_DT_CONFIG) {
    2b92:	7843      	ldrb	r3, [r0, #1]
    2b94:	2b02      	cmp	r3, #2
    2b96:	d11c      	bne.n	2bd2 <usb_find_cfg_desc+0x5a>
			break;
		}
		if (desc[5] == cfg_value) {
    2b98:	7943      	ldrb	r3, [r0, #5]
    2b9a:	42ab      	cmp	r3, r5
    2b9c:	d109      	bne.n	2bb2 <usb_find_cfg_desc+0x3a>
    2b9e:	e01d      	b.n	2bdc <usb_find_cfg_desc+0x64>
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    2ba0:	7803      	ldrb	r3, [r0, #0]
    2ba2:	2b01      	cmp	r3, #1
    2ba4:	d917      	bls.n	2bd6 <usb_find_cfg_desc+0x5e>
		if (desc[1] != USB_DT_CONFIG) {
    2ba6:	7843      	ldrb	r3, [r0, #1]
    2ba8:	2b02      	cmp	r3, #2
    2baa:	d116      	bne.n	2bda <usb_find_cfg_desc+0x62>
			break;
		}
		if (desc[5] == cfg_value) {
    2bac:	7943      	ldrb	r3, [r0, #5]
    2bae:	42ab      	cmp	r3, r5
    2bb0:	d014      	beq.n	2bdc <usb_find_cfg_desc+0x64>
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2bb2:	78c3      	ldrb	r3, [r0, #3]
    2bb4:	021b      	lsls	r3, r3, #8
    2bb6:	7882      	ldrb	r2, [r0, #2]
    2bb8:	18d3      	adds	r3, r2, r3
    2bba:	b29b      	uxth	r3, r3
    2bbc:	18c0      	adds	r0, r0, r3

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
	}
	while (desc < eof) {
    2bbe:	4284      	cmp	r4, r0
    2bc0:	d8ee      	bhi.n	2ba0 <usb_find_cfg_desc+0x28>
		if (desc[5] == cfg_value) {
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2bc2:	2000      	movs	r0, #0
    2bc4:	e00a      	b.n	2bdc <usb_find_cfg_desc+0x64>
{
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e008      	b.n	2bdc <usb_find_cfg_desc+0x64>
		if (desc[5] == cfg_value) {
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2bca:	2000      	movs	r0, #0
    2bcc:	e006      	b.n	2bdc <usb_find_cfg_desc+0x64>
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    2bce:	2000      	movs	r0, #0
    2bd0:	e004      	b.n	2bdc <usb_find_cfg_desc+0x64>
		if (desc[5] == cfg_value) {
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2bd2:	2000      	movs	r0, #0
    2bd4:	e002      	b.n	2bdc <usb_find_cfg_desc+0x64>
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
	if (!desc) {
		return NULL;
	}
	while (desc < eof) {
		_desc_len_check();
    2bd6:	2000      	movs	r0, #0
    2bd8:	e000      	b.n	2bdc <usb_find_cfg_desc+0x64>
		if (desc[5] == cfg_value) {
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2bda:	2000      	movs	r0, #0
}
    2bdc:	bd70      	pop	{r4, r5, r6, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	00002afd 	.word	0x00002afd

00002be4 <usb_find_str_desc>:

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2be6:	000d      	movs	r5, r1
    2be8:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2bea:	4288      	cmp	r0, r1
    2bec:	d212      	bcs.n	2c14 <usb_find_str_desc+0x30>
    2bee:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2bf0:	4e0b      	ldr	r6, [pc, #44]	; (2c20 <usb_find_str_desc+0x3c>)
    2bf2:	2203      	movs	r2, #3
    2bf4:	0029      	movs	r1, r5
    2bf6:	47b0      	blx	r6
		if (desc) {
    2bf8:	2800      	cmp	r0, #0
    2bfa:	d00d      	beq.n	2c18 <usb_find_str_desc+0x34>
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    2bfc:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    2bfe:	2b01      	cmp	r3, #1
    2c00:	d90c      	bls.n	2c1c <usb_find_str_desc+0x38>
			if (i == str_index) {
    2c02:	42a7      	cmp	r7, r4
    2c04:	d00b      	beq.n	2c1e <usb_find_str_desc+0x3a>
				return desc;
			}
			i++;
    2c06:	3401      	adds	r4, #1
    2c08:	b2e4      	uxtb	r4, r4
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2c0a:	18c0      	adds	r0, r0, r3
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2c0c:	4285      	cmp	r5, r0
    2c0e:	d8f0      	bhi.n	2bf2 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2c10:	2000      	movs	r0, #0
    2c12:	e004      	b.n	2c1e <usb_find_str_desc+0x3a>
    2c14:	2000      	movs	r0, #0
    2c16:	e002      	b.n	2c1e <usb_find_str_desc+0x3a>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    2c18:	2000      	movs	r0, #0
    2c1a:	e000      	b.n	2c1e <usb_find_str_desc+0x3a>
	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
		if (desc) {
			_desc_len_check();
    2c1c:	2000      	movs	r0, #0
		} else {
			return NULL;
		}
	}
	return NULL;
}
    2c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c20:	00002afd 	.word	0x00002afd

00002c24 <main>:
#include "atmel_start.h"
#include "atmel_start_pins.h"

int main(void)
{
    2c24:	b510      	push	{r4, lr}
	atmel_start_init();
    2c26:	4b03      	ldr	r3, [pc, #12]	; (2c34 <main+0x10>)
    2c28:	4798      	blx	r3
	cdcd_acm_example();
    2c2a:	4b03      	ldr	r3, [pc, #12]	; (2c38 <main+0x14>)
    2c2c:	4798      	blx	r3
}
    2c2e:	2000      	movs	r0, #0
    2c30:	bd10      	pop	{r4, pc}
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	00000115 	.word	0x00000115
    2c38:	00002cc5 	.word	0x00002cc5

00002c3c <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    2c3c:	b500      	push	{lr}
    2c3e:	b083      	sub	sp, #12
    2c40:	1c03      	adds	r3, r0, #0
    2c42:	aa01      	add	r2, sp, #4
    2c44:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    2c46:	07db      	lsls	r3, r3, #31
    2c48:	d503      	bpl.n	2c52 <usb_device_cb_state_c+0x16>
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, 64);
    2c4a:	2140      	movs	r1, #64	; 0x40
    2c4c:	4802      	ldr	r0, [pc, #8]	; (2c58 <usb_device_cb_state_c+0x1c>)
    2c4e:	4b03      	ldr	r3, [pc, #12]	; (2c5c <usb_device_cb_state_c+0x20>)
    2c50:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    2c52:	2000      	movs	r0, #0
    2c54:	b003      	add	sp, #12
    2c56:	bd00      	pop	{pc}
    2c58:	20000688 	.word	0x20000688
    2c5c:	00002445 	.word	0x00002445

00002c60 <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    2c60:	b510      	push	{r4, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, 64);
    2c62:	2140      	movs	r1, #64	; 0x40
    2c64:	4802      	ldr	r0, [pc, #8]	; (2c70 <usb_device_cb_bulk_in+0x10>)
    2c66:	4b03      	ldr	r3, [pc, #12]	; (2c74 <usb_device_cb_bulk_in+0x14>)
    2c68:	4798      	blx	r3

	/* No error. */
	return false;
}
    2c6a:	2000      	movs	r0, #0
    2c6c:	bd10      	pop	{r4, pc}
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	20000688 	.word	0x20000688
    2c74:	00002445 	.word	0x00002445

00002c78 <usb_device_cb_bulk_out>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool usb_device_cb_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    2c78:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    2c7a:	0011      	movs	r1, r2
    2c7c:	4802      	ldr	r0, [pc, #8]	; (2c88 <usb_device_cb_bulk_out+0x10>)
    2c7e:	4b03      	ldr	r3, [pc, #12]	; (2c8c <usb_device_cb_bulk_out+0x14>)
    2c80:	4798      	blx	r3

	/* No error. */
	return false;
}
    2c82:	2000      	movs	r0, #0
    2c84:	bd10      	pop	{r4, pc}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	20000688 	.word	0x20000688
    2c8c:	00002471 	.word	0x00002471

00002c90 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2c90:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2c92:	4806      	ldr	r0, [pc, #24]	; (2cac <cdc_device_acm_init+0x1c>)
    2c94:	3040      	adds	r0, #64	; 0x40
    2c96:	4b06      	ldr	r3, [pc, #24]	; (2cb0 <cdc_device_acm_init+0x20>)
    2c98:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2c9a:	4b06      	ldr	r3, [pc, #24]	; (2cb4 <cdc_device_acm_init+0x24>)
    2c9c:	4798      	blx	r3

	usbdc_start(&single_desc);
    2c9e:	4806      	ldr	r0, [pc, #24]	; (2cb8 <cdc_device_acm_init+0x28>)
    2ca0:	4b06      	ldr	r3, [pc, #24]	; (2cbc <cdc_device_acm_init+0x2c>)
    2ca2:	4798      	blx	r3
	usbdc_attach();
    2ca4:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <cdc_device_acm_init+0x30>)
    2ca6:	4798      	blx	r3
}
    2ca8:	bd10      	pop	{r4, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	20000688 	.word	0x20000688
    2cb0:	00002a25 	.word	0x00002a25
    2cb4:	00002401 	.word	0x00002401
    2cb8:	20000008 	.word	0x20000008
    2cbc:	00002a9d 	.word	0x00002a9d
    2cc0:	00002ad5 	.word	0x00002ad5

00002cc4 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    2cc4:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    2cc6:	4c07      	ldr	r4, [pc, #28]	; (2ce4 <cdcd_acm_example+0x20>)
    2cc8:	47a0      	blx	r4
    2cca:	2800      	cmp	r0, #0
    2ccc:	d0fc      	beq.n	2cc8 <cdcd_acm_example+0x4>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    2cce:	4906      	ldr	r1, [pc, #24]	; (2ce8 <cdcd_acm_example+0x24>)
    2cd0:	2000      	movs	r0, #0
    2cd2:	4c06      	ldr	r4, [pc, #24]	; (2cec <cdcd_acm_example+0x28>)
    2cd4:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    2cd6:	4906      	ldr	r1, [pc, #24]	; (2cf0 <cdcd_acm_example+0x2c>)
    2cd8:	2001      	movs	r0, #1
    2cda:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    2cdc:	4905      	ldr	r1, [pc, #20]	; (2cf4 <cdcd_acm_example+0x30>)
    2cde:	2003      	movs	r0, #3
    2ce0:	47a0      	blx	r4
    2ce2:	e7fe      	b.n	2ce2 <cdcd_acm_example+0x1e>
    2ce4:	000024f1 	.word	0x000024f1
    2ce8:	00002c79 	.word	0x00002c79
    2cec:	0000249d 	.word	0x0000249d
    2cf0:	00002c61 	.word	0x00002c61
    2cf4:	00002c3d 	.word	0x00002c3d

00002cf8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2cf8:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2cfa:	4b01      	ldr	r3, [pc, #4]	; (2d00 <usb_init+0x8>)
    2cfc:	4798      	blx	r3
}
    2cfe:	bd10      	pop	{r4, pc}
    2d00:	00002c91 	.word	0x00002c91

00002d04 <__libc_init_array>:
    2d04:	4b0e      	ldr	r3, [pc, #56]	; (2d40 <__libc_init_array+0x3c>)
    2d06:	b570      	push	{r4, r5, r6, lr}
    2d08:	2500      	movs	r5, #0
    2d0a:	001e      	movs	r6, r3
    2d0c:	4c0d      	ldr	r4, [pc, #52]	; (2d44 <__libc_init_array+0x40>)
    2d0e:	1ae4      	subs	r4, r4, r3
    2d10:	10a4      	asrs	r4, r4, #2
    2d12:	42a5      	cmp	r5, r4
    2d14:	d004      	beq.n	2d20 <__libc_init_array+0x1c>
    2d16:	00ab      	lsls	r3, r5, #2
    2d18:	58f3      	ldr	r3, [r6, r3]
    2d1a:	4798      	blx	r3
    2d1c:	3501      	adds	r5, #1
    2d1e:	e7f8      	b.n	2d12 <__libc_init_array+0xe>
    2d20:	f000 f8f2 	bl	2f08 <_init>
    2d24:	4b08      	ldr	r3, [pc, #32]	; (2d48 <__libc_init_array+0x44>)
    2d26:	2500      	movs	r5, #0
    2d28:	001e      	movs	r6, r3
    2d2a:	4c08      	ldr	r4, [pc, #32]	; (2d4c <__libc_init_array+0x48>)
    2d2c:	1ae4      	subs	r4, r4, r3
    2d2e:	10a4      	asrs	r4, r4, #2
    2d30:	42a5      	cmp	r5, r4
    2d32:	d004      	beq.n	2d3e <__libc_init_array+0x3a>
    2d34:	00ab      	lsls	r3, r5, #2
    2d36:	58f3      	ldr	r3, [r6, r3]
    2d38:	4798      	blx	r3
    2d3a:	3501      	adds	r5, #1
    2d3c:	e7f8      	b.n	2d30 <__libc_init_array+0x2c>
    2d3e:	bd70      	pop	{r4, r5, r6, pc}
    2d40:	00002f14 	.word	0x00002f14
    2d44:	00002f14 	.word	0x00002f14
    2d48:	00002f14 	.word	0x00002f14
    2d4c:	00002f18 	.word	0x00002f18

00002d50 <memcpy>:
    2d50:	2300      	movs	r3, #0
    2d52:	b510      	push	{r4, lr}
    2d54:	429a      	cmp	r2, r3
    2d56:	d003      	beq.n	2d60 <memcpy+0x10>
    2d58:	5ccc      	ldrb	r4, [r1, r3]
    2d5a:	54c4      	strb	r4, [r0, r3]
    2d5c:	3301      	adds	r3, #1
    2d5e:	e7f9      	b.n	2d54 <memcpy+0x4>
    2d60:	bd10      	pop	{r4, pc}

00002d62 <memset>:
    2d62:	0003      	movs	r3, r0
    2d64:	1882      	adds	r2, r0, r2
    2d66:	4293      	cmp	r3, r2
    2d68:	d002      	beq.n	2d70 <memset+0xe>
    2d6a:	7019      	strb	r1, [r3, #0]
    2d6c:	3301      	adds	r3, #1
    2d6e:	e7fa      	b.n	2d66 <memset+0x4>
    2d70:	4770      	bx	lr
    2d72:	0000      	movs	r0, r0
    2d74:	682f2e2e 	.word	0x682f2e2e
    2d78:	752f6c61 	.word	0x752f6c61
    2d7c:	736c6974 	.word	0x736c6974
    2d80:	6372732f 	.word	0x6372732f
    2d84:	6974752f 	.word	0x6974752f
    2d88:	6c5f736c 	.word	0x6c5f736c
    2d8c:	2e747369 	.word	0x2e747369
    2d90:	00000063 	.word	0x00000063
    2d94:	682f2e2e 	.word	0x682f2e2e
    2d98:	632f6c70 	.word	0x632f6c70
    2d9c:	2f65726f 	.word	0x2f65726f
    2da0:	5f6c7068 	.word	0x5f6c7068
    2da4:	65726f63 	.word	0x65726f63
    2da8:	70306d5f 	.word	0x70306d5f
    2dac:	5f73756c 	.word	0x5f73756c
    2db0:	65736162 	.word	0x65736162
    2db4:	0000632e 	.word	0x0000632e

00002db8 <_cfgs>:
	...
    2e78:	682f2e2e 702f6c70 2f74726f 5f6c7068     ../hpl/port/hpl_
    2e88:	74726f70 0000632e 00002000 00004a25     port.c... ..%J..
    2e98:	00000804                                ....

00002e9c <_usb_ep_cfgs>:
    2e9c:	20000604 00000000 00000040 200005c4     ... ....@...... 
    2eac:	00000000 00000040 20000584 00000000     ....@...... ....
    2ebc:	00000040 000029c0 00002792 000029c0     @....)...'...)..
    2ecc:	000027b4 000029c0 0000277e 000029c0     .'...)..~'...)..
    2edc:	000029c0 000029c0 0000277e 000029c0     .)...)..~'...)..
    2eec:	000027d6 752f2e2e 642f6273 63697665     .'..../usb/devic
    2efc:	73752f65 2e636462 00000063              e/usbdc.c...

00002f08 <_init>:
    2f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f0e:	bc08      	pop	{r3}
    2f10:	469e      	mov	lr, r3
    2f12:	4770      	bx	lr

00002f14 <__init_array_start>:
    2f14:	000000dd 	.word	0x000000dd

00002f18 <_fini>:
    2f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f1e:	bc08      	pop	{r3}
    2f20:	469e      	mov	lr, r3
    2f22:	4770      	bx	lr

00002f24 <__fini_array_start>:
    2f24:	000000b5 	.word	0x000000b5
