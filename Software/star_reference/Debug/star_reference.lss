
star_reference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000116c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  0000116c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002000c  2**0
                  CONTENTS
  3 .bss          0000019c  2000000c  00001178  0002000c  2**2
                  ALLOC
  4 .stack        00002000  200001a8  00001314  0002000c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  7 .debug_info   000101bd  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fcb  00000000  00000000  0003024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003cf2  00000000  00000000  00032215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000460  00000000  00000000  00035f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  00036367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ba3d  00000000  00000000  0003683f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009006  00000000  00000000  0005227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009d1c6  00000000  00000000  0005b282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000a80  00000000  00000000  000f8448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021a8 	.word	0x200021a8
       4:	00000d9d 	.word	0x00000d9d
       8:	00000d99 	.word	0x00000d99
       c:	00000d99 	.word	0x00000d99
	...
      2c:	00000d99 	.word	0x00000d99
	...
      38:	00000d99 	.word	0x00000d99
      3c:	00000d99 	.word	0x00000d99
      40:	00000d99 	.word	0x00000d99
      44:	00000d99 	.word	0x00000d99
      48:	00000d99 	.word	0x00000d99
      4c:	000001fd 	.word	0x000001fd
      50:	00000d99 	.word	0x00000d99
      54:	00000d99 	.word	0x00000d99
      58:	000007f9 	.word	0x000007f9
      5c:	00000d99 	.word	0x00000d99
      60:	00000d99 	.word	0x00000d99
      64:	00000d99 	.word	0x00000d99
      68:	00000d99 	.word	0x00000d99
      6c:	00000d99 	.word	0x00000d99
      70:	00000d99 	.word	0x00000d99
      74:	00000d99 	.word	0x00000d99
      78:	00000d99 	.word	0x00000d99
      7c:	00000d99 	.word	0x00000d99
      80:	00000d99 	.word	0x00000d99
      84:	00000d99 	.word	0x00000d99
      88:	00000d99 	.word	0x00000d99
      8c:	00000d99 	.word	0x00000d99
      90:	00000d99 	.word	0x00000d99
      94:	00000d99 	.word	0x00000d99
      98:	00000d99 	.word	0x00000d99
      9c:	00000d99 	.word	0x00000d99
      a0:	00000d99 	.word	0x00000d99
      a4:	00000d99 	.word	0x00000d99
      a8:	00000d99 	.word	0x00000d99
      ac:	00000d99 	.word	0x00000d99
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	0000116c 	.word	0x0000116c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	0000116c 	.word	0x0000116c
     10c:	0000116c 	.word	0x0000116c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000005c1 	.word	0x000005c1
     140:	00000f75 	.word	0x00000f75
     144:	20000004 	.word	0x20000004
     148:	000f4240 	.word	0x000f4240
     14c:	20000000 	.word	0x20000000
     150:	e000e010 	.word	0xe000e010

00000154 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     154:	4b0c      	ldr	r3, [pc, #48]	; (188 <cpu_irq_enter_critical+0x34>)
     156:	681b      	ldr	r3, [r3, #0]
     158:	2b00      	cmp	r3, #0
     15a:	d110      	bne.n	17e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     15c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     160:	2b00      	cmp	r3, #0
     162:	d109      	bne.n	178 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     164:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     166:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     16a:	2200      	movs	r2, #0
     16c:	4b07      	ldr	r3, [pc, #28]	; (18c <cpu_irq_enter_critical+0x38>)
     16e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     170:	3201      	adds	r2, #1
     172:	4b07      	ldr	r3, [pc, #28]	; (190 <cpu_irq_enter_critical+0x3c>)
     174:	701a      	strb	r2, [r3, #0]
     176:	e002      	b.n	17e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     178:	2200      	movs	r2, #0
     17a:	4b05      	ldr	r3, [pc, #20]	; (190 <cpu_irq_enter_critical+0x3c>)
     17c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     17e:	4a02      	ldr	r2, [pc, #8]	; (188 <cpu_irq_enter_critical+0x34>)
     180:	6813      	ldr	r3, [r2, #0]
     182:	3301      	adds	r3, #1
     184:	6013      	str	r3, [r2, #0]
}
     186:	4770      	bx	lr
     188:	20000028 	.word	0x20000028
     18c:	20000008 	.word	0x20000008
     190:	2000002c 	.word	0x2000002c

00000194 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     194:	4b08      	ldr	r3, [pc, #32]	; (1b8 <cpu_irq_leave_critical+0x24>)
     196:	681a      	ldr	r2, [r3, #0]
     198:	3a01      	subs	r2, #1
     19a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     19c:	681b      	ldr	r3, [r3, #0]
     19e:	2b00      	cmp	r3, #0
     1a0:	d109      	bne.n	1b6 <cpu_irq_leave_critical+0x22>
     1a2:	4b06      	ldr	r3, [pc, #24]	; (1bc <cpu_irq_leave_critical+0x28>)
     1a4:	781b      	ldrb	r3, [r3, #0]
     1a6:	2b00      	cmp	r3, #0
     1a8:	d005      	beq.n	1b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1aa:	2201      	movs	r2, #1
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <cpu_irq_leave_critical+0x2c>)
     1ae:	701a      	strb	r2, [r3, #0]
     1b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1b4:	b662      	cpsie	i
	}
}
     1b6:	4770      	bx	lr
     1b8:	20000028 	.word	0x20000028
     1bc:	2000002c 	.word	0x2000002c
     1c0:	20000008 	.word	0x20000008

000001c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1c8:	ac01      	add	r4, sp, #4
     1ca:	2501      	movs	r5, #1
     1cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1ce:	2700      	movs	r7, #0
     1d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1d4:	0021      	movs	r1, r4
     1d6:	202a      	movs	r0, #42	; 0x2a
     1d8:	4e06      	ldr	r6, [pc, #24]	; (1f4 <system_board_init+0x30>)
     1da:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1dc:	2280      	movs	r2, #128	; 0x80
     1de:	00d2      	lsls	r2, r2, #3
     1e0:	4b05      	ldr	r3, [pc, #20]	; (1f8 <system_board_init+0x34>)
     1e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1e8:	0021      	movs	r1, r4
     1ea:	2002      	movs	r0, #2
     1ec:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1ee:	b003      	add	sp, #12
     1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	00000309 	.word	0x00000309
     1f8:	40002880 	.word	0x40002880

000001fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1fe:	2200      	movs	r2, #0
     200:	4b15      	ldr	r3, [pc, #84]	; (258 <EIC_Handler+0x5c>)
     202:	701a      	strb	r2, [r3, #0]
     204:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     206:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     208:	4e14      	ldr	r6, [pc, #80]	; (25c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     20a:	4c13      	ldr	r4, [pc, #76]	; (258 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     20c:	2b1f      	cmp	r3, #31
     20e:	d919      	bls.n	244 <EIC_Handler+0x48>
     210:	e00f      	b.n	232 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     212:	2100      	movs	r1, #0
     214:	e000      	b.n	218 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     216:	4912      	ldr	r1, [pc, #72]	; (260 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     218:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     21a:	009b      	lsls	r3, r3, #2
     21c:	599b      	ldr	r3, [r3, r6]
     21e:	2b00      	cmp	r3, #0
     220:	d000      	beq.n	224 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     222:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     224:	7823      	ldrb	r3, [r4, #0]
     226:	3301      	adds	r3, #1
     228:	b2db      	uxtb	r3, r3
     22a:	7023      	strb	r3, [r4, #0]
     22c:	2b0f      	cmp	r3, #15
     22e:	d9ed      	bls.n	20c <EIC_Handler+0x10>
     230:	e011      	b.n	256 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     232:	0029      	movs	r1, r5
     234:	4019      	ands	r1, r3
     236:	2201      	movs	r2, #1
     238:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     23a:	2100      	movs	r1, #0
     23c:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     23e:	4211      	tst	r1, r2
     240:	d1e7      	bne.n	212 <EIC_Handler+0x16>
     242:	e7ef      	b.n	224 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     244:	0029      	movs	r1, r5
     246:	4019      	ands	r1, r3
     248:	2201      	movs	r2, #1
     24a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     24c:	4904      	ldr	r1, [pc, #16]	; (260 <EIC_Handler+0x64>)
     24e:	6949      	ldr	r1, [r1, #20]
     250:	4211      	tst	r1, r2
     252:	d1e0      	bne.n	216 <EIC_Handler+0x1a>
     254:	e7e6      	b.n	224 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     256:	bd70      	pop	{r4, r5, r6, pc}
     258:	20000064 	.word	0x20000064
     25c:	20000068 	.word	0x20000068
     260:	40002400 	.word	0x40002400

00000264 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     264:	4a06      	ldr	r2, [pc, #24]	; (280 <_extint_enable+0x1c>)
     266:	7811      	ldrb	r1, [r2, #0]
     268:	2302      	movs	r3, #2
     26a:	430b      	orrs	r3, r1
     26c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     26e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     270:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     272:	6853      	ldr	r3, [r2, #4]
     274:	4219      	tst	r1, r3
     276:	d1fc      	bne.n	272 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     278:	6853      	ldr	r3, [r2, #4]
     27a:	4218      	tst	r0, r3
     27c:	d1f9      	bne.n	272 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     27e:	4770      	bx	lr
     280:	40002400 	.word	0x40002400

00000284 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     284:	b500      	push	{lr}
     286:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     288:	4a18      	ldr	r2, [pc, #96]	; (2ec <_system_extint_init+0x68>)
     28a:	6953      	ldr	r3, [r2, #20]
     28c:	2180      	movs	r1, #128	; 0x80
     28e:	0089      	lsls	r1, r1, #2
     290:	430b      	orrs	r3, r1
     292:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     294:	a901      	add	r1, sp, #4
     296:	2300      	movs	r3, #0
     298:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     29a:	2003      	movs	r0, #3
     29c:	4b14      	ldr	r3, [pc, #80]	; (2f0 <_system_extint_init+0x6c>)
     29e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     2a0:	2003      	movs	r0, #3
     2a2:	4b14      	ldr	r3, [pc, #80]	; (2f4 <_system_extint_init+0x70>)
     2a4:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     2a6:	4a14      	ldr	r2, [pc, #80]	; (2f8 <_system_extint_init+0x74>)
     2a8:	7811      	ldrb	r1, [r2, #0]
     2aa:	2301      	movs	r3, #1
     2ac:	430b      	orrs	r3, r1
     2ae:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2b0:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2b2:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     2b4:	6853      	ldr	r3, [r2, #4]
     2b6:	4219      	tst	r1, r3
     2b8:	d1fc      	bne.n	2b4 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     2ba:	6853      	ldr	r3, [r2, #4]
     2bc:	4218      	tst	r0, r3
     2be:	d009      	beq.n	2d4 <_system_extint_init+0x50>
     2c0:	e7f8      	b.n	2b4 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     2c2:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2c4:	428b      	cmp	r3, r1
     2c6:	d1fc      	bne.n	2c2 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2c8:	2208      	movs	r2, #8
     2ca:	4b0c      	ldr	r3, [pc, #48]	; (2fc <_system_extint_init+0x78>)
     2cc:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     2ce:	4b0c      	ldr	r3, [pc, #48]	; (300 <_system_extint_init+0x7c>)
     2d0:	4798      	blx	r3
}
     2d2:	e009      	b.n	2e8 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     2d4:	4a08      	ldr	r2, [pc, #32]	; (2f8 <_system_extint_init+0x74>)
     2d6:	7813      	ldrb	r3, [r2, #0]
     2d8:	2110      	movs	r1, #16
     2da:	438b      	bics	r3, r1
     2dc:	7013      	strb	r3, [r2, #0]
     2de:	4b09      	ldr	r3, [pc, #36]	; (304 <_system_extint_init+0x80>)
     2e0:	0019      	movs	r1, r3
     2e2:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     2e4:	2200      	movs	r2, #0
     2e6:	e7ec      	b.n	2c2 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     2e8:	b003      	add	sp, #12
     2ea:	bd00      	pop	{pc}
     2ec:	40000400 	.word	0x40000400
     2f0:	0000069d 	.word	0x0000069d
     2f4:	0000062d 	.word	0x0000062d
     2f8:	40002400 	.word	0x40002400
     2fc:	e000e100 	.word	0xe000e100
     300:	00000265 	.word	0x00000265
     304:	20000068 	.word	0x20000068

00000308 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     308:	b500      	push	{lr}
     30a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     30c:	ab01      	add	r3, sp, #4
     30e:	2280      	movs	r2, #128	; 0x80
     310:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     312:	780a      	ldrb	r2, [r1, #0]
     314:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     316:	784a      	ldrb	r2, [r1, #1]
     318:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     31a:	788a      	ldrb	r2, [r1, #2]
     31c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     31e:	0019      	movs	r1, r3
     320:	4b01      	ldr	r3, [pc, #4]	; (328 <port_pin_set_config+0x20>)
     322:	4798      	blx	r3
}
     324:	b003      	add	sp, #12
     326:	bd00      	pop	{pc}
     328:	00000799 	.word	0x00000799

0000032c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     32c:	b510      	push	{r4, lr}
	switch (clock_source) {
     32e:	2808      	cmp	r0, #8
     330:	d803      	bhi.n	33a <system_clock_source_get_hz+0xe>
     332:	0080      	lsls	r0, r0, #2
     334:	4b1c      	ldr	r3, [pc, #112]	; (3a8 <system_clock_source_get_hz+0x7c>)
     336:	581b      	ldr	r3, [r3, r0]
     338:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     33a:	2000      	movs	r0, #0
     33c:	e032      	b.n	3a4 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     33e:	4b1b      	ldr	r3, [pc, #108]	; (3ac <system_clock_source_get_hz+0x80>)
     340:	6918      	ldr	r0, [r3, #16]
     342:	e02f      	b.n	3a4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
     344:	4b1a      	ldr	r3, [pc, #104]	; (3b0 <system_clock_source_get_hz+0x84>)
     346:	7d18      	ldrb	r0, [r3, #20]
     348:	0700      	lsls	r0, r0, #28
     34a:	0f80      	lsrs	r0, r0, #30
     34c:	3001      	adds	r0, #1
     34e:	4b19      	ldr	r3, [pc, #100]	; (3b4 <system_clock_source_get_hz+0x88>)
     350:	4358      	muls	r0, r3
     352:	e027      	b.n	3a4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     354:	4b15      	ldr	r3, [pc, #84]	; (3ac <system_clock_source_get_hz+0x80>)
     356:	6958      	ldr	r0, [r3, #20]
     358:	e024      	b.n	3a4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
     35a:	4b14      	ldr	r3, [pc, #80]	; (3ac <system_clock_source_get_hz+0x80>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	2002      	movs	r0, #2
     360:	4018      	ands	r0, r3
     362:	d01f      	beq.n	3a4 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
     364:	4912      	ldr	r1, [pc, #72]	; (3b0 <system_clock_source_get_hz+0x84>)
     366:	2280      	movs	r2, #128	; 0x80
     368:	0052      	lsls	r2, r2, #1
     36a:	68cb      	ldr	r3, [r1, #12]
     36c:	4213      	tst	r3, r2
     36e:	d0fc      	beq.n	36a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
     370:	4b0e      	ldr	r3, [pc, #56]	; (3ac <system_clock_source_get_hz+0x80>)
     372:	681b      	ldr	r3, [r3, #0]
     374:	075b      	lsls	r3, r3, #29
     376:	d514      	bpl.n	3a2 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     378:	2000      	movs	r0, #0
     37a:	4b0f      	ldr	r3, [pc, #60]	; (3b8 <system_clock_source_get_hz+0x8c>)
     37c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     37e:	4b0b      	ldr	r3, [pc, #44]	; (3ac <system_clock_source_get_hz+0x80>)
     380:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
     382:	041b      	lsls	r3, r3, #16
     384:	0c1b      	lsrs	r3, r3, #16
     386:	4358      	muls	r0, r3
     388:	e00c      	b.n	3a4 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     38a:	2328      	movs	r3, #40	; 0x28
     38c:	4a08      	ldr	r2, [pc, #32]	; (3b0 <system_clock_source_get_hz+0x84>)
     38e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     390:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     392:	079b      	lsls	r3, r3, #30
     394:	d506      	bpl.n	3a4 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     396:	4b05      	ldr	r3, [pc, #20]	; (3ac <system_clock_source_get_hz+0x80>)
     398:	68d8      	ldr	r0, [r3, #12]
     39a:	e003      	b.n	3a4 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     39c:	2080      	movs	r0, #128	; 0x80
     39e:	0200      	lsls	r0, r0, #8
     3a0:	e000      	b.n	3a4 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     3a2:	4806      	ldr	r0, [pc, #24]	; (3bc <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
     3a4:	bd10      	pop	{r4, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00001118 	.word	0x00001118
     3ac:	20000030 	.word	0x20000030
     3b0:	40000c00 	.word	0x40000c00
     3b4:	003d0900 	.word	0x003d0900
     3b8:	000006c1 	.word	0x000006c1
     3bc:	02dc6c00 	.word	0x02dc6c00

000003c0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     3c0:	b510      	push	{r4, lr}
     3c2:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
     3c4:	2280      	movs	r2, #128	; 0x80
     3c6:	0052      	lsls	r2, r2, #1
     3c8:	4b2f      	ldr	r3, [pc, #188]	; (488 <system_clock_init+0xc8>)
     3ca:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
     3cc:	3afd      	subs	r2, #253	; 0xfd
     3ce:	4b2f      	ldr	r3, [pc, #188]	; (48c <system_clock_init+0xcc>)
     3d0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     3d2:	4a2f      	ldr	r2, [pc, #188]	; (490 <system_clock_init+0xd0>)
     3d4:	6853      	ldr	r3, [r2, #4]
     3d6:	211e      	movs	r1, #30
     3d8:	438b      	bics	r3, r1
     3da:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     3dc:	2380      	movs	r3, #128	; 0x80
     3de:	05db      	lsls	r3, r3, #23
     3e0:	789b      	ldrb	r3, [r3, #2]
     3e2:	2b02      	cmp	r3, #2
     3e4:	d00f      	beq.n	406 <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     3e6:	2380      	movs	r3, #128	; 0x80
     3e8:	05db      	lsls	r3, r3, #23
     3ea:	789b      	ldrb	r3, [r3, #2]
     3ec:	b25b      	sxtb	r3, r3
     3ee:	2b00      	cmp	r3, #0
     3f0:	db09      	blt.n	406 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     3f2:	2380      	movs	r3, #128	; 0x80
     3f4:	05db      	lsls	r3, r3, #23
     3f6:	2201      	movs	r2, #1
     3f8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     3fa:	3201      	adds	r2, #1
     3fc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     3fe:	001a      	movs	r2, r3
     400:	7993      	ldrb	r3, [r2, #6]
     402:	2b00      	cmp	r3, #0
     404:	d0fc      	beq.n	400 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <system_clock_init+0xc8>)
     408:	7d1a      	ldrb	r2, [r3, #20]
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	4249      	negs	r1, r1
     40e:	430a      	orrs	r2, r1
     410:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
     412:	7d1a      	ldrb	r2, [r3, #20]
     414:	31c0      	adds	r1, #192	; 0xc0
     416:	438a      	bics	r2, r1
     418:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     41a:	4b1e      	ldr	r3, [pc, #120]	; (494 <system_clock_init+0xd4>)
     41c:	4798      	blx	r3
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
     41e:	4c1e      	ldr	r4, [pc, #120]	; (498 <system_clock_init+0xd8>)
     420:	2301      	movs	r3, #1
     422:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
     424:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     426:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     428:	a901      	add	r1, sp, #4
     42a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     42c:	2300      	movs	r3, #0
     42e:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
     430:	2206      	movs	r2, #6
     432:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     434:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     436:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     438:	2000      	movs	r0, #0
     43a:	4b18      	ldr	r3, [pc, #96]	; (49c <system_clock_init+0xdc>)
     43c:	4798      	blx	r3
     43e:	2000      	movs	r0, #0
     440:	4b17      	ldr	r3, [pc, #92]	; (4a0 <system_clock_init+0xe0>)
     442:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
     444:	2000      	movs	r0, #0
     446:	4b17      	ldr	r3, [pc, #92]	; (4a4 <system_clock_init+0xe4>)
     448:	4798      	blx	r3
     44a:	7921      	ldrb	r1, [r4, #4]
     44c:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
     44e:	4b16      	ldr	r3, [pc, #88]	; (4a8 <system_clock_init+0xe8>)
     450:	4798      	blx	r3
     452:	4b16      	ldr	r3, [pc, #88]	; (4ac <system_clock_init+0xec>)
     454:	4298      	cmp	r0, r3
     456:	d814      	bhi.n	482 <system_clock_init+0xc2>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
     458:	2380      	movs	r3, #128	; 0x80
     45a:	05db      	lsls	r3, r3, #23
     45c:	789b      	ldrb	r3, [r3, #2]
     45e:	2b00      	cmp	r3, #0
     460:	d00f      	beq.n	482 <system_clock_init+0xc2>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
     462:	2380      	movs	r3, #128	; 0x80
     464:	05db      	lsls	r3, r3, #23
     466:	789b      	ldrb	r3, [r3, #2]
     468:	b25b      	sxtb	r3, r3
     46a:	2b00      	cmp	r3, #0
     46c:	db09      	blt.n	482 <system_clock_init+0xc2>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
     46e:	2380      	movs	r3, #128	; 0x80
     470:	05db      	lsls	r3, r3, #23
     472:	2201      	movs	r2, #1
     474:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
     476:	2200      	movs	r2, #0
     478:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
     47a:	001a      	movs	r2, r3
     47c:	7993      	ldrb	r3, [r2, #6]
     47e:	2b00      	cmp	r3, #0
     480:	d0fc      	beq.n	47c <system_clock_init+0xbc>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
     482:	b004      	add	sp, #16
     484:	bd10      	pop	{r4, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	40000c00 	.word	0x40000c00
     48c:	40001400 	.word	0x40001400
     490:	41004000 	.word	0x41004000
     494:	000004b1 	.word	0x000004b1
     498:	40000400 	.word	0x40000400
     49c:	000004d5 	.word	0x000004d5
     4a0:	00000581 	.word	0x00000581
     4a4:	000005c1 	.word	0x000005c1
     4a8:	00000f75 	.word	0x00000f75
     4ac:	00b71b00 	.word	0x00b71b00

000004b0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     4b0:	4a06      	ldr	r2, [pc, #24]	; (4cc <system_gclk_init+0x1c>)
     4b2:	6951      	ldr	r1, [r2, #20]
     4b4:	2340      	movs	r3, #64	; 0x40
     4b6:	430b      	orrs	r3, r1
     4b8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     4ba:	2201      	movs	r2, #1
     4bc:	4b04      	ldr	r3, [pc, #16]	; (4d0 <system_gclk_init+0x20>)
     4be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     4c0:	0019      	movs	r1, r3
     4c2:	780b      	ldrb	r3, [r1, #0]
     4c4:	4213      	tst	r3, r2
     4c6:	d1fc      	bne.n	4c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	40000400 	.word	0x40000400
     4d0:	40001800 	.word	0x40001800

000004d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     4d8:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     4da:	784b      	ldrb	r3, [r1, #1]
     4dc:	2b00      	cmp	r3, #0
     4de:	d002      	beq.n	4e6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     4e0:	2380      	movs	r3, #128	; 0x80
     4e2:	00db      	lsls	r3, r3, #3
     4e4:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     4e6:	7a4b      	ldrb	r3, [r1, #9]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d002      	beq.n	4f2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     4ec:	2380      	movs	r3, #128	; 0x80
     4ee:	011b      	lsls	r3, r3, #4
     4f0:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     4f2:	684a      	ldr	r2, [r1, #4]
     4f4:	2a01      	cmp	r2, #1
     4f6:	d917      	bls.n	528 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     4f8:	1e53      	subs	r3, r2, #1
     4fa:	421a      	tst	r2, r3
     4fc:	d10f      	bne.n	51e <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     4fe:	2a02      	cmp	r2, #2
     500:	d906      	bls.n	510 <system_gclk_gen_set_config+0x3c>
     502:	2302      	movs	r3, #2
     504:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
     506:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     508:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     50a:	429a      	cmp	r2, r3
     50c:	d8fb      	bhi.n	506 <system_gclk_gen_set_config+0x32>
     50e:	e000      	b.n	512 <system_gclk_gen_set_config+0x3e>
     510:	2000      	movs	r0, #0
     512:	2380      	movs	r3, #128	; 0x80
     514:	015b      	lsls	r3, r3, #5
     516:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     518:	0400      	lsls	r0, r0, #16
     51a:	4304      	orrs	r4, r0
     51c:	e004      	b.n	528 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     51e:	0412      	lsls	r2, r2, #16
     520:	2380      	movs	r3, #128	; 0x80
     522:	009b      	lsls	r3, r3, #2
     524:	431a      	orrs	r2, r3
     526:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     528:	7a0b      	ldrb	r3, [r1, #8]
     52a:	2b00      	cmp	r3, #0
     52c:	d002      	beq.n	534 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     52e:	2380      	movs	r3, #128	; 0x80
     530:	019b      	lsls	r3, r3, #6
     532:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     534:	2604      	movs	r6, #4
     536:	40ae      	lsls	r6, r5
     538:	490d      	ldr	r1, [pc, #52]	; (570 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
     53a:	4a0e      	ldr	r2, [pc, #56]	; (574 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     53c:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
     53e:	4013      	ands	r3, r2
     540:	421e      	tst	r6, r3
     542:	d1fb      	bne.n	53c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <system_gclk_gen_set_config+0xa4>)
     546:	4798      	blx	r3
     548:	00ad      	lsls	r5, r5, #2
     54a:	4b09      	ldr	r3, [pc, #36]	; (570 <system_gclk_gen_set_config+0x9c>)
     54c:	469c      	mov	ip, r3
     54e:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     550:	6a28      	ldr	r0, [r5, #32]
     552:	2380      	movs	r3, #128	; 0x80
     554:	005b      	lsls	r3, r3, #1
     556:	4018      	ands	r0, r3
     558:	4320      	orrs	r0, r4
     55a:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     55c:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
     55e:	4a05      	ldr	r2, [pc, #20]	; (574 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     560:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
     562:	4013      	ands	r3, r2
     564:	421e      	tst	r6, r3
     566:	d1fb      	bne.n	560 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     568:	4b04      	ldr	r3, [pc, #16]	; (57c <system_gclk_gen_set_config+0xa8>)
     56a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	40001800 	.word	0x40001800
     574:	000007fc 	.word	0x000007fc
     578:	00000155 	.word	0x00000155
     57c:	00000195 	.word	0x00000195

00000580 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     580:	b510      	push	{r4, lr}
     582:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     584:	2204      	movs	r2, #4
     586:	4082      	lsls	r2, r0
     588:	4809      	ldr	r0, [pc, #36]	; (5b0 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     58a:	490a      	ldr	r1, [pc, #40]	; (5b4 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     58c:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     58e:	400b      	ands	r3, r1
     590:	421a      	tst	r2, r3
     592:	d1fb      	bne.n	58c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <system_gclk_gen_enable+0x38>)
     596:	4798      	blx	r3
     598:	00a4      	lsls	r4, r4, #2
     59a:	4b05      	ldr	r3, [pc, #20]	; (5b0 <system_gclk_gen_enable+0x30>)
     59c:	469c      	mov	ip, r3
     59e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     5a0:	6a23      	ldr	r3, [r4, #32]
     5a2:	2280      	movs	r2, #128	; 0x80
     5a4:	0052      	lsls	r2, r2, #1
     5a6:	4313      	orrs	r3, r2
     5a8:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <system_gclk_gen_enable+0x3c>)
     5ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     5ae:	bd10      	pop	{r4, pc}
     5b0:	40001800 	.word	0x40001800
     5b4:	000007fc 	.word	0x000007fc
     5b8:	00000155 	.word	0x00000155
     5bc:	00000195 	.word	0x00000195

000005c0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c2:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     5c4:	2204      	movs	r2, #4
     5c6:	4082      	lsls	r2, r0
     5c8:	4812      	ldr	r0, [pc, #72]	; (614 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     5ca:	4913      	ldr	r1, [pc, #76]	; (618 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     5cc:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
     5ce:	400b      	ands	r3, r1
     5d0:	421a      	tst	r2, r3
     5d2:	d1fb      	bne.n	5cc <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     5d4:	4b11      	ldr	r3, [pc, #68]	; (61c <system_gclk_gen_get_hz+0x5c>)
     5d6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     5d8:	4f0e      	ldr	r7, [pc, #56]	; (614 <system_gclk_gen_get_hz+0x54>)
     5da:	3408      	adds	r4, #8
     5dc:	00a4      	lsls	r4, r4, #2
     5de:	59e0      	ldr	r0, [r4, r7]
     5e0:	0700      	lsls	r0, r0, #28
     5e2:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     5e4:	4b0e      	ldr	r3, [pc, #56]	; (620 <system_gclk_gen_get_hz+0x60>)
     5e6:	4798      	blx	r3
     5e8:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     5ea:	59e5      	ldr	r5, [r4, r7]
     5ec:	04ed      	lsls	r5, r5, #19
     5ee:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     5f0:	59e4      	ldr	r4, [r4, r7]
     5f2:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     5f4:	4b0b      	ldr	r3, [pc, #44]	; (624 <system_gclk_gen_get_hz+0x64>)
     5f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     5f8:	2d00      	cmp	r5, #0
     5fa:	d107      	bne.n	60c <system_gclk_gen_get_hz+0x4c>
     5fc:	2c01      	cmp	r4, #1
     5fe:	d907      	bls.n	610 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     600:	0021      	movs	r1, r4
     602:	0030      	movs	r0, r6
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <system_gclk_gen_get_hz+0x68>)
     606:	4798      	blx	r3
     608:	0006      	movs	r6, r0
     60a:	e001      	b.n	610 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     60c:	3401      	adds	r4, #1
     60e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     610:	0030      	movs	r0, r6
     612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     614:	40001800 	.word	0x40001800
     618:	000007fc 	.word	0x000007fc
     61c:	00000155 	.word	0x00000155
     620:	0000032d 	.word	0x0000032d
     624:	00000195 	.word	0x00000195
     628:	00000f75 	.word	0x00000f75

0000062c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     62c:	b510      	push	{r4, lr}
     62e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <system_gclk_chan_enable+0x2c>)
     632:	4798      	blx	r3
     634:	00a0      	lsls	r0, r4, #2
     636:	4b09      	ldr	r3, [pc, #36]	; (65c <system_gclk_chan_enable+0x30>)
     638:	469c      	mov	ip, r3
     63a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     63c:	2280      	movs	r2, #128	; 0x80
     63e:	5881      	ldr	r1, [r0, r2]
     640:	2340      	movs	r3, #64	; 0x40
     642:	430b      	orrs	r3, r1
     644:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     646:	2180      	movs	r1, #128	; 0x80
     648:	3a40      	subs	r2, #64	; 0x40
     64a:	5843      	ldr	r3, [r0, r1]
     64c:	421a      	tst	r2, r3
     64e:	d0fc      	beq.n	64a <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     650:	4b03      	ldr	r3, [pc, #12]	; (660 <system_gclk_chan_enable+0x34>)
     652:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     654:	bd10      	pop	{r4, pc}
     656:	46c0      	nop			; (mov r8, r8)
     658:	00000155 	.word	0x00000155
     65c:	40001800 	.word	0x40001800
     660:	00000195 	.word	0x00000195

00000664 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     664:	b510      	push	{r4, lr}
     666:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     668:	4b09      	ldr	r3, [pc, #36]	; (690 <system_gclk_chan_disable+0x2c>)
     66a:	4798      	blx	r3
     66c:	00a0      	lsls	r0, r4, #2
     66e:	4b09      	ldr	r3, [pc, #36]	; (694 <system_gclk_chan_disable+0x30>)
     670:	469c      	mov	ip, r3
     672:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     674:	2280      	movs	r2, #128	; 0x80
     676:	5883      	ldr	r3, [r0, r2]
     678:	2140      	movs	r1, #64	; 0x40
     67a:	438b      	bics	r3, r1
     67c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     67e:	3140      	adds	r1, #64	; 0x40
     680:	3a40      	subs	r2, #64	; 0x40
     682:	5843      	ldr	r3, [r0, r1]
     684:	421a      	tst	r2, r3
     686:	d1fc      	bne.n	682 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     688:	4b03      	ldr	r3, [pc, #12]	; (698 <system_gclk_chan_disable+0x34>)
     68a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     68c:	bd10      	pop	{r4, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	00000155 	.word	0x00000155
     694:	40001800 	.word	0x40001800
     698:	00000195 	.word	0x00000195

0000069c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     69c:	b570      	push	{r4, r5, r6, lr}
     69e:	0004      	movs	r4, r0
     6a0:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <system_gclk_chan_set_config+0x1c>)
     6a4:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     6a6:	782b      	ldrb	r3, [r5, #0]
     6a8:	220f      	movs	r2, #15
     6aa:	4013      	ands	r3, r2
     6ac:	3420      	adds	r4, #32
     6ae:	00a4      	lsls	r4, r4, #2
     6b0:	4a02      	ldr	r2, [pc, #8]	; (6bc <system_gclk_chan_set_config+0x20>)
     6b2:	50a3      	str	r3, [r4, r2]


}
     6b4:	bd70      	pop	{r4, r5, r6, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	00000665 	.word	0x00000665
     6bc:	40001800 	.word	0x40001800

000006c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     6c0:	b510      	push	{r4, lr}
     6c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     6c4:	4b06      	ldr	r3, [pc, #24]	; (6e0 <system_gclk_chan_get_hz+0x20>)
     6c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     6c8:	3420      	adds	r4, #32
     6ca:	00a4      	lsls	r4, r4, #2
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <system_gclk_chan_get_hz+0x24>)
     6ce:	58e4      	ldr	r4, [r4, r3]
     6d0:	0724      	lsls	r4, r4, #28
     6d2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <system_gclk_chan_get_hz+0x28>)
     6d6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     6d8:	0020      	movs	r0, r4
     6da:	4b04      	ldr	r3, [pc, #16]	; (6ec <system_gclk_chan_get_hz+0x2c>)
     6dc:	4798      	blx	r3
}
     6de:	bd10      	pop	{r4, pc}
     6e0:	00000155 	.word	0x00000155
     6e4:	40001800 	.word	0x40001800
     6e8:	00000195 	.word	0x00000195
     6ec:	000005c1 	.word	0x000005c1

000006f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     6f0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     6f2:	78d3      	ldrb	r3, [r2, #3]
     6f4:	2b00      	cmp	r3, #0
     6f6:	d11e      	bne.n	736 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     6f8:	7813      	ldrb	r3, [r2, #0]
     6fa:	2b80      	cmp	r3, #128	; 0x80
     6fc:	d004      	beq.n	708 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     6fe:	061b      	lsls	r3, r3, #24
     700:	2480      	movs	r4, #128	; 0x80
     702:	0264      	lsls	r4, r4, #9
     704:	4323      	orrs	r3, r4
     706:	e000      	b.n	70a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     708:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     70a:	7854      	ldrb	r4, [r2, #1]
     70c:	2502      	movs	r5, #2
     70e:	43ac      	bics	r4, r5
     710:	d10a      	bne.n	728 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     712:	7894      	ldrb	r4, [r2, #2]
     714:	2c00      	cmp	r4, #0
     716:	d103      	bne.n	720 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     718:	2480      	movs	r4, #128	; 0x80
     71a:	02a4      	lsls	r4, r4, #10
     71c:	4323      	orrs	r3, r4
     71e:	e002      	b.n	726 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     720:	24c0      	movs	r4, #192	; 0xc0
     722:	02e4      	lsls	r4, r4, #11
     724:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     726:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     728:	7854      	ldrb	r4, [r2, #1]
     72a:	3c01      	subs	r4, #1
     72c:	2c01      	cmp	r4, #1
     72e:	d812      	bhi.n	756 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     730:	4c18      	ldr	r4, [pc, #96]	; (794 <_system_pinmux_config+0xa4>)
     732:	4023      	ands	r3, r4
     734:	e00f      	b.n	756 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     736:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     738:	040b      	lsls	r3, r1, #16
     73a:	0c1b      	lsrs	r3, r3, #16
     73c:	24a0      	movs	r4, #160	; 0xa0
     73e:	05e4      	lsls	r4, r4, #23
     740:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     742:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     744:	0c0b      	lsrs	r3, r1, #16
     746:	24d0      	movs	r4, #208	; 0xd0
     748:	0624      	lsls	r4, r4, #24
     74a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     74c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     74e:	78d3      	ldrb	r3, [r2, #3]
     750:	2b00      	cmp	r3, #0
     752:	d018      	beq.n	786 <_system_pinmux_config+0x96>
     754:	e01c      	b.n	790 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     756:	040c      	lsls	r4, r1, #16
     758:	0c24      	lsrs	r4, r4, #16
     75a:	25a0      	movs	r5, #160	; 0xa0
     75c:	05ed      	lsls	r5, r5, #23
     75e:	432c      	orrs	r4, r5
     760:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     762:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     764:	0c0c      	lsrs	r4, r1, #16
     766:	25d0      	movs	r5, #208	; 0xd0
     768:	062d      	lsls	r5, r5, #24
     76a:	432c      	orrs	r4, r5
     76c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     76e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     770:	78d4      	ldrb	r4, [r2, #3]
     772:	2c00      	cmp	r4, #0
     774:	d10c      	bne.n	790 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     776:	035b      	lsls	r3, r3, #13
     778:	d505      	bpl.n	786 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     77a:	7893      	ldrb	r3, [r2, #2]
     77c:	2b01      	cmp	r3, #1
     77e:	d101      	bne.n	784 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
     780:	6181      	str	r1, [r0, #24]
     782:	e000      	b.n	786 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
     784:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     786:	7853      	ldrb	r3, [r2, #1]
     788:	3b01      	subs	r3, #1
     78a:	2b01      	cmp	r3, #1
     78c:	d800      	bhi.n	790 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     78e:	6081      	str	r1, [r0, #8]
		}
	}
}
     790:	bd30      	pop	{r4, r5, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	fffbffff 	.word	0xfffbffff

00000798 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     798:	b510      	push	{r4, lr}
     79a:	0003      	movs	r3, r0
     79c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     79e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7a0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7a2:	2900      	cmp	r1, #0
     7a4:	d104      	bne.n	7b0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
     7a6:	0958      	lsrs	r0, r3, #5
     7a8:	01c0      	lsls	r0, r0, #7
     7aa:	4905      	ldr	r1, [pc, #20]	; (7c0 <system_pinmux_pin_set_config+0x28>)
     7ac:	468c      	mov	ip, r1
     7ae:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
     7b0:	211f      	movs	r1, #31
     7b2:	400b      	ands	r3, r1
     7b4:	391e      	subs	r1, #30
     7b6:	4099      	lsls	r1, r3
     7b8:	4b02      	ldr	r3, [pc, #8]	; (7c4 <system_pinmux_pin_set_config+0x2c>)
     7ba:	4798      	blx	r3
}
     7bc:	bd10      	pop	{r4, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	40002800 	.word	0x40002800
     7c4:	000006f1 	.word	0x000006f1

000007c8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     7c8:	4770      	bx	lr
     7ca:	46c0      	nop			; (mov r8, r8)

000007cc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     7cc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     7ce:	4b05      	ldr	r3, [pc, #20]	; (7e4 <system_init+0x18>)
     7d0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     7d2:	4b05      	ldr	r3, [pc, #20]	; (7e8 <system_init+0x1c>)
     7d4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     7d6:	4b05      	ldr	r3, [pc, #20]	; (7ec <system_init+0x20>)
     7d8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     7da:	4b05      	ldr	r3, [pc, #20]	; (7f0 <system_init+0x24>)
     7dc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     7de:	4b05      	ldr	r3, [pc, #20]	; (7f4 <system_init+0x28>)
     7e0:	4798      	blx	r3
}
     7e2:	bd10      	pop	{r4, pc}
     7e4:	000003c1 	.word	0x000003c1
     7e8:	000001c5 	.word	0x000001c5
     7ec:	000007c9 	.word	0x000007c9
     7f0:	00000285 	.word	0x00000285
     7f4:	000007c9 	.word	0x000007c9

000007f8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	465f      	mov	r7, fp
     7fc:	4656      	mov	r6, sl
     7fe:	464d      	mov	r5, r9
     800:	4644      	mov	r4, r8
     802:	b4f0      	push	{r4, r5, r6, r7}
     804:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     806:	4bcb      	ldr	r3, [pc, #812]	; (b34 <USB_Handler+0x33c>)
     808:	681f      	ldr	r7, [r3, #0]
     80a:	683d      	ldr	r5, [r7, #0]
     80c:	782b      	ldrb	r3, [r5, #0]
     80e:	09db      	lsrs	r3, r3, #7
     810:	d100      	bne.n	814 <USB_Handler+0x1c>
     812:	e15a      	b.n	aca <USB_Handler+0x2d2>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     814:	8c2b      	ldrh	r3, [r5, #32]
     816:	b29b      	uxth	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	d100      	bne.n	81e <USB_Handler+0x26>
     81c:	e0db      	b.n	9d6 <USB_Handler+0x1de>
     81e:	8c28      	ldrh	r0, [r5, #32]
     820:	b280      	uxth	r0, r0
     822:	4bc5      	ldr	r3, [pc, #788]	; (b38 <USB_Handler+0x340>)
     824:	4798      	blx	r3
     826:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
     828:	2c1f      	cmp	r4, #31
     82a:	d900      	bls.n	82e <USB_Handler+0x36>
     82c:	e0d3      	b.n	9d6 <USB_Handler+0x1de>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     82e:	0003      	movs	r3, r0
     830:	3308      	adds	r3, #8
     832:	015b      	lsls	r3, r3, #5
     834:	18ed      	adds	r5, r5, r3
     836:	79ed      	ldrb	r5, [r5, #7]
     838:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     83a:	07ab      	lsls	r3, r5, #30
     83c:	d051      	beq.n	8e2 <USB_Handler+0xea>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     83e:	4abf      	ldr	r2, [pc, #764]	; (b3c <USB_Handler+0x344>)
     840:	2301      	movs	r3, #1
     842:	4083      	lsls	r3, r0
     844:	6811      	ldr	r1, [r2, #0]
     846:	4399      	bics	r1, r3
     848:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     84a:	0003      	movs	r3, r0
     84c:	3308      	adds	r3, #8
     84e:	015b      	lsls	r3, r3, #5
     850:	683a      	ldr	r2, [r7, #0]
     852:	4694      	mov	ip, r2
     854:	4463      	add	r3, ip
     856:	2203      	movs	r2, #3
     858:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     85a:	183b      	adds	r3, r7, r0
     85c:	33ae      	adds	r3, #174	; 0xae
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	07db      	lsls	r3, r3, #31
     862:	d53e      	bpl.n	8e2 <USB_Handler+0xea>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
     864:	4bb6      	ldr	r3, [pc, #728]	; (b40 <USB_Handler+0x348>)
     866:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     868:	683a      	ldr	r2, [r7, #0]
     86a:	0003      	movs	r3, r0
     86c:	3308      	adds	r3, #8
     86e:	015b      	lsls	r3, r3, #5
     870:	5c9b      	ldrb	r3, [r3, r2]
     872:	079b      	lsls	r3, r3, #30
     874:	0f9b      	lsrs	r3, r3, #30
     876:	2b01      	cmp	r3, #1
     878:	d110      	bne.n	89c <USB_Handler+0xa4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     87a:	0142      	lsls	r2, r0, #5
     87c:	4bb1      	ldr	r3, [pc, #708]	; (b44 <USB_Handler+0x34c>)
     87e:	189b      	adds	r3, r3, r2
     880:	685a      	ldr	r2, [r3, #4]
     882:	0492      	lsls	r2, r2, #18
     884:	0c92      	lsrs	r2, r2, #18
     886:	49ae      	ldr	r1, [pc, #696]	; (b40 <USB_Handler+0x348>)
     888:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     88a:	685a      	ldr	r2, [r3, #4]
     88c:	0112      	lsls	r2, r2, #4
     88e:	0c92      	lsrs	r2, r2, #18
     890:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     892:	685a      	ldr	r2, [r3, #4]
     894:	0b92      	lsrs	r2, r2, #14
     896:	0392      	lsls	r2, r2, #14
     898:	605a      	str	r2, [r3, #4]
     89a:	e01a      	b.n	8d2 <USB_Handler+0xda>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     89c:	0142      	lsls	r2, r0, #5
     89e:	4ba9      	ldr	r3, [pc, #676]	; (b44 <USB_Handler+0x34c>)
     8a0:	189b      	adds	r3, r3, r2
     8a2:	685a      	ldr	r2, [r3, #4]
     8a4:	0112      	lsls	r2, r2, #4
     8a6:	0c92      	lsrs	r2, r2, #18
     8a8:	b290      	uxth	r0, r2
     8aa:	49a5      	ldr	r1, [pc, #660]	; (b40 <USB_Handler+0x348>)
     8ac:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     8ae:	685a      	ldr	r2, [r3, #4]
     8b0:	0492      	lsls	r2, r2, #18
     8b2:	0c92      	lsrs	r2, r2, #18
     8b4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     8b6:	6859      	ldr	r1, [r3, #4]
     8b8:	4aa3      	ldr	r2, [pc, #652]	; (b48 <USB_Handler+0x350>)
     8ba:	400a      	ands	r2, r1
     8bc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     8be:	2800      	cmp	r0, #0
     8c0:	d107      	bne.n	8d2 <USB_Handler+0xda>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     8c2:	0163      	lsls	r3, r4, #5
     8c4:	4a9f      	ldr	r2, [pc, #636]	; (b44 <USB_Handler+0x34c>)
     8c6:	18d3      	adds	r3, r2, r3
     8c8:	685b      	ldr	r3, [r3, #4]
     8ca:	049b      	lsls	r3, r3, #18
     8cc:	0c9b      	lsrs	r3, r3, #18
     8ce:	4a9c      	ldr	r2, [pc, #624]	; (b40 <USB_Handler+0x348>)
     8d0:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     8d2:	4b98      	ldr	r3, [pc, #608]	; (b34 <USB_Handler+0x33c>)
     8d4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     8d6:	1ca3      	adds	r3, r4, #2
     8d8:	011b      	lsls	r3, r3, #4
     8da:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     8dc:	685b      	ldr	r3, [r3, #4]
     8de:	4998      	ldr	r1, [pc, #608]	; (b40 <USB_Handler+0x348>)
     8e0:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     8e2:	076b      	lsls	r3, r5, #29
     8e4:	d50e      	bpl.n	904 <USB_Handler+0x10c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     8e6:	4a95      	ldr	r2, [pc, #596]	; (b3c <USB_Handler+0x344>)
     8e8:	2301      	movs	r3, #1
     8ea:	40a3      	lsls	r3, r4
     8ec:	6811      	ldr	r1, [r2, #0]
     8ee:	4399      	bics	r1, r3
     8f0:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     8f2:	4b90      	ldr	r3, [pc, #576]	; (b34 <USB_Handler+0x33c>)
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	681a      	ldr	r2, [r3, #0]
     8f8:	0023      	movs	r3, r4
     8fa:	3308      	adds	r3, #8
     8fc:	015b      	lsls	r3, r3, #5
     8fe:	18d3      	adds	r3, r2, r3
     900:	2204      	movs	r2, #4
     902:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
     904:	072b      	lsls	r3, r5, #28
     906:	d521      	bpl.n	94c <USB_Handler+0x154>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     908:	4a8c      	ldr	r2, [pc, #560]	; (b3c <USB_Handler+0x344>)
     90a:	2301      	movs	r3, #1
     90c:	40a3      	lsls	r3, r4
     90e:	6811      	ldr	r1, [r2, #0]
     910:	4399      	bics	r1, r3
     912:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     914:	4b87      	ldr	r3, [pc, #540]	; (b34 <USB_Handler+0x33c>)
     916:	6818      	ldr	r0, [r3, #0]
     918:	0023      	movs	r3, r4
     91a:	3308      	adds	r3, #8
     91c:	015b      	lsls	r3, r3, #5
     91e:	6802      	ldr	r2, [r0, #0]
     920:	4694      	mov	ip, r2
     922:	4463      	add	r3, ip
     924:	2208      	movs	r2, #8
     926:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     928:	1903      	adds	r3, r0, r4
     92a:	33ae      	adds	r3, #174	; 0xae
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	079b      	lsls	r3, r3, #30
     930:	d50c      	bpl.n	94c <USB_Handler+0x154>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
     932:	4983      	ldr	r1, [pc, #524]	; (b40 <USB_Handler+0x348>)
     934:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     936:	0163      	lsls	r3, r4, #5
     938:	4a82      	ldr	r2, [pc, #520]	; (b44 <USB_Handler+0x34c>)
     93a:	18d3      	adds	r3, r2, r3
     93c:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
     93e:	231f      	movs	r3, #31
     940:	4013      	ands	r3, r2
     942:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     944:	0123      	lsls	r3, r4, #4
     946:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
     948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     94a:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     94c:	06eb      	lsls	r3, r5, #27
     94e:	d522      	bpl.n	996 <USB_Handler+0x19e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     950:	4a7a      	ldr	r2, [pc, #488]	; (b3c <USB_Handler+0x344>)
     952:	2301      	movs	r3, #1
     954:	40a3      	lsls	r3, r4
     956:	6811      	ldr	r1, [r2, #0]
     958:	4399      	bics	r1, r3
     95a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     95c:	4b75      	ldr	r3, [pc, #468]	; (b34 <USB_Handler+0x33c>)
     95e:	6818      	ldr	r0, [r3, #0]
     960:	0023      	movs	r3, r4
     962:	3308      	adds	r3, #8
     964:	015b      	lsls	r3, r3, #5
     966:	6802      	ldr	r2, [r0, #0]
     968:	4694      	mov	ip, r2
     96a:	4463      	add	r3, ip
     96c:	2210      	movs	r2, #16
     96e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     970:	1903      	adds	r3, r0, r4
     972:	33ae      	adds	r3, #174	; 0xae
     974:	781b      	ldrb	r3, [r3, #0]
     976:	075b      	lsls	r3, r3, #29
     978:	d50d      	bpl.n	996 <USB_Handler+0x19e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
     97a:	4a71      	ldr	r2, [pc, #452]	; (b40 <USB_Handler+0x348>)
     97c:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     97e:	0163      	lsls	r3, r4, #5
     980:	4970      	ldr	r1, [pc, #448]	; (b44 <USB_Handler+0x34c>)
     982:	18cb      	adds	r3, r1, r3
     984:	685b      	ldr	r3, [r3, #4]
     986:	011b      	lsls	r3, r3, #4
     988:	0c9b      	lsrs	r3, r3, #18
     98a:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     98c:	0123      	lsls	r3, r4, #4
     98e:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
     990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     992:	2100      	movs	r1, #0
     994:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
     996:	06ab      	lsls	r3, r5, #26
     998:	d400      	bmi.n	99c <USB_Handler+0x1a4>
     99a:	e1f2      	b.n	d82 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     99c:	4a67      	ldr	r2, [pc, #412]	; (b3c <USB_Handler+0x344>)
     99e:	2301      	movs	r3, #1
     9a0:	40a3      	lsls	r3, r4
     9a2:	6811      	ldr	r1, [r2, #0]
     9a4:	4399      	bics	r1, r3
     9a6:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     9a8:	4b62      	ldr	r3, [pc, #392]	; (b34 <USB_Handler+0x33c>)
     9aa:	6818      	ldr	r0, [r3, #0]
     9ac:	0023      	movs	r3, r4
     9ae:	3308      	adds	r3, #8
     9b0:	015b      	lsls	r3, r3, #5
     9b2:	6802      	ldr	r2, [r0, #0]
     9b4:	4694      	mov	ip, r2
     9b6:	4463      	add	r3, ip
     9b8:	2220      	movs	r2, #32
     9ba:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     9bc:	1903      	adds	r3, r0, r4
     9be:	33ae      	adds	r3, #174	; 0xae
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	071b      	lsls	r3, r3, #28
     9c4:	d400      	bmi.n	9c8 <USB_Handler+0x1d0>
     9c6:	e1dc      	b.n	d82 <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
     9c8:	495d      	ldr	r1, [pc, #372]	; (b40 <USB_Handler+0x348>)
     9ca:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     9cc:	0124      	lsls	r4, r4, #4
     9ce:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
     9d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9d2:	4798      	blx	r3
     9d4:	e1d5      	b.n	d82 <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     9d6:	8bac      	ldrh	r4, [r5, #28]
     9d8:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
     9da:	0763      	lsls	r3, r4, #29
     9dc:	d508      	bpl.n	9f0 <USB_Handler+0x1f8>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     9de:	2304      	movs	r3, #4
     9e0:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     9e2:	33a1      	adds	r3, #161	; 0xa1
     9e4:	5cfb      	ldrb	r3, [r7, r3]
     9e6:	07db      	lsls	r3, r3, #31
     9e8:	d502      	bpl.n	9f0 <USB_Handler+0x1f8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	0038      	movs	r0, r7
     9ee:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
     9f0:	0723      	lsls	r3, r4, #28
     9f2:	d50d      	bpl.n	a10 <USB_Handler+0x218>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     9f4:	2200      	movs	r2, #0
     9f6:	4b51      	ldr	r3, [pc, #324]	; (b3c <USB_Handler+0x344>)
     9f8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     9fa:	4b4e      	ldr	r3, [pc, #312]	; (b34 <USB_Handler+0x33c>)
     9fc:	6818      	ldr	r0, [r3, #0]
     9fe:	2308      	movs	r3, #8
     a00:	6802      	ldr	r2, [r0, #0]
     a02:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     a04:	339d      	adds	r3, #157	; 0x9d
     a06:	5cc3      	ldrb	r3, [r0, r3]
     a08:	079b      	lsls	r3, r3, #30
     a0a:	d501      	bpl.n	a10 <USB_Handler+0x218>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     a0c:	6883      	ldr	r3, [r0, #8]
     a0e:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     a10:	0663      	lsls	r3, r4, #25
     a12:	d50a      	bpl.n	a2a <USB_Handler+0x232>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     a14:	4b47      	ldr	r3, [pc, #284]	; (b34 <USB_Handler+0x33c>)
     a16:	6818      	ldr	r0, [r3, #0]
     a18:	2340      	movs	r3, #64	; 0x40
     a1a:	6802      	ldr	r2, [r0, #0]
     a1c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     a1e:	3365      	adds	r3, #101	; 0x65
     a20:	5cc3      	ldrb	r3, [r0, r3]
     a22:	06db      	lsls	r3, r3, #27
     a24:	d501      	bpl.n	a2a <USB_Handler+0x232>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     a26:	6943      	ldr	r3, [r0, #20]
     a28:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     a2a:	06a3      	lsls	r3, r4, #26
     a2c:	d50a      	bpl.n	a44 <USB_Handler+0x24c>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     a2e:	4b41      	ldr	r3, [pc, #260]	; (b34 <USB_Handler+0x33c>)
     a30:	6818      	ldr	r0, [r3, #0]
     a32:	2320      	movs	r3, #32
     a34:	6802      	ldr	r2, [r0, #0]
     a36:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     a38:	3385      	adds	r3, #133	; 0x85
     a3a:	5cc3      	ldrb	r3, [r0, r3]
     a3c:	071b      	lsls	r3, r3, #28
     a3e:	d501      	bpl.n	a44 <USB_Handler+0x24c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     a40:	6903      	ldr	r3, [r0, #16]
     a42:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     a44:	06e3      	lsls	r3, r4, #27
     a46:	d50a      	bpl.n	a5e <USB_Handler+0x266>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     a48:	4b3a      	ldr	r3, [pc, #232]	; (b34 <USB_Handler+0x33c>)
     a4a:	6818      	ldr	r0, [r3, #0]
     a4c:	2310      	movs	r3, #16
     a4e:	6802      	ldr	r2, [r0, #0]
     a50:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     a52:	3395      	adds	r3, #149	; 0x95
     a54:	5cc3      	ldrb	r3, [r0, r3]
     a56:	075b      	lsls	r3, r3, #29
     a58:	d501      	bpl.n	a5e <USB_Handler+0x266>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     a5a:	68c3      	ldr	r3, [r0, #12]
     a5c:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     a5e:	0623      	lsls	r3, r4, #24
     a60:	d50d      	bpl.n	a7e <USB_Handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     a62:	2200      	movs	r2, #0
     a64:	4b35      	ldr	r3, [pc, #212]	; (b3c <USB_Handler+0x344>)
     a66:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     a68:	4b32      	ldr	r3, [pc, #200]	; (b34 <USB_Handler+0x33c>)
     a6a:	6818      	ldr	r0, [r3, #0]
     a6c:	2380      	movs	r3, #128	; 0x80
     a6e:	6802      	ldr	r2, [r0, #0]
     a70:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     a72:	3325      	adds	r3, #37	; 0x25
     a74:	5cc3      	ldrb	r3, [r0, r3]
     a76:	069b      	lsls	r3, r3, #26
     a78:	d501      	bpl.n	a7e <USB_Handler+0x286>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     a7a:	6983      	ldr	r3, [r0, #24]
     a7c:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
     a7e:	05e3      	lsls	r3, r4, #23
     a80:	d50e      	bpl.n	aa0 <USB_Handler+0x2a8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     a82:	2200      	movs	r2, #0
     a84:	4b2d      	ldr	r3, [pc, #180]	; (b3c <USB_Handler+0x344>)
     a86:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     a88:	4b2a      	ldr	r3, [pc, #168]	; (b34 <USB_Handler+0x33c>)
     a8a:	6818      	ldr	r0, [r3, #0]
     a8c:	2380      	movs	r3, #128	; 0x80
     a8e:	005b      	lsls	r3, r3, #1
     a90:	6802      	ldr	r2, [r0, #0]
     a92:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     a94:	3b5b      	subs	r3, #91	; 0x5b
     a96:	5cc3      	ldrb	r3, [r0, r3]
     a98:	065b      	lsls	r3, r3, #25
     a9a:	d501      	bpl.n	aa0 <USB_Handler+0x2a8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     a9c:	69c3      	ldr	r3, [r0, #28]
     a9e:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
     aa0:	05a3      	lsls	r3, r4, #22
     aa2:	d400      	bmi.n	aa6 <USB_Handler+0x2ae>
     aa4:	e16d      	b.n	d82 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     aa6:	2200      	movs	r2, #0
     aa8:	4b24      	ldr	r3, [pc, #144]	; (b3c <USB_Handler+0x344>)
     aaa:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     aac:	4b21      	ldr	r3, [pc, #132]	; (b34 <USB_Handler+0x33c>)
     aae:	6818      	ldr	r0, [r3, #0]
     ab0:	2380      	movs	r3, #128	; 0x80
     ab2:	009b      	lsls	r3, r3, #2
     ab4:	6802      	ldr	r2, [r0, #0]
     ab6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     ab8:	3b5c      	subs	r3, #92	; 0x5c
     aba:	3bff      	subs	r3, #255	; 0xff
     abc:	5cc3      	ldrb	r3, [r0, r3]
     abe:	2b7f      	cmp	r3, #127	; 0x7f
     ac0:	d800      	bhi.n	ac4 <USB_Handler+0x2cc>
     ac2:	e15e      	b.n	d82 <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     ac4:	6a03      	ldr	r3, [r0, #32]
     ac6:	4798      	blx	r3
     ac8:	e15b      	b.n	d82 <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     aca:	8c2e      	ldrh	r6, [r5, #32]
     acc:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
     ace:	2e00      	cmp	r6, #0
     ad0:	d140      	bne.n	b54 <USB_Handler+0x35c>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     ad2:	8bae      	ldrh	r6, [r5, #28]
     ad4:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
     ad6:	23ab      	movs	r3, #171	; 0xab
     ad8:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
     ada:	5afd      	ldrh	r5, [r7, r3]
     adc:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
     ade:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
     ae0:	5afb      	ldrh	r3, [r7, r3]
     ae2:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     ae4:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
     ae6:	4f19      	ldr	r7, [pc, #100]	; (b4c <USB_Handler+0x354>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     ae8:	4b12      	ldr	r3, [pc, #72]	; (b34 <USB_Handler+0x33c>)
     aea:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     aec:	4698      	mov	r8, r3
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
     aee:	0063      	lsls	r3, r4, #1
     af0:	5bdb      	ldrh	r3, [r3, r7]
     af2:	4233      	tst	r3, r6
     af4:	d003      	beq.n	afe <USB_Handler+0x306>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     af6:	464a      	mov	r2, r9
     af8:	6812      	ldr	r2, [r2, #0]
     afa:	6812      	ldr	r2, [r2, #0]
     afc:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
     afe:	422b      	tst	r3, r5
     b00:	d013      	beq.n	b2a <USB_Handler+0x332>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     b02:	2c06      	cmp	r4, #6
     b04:	d107      	bne.n	b16 <USB_Handler+0x31e>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     b06:	4b0f      	ldr	r3, [pc, #60]	; (b44 <USB_Handler+0x34c>)
     b08:	891b      	ldrh	r3, [r3, #8]
     b0a:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
     b0c:	2380      	movs	r3, #128	; 0x80
     b0e:	005b      	lsls	r3, r3, #1
     b10:	4013      	ands	r3, r2
     b12:	4a0f      	ldr	r2, [pc, #60]	; (b50 <USB_Handler+0x358>)
     b14:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     b16:	0023      	movs	r3, r4
     b18:	332e      	adds	r3, #46	; 0x2e
     b1a:	009b      	lsls	r3, r3, #2
     b1c:	4642      	mov	r2, r8
     b1e:	6812      	ldr	r2, [r2, #0]
     b20:	589b      	ldr	r3, [r3, r2]
     b22:	490b      	ldr	r1, [pc, #44]	; (b50 <USB_Handler+0x358>)
     b24:	4642      	mov	r2, r8
     b26:	6810      	ldr	r0, [r2, #0]
     b28:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     b2a:	3401      	adds	r4, #1
     b2c:	2c07      	cmp	r4, #7
     b2e:	d1de      	bne.n	aee <USB_Handler+0x2f6>
     b30:	e127      	b.n	d82 <USB_Handler+0x58a>
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	20000060 	.word	0x20000060
     b38:	0000108d 	.word	0x0000108d
     b3c:	20000054 	.word	0x20000054
     b40:	2000004c 	.word	0x2000004c
     b44:	200000a8 	.word	0x200000a8
     b48:	f0003fff 	.word	0xf0003fff
     b4c:	0000113c 	.word	0x0000113c
     b50:	20000048 	.word	0x20000048
     b54:	003c      	movs	r4, r7
     b56:	3459      	adds	r4, #89	; 0x59
     b58:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
     b5a:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
     b5c:	2201      	movs	r2, #1
     b5e:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     b60:	325f      	adds	r2, #95	; 0x5f
     b62:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     b64:	3a50      	subs	r2, #80	; 0x50
     b66:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     b68:	3a0d      	subs	r2, #13
     b6a:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     b6c:	46b8      	mov	r8, r7
     b6e:	002f      	movs	r7, r5
     b70:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
     b72:	9301      	str	r3, [sp, #4]
     b74:	0032      	movs	r2, r6
     b76:	411a      	asrs	r2, r3
     b78:	4661      	mov	r1, ip
     b7a:	4211      	tst	r1, r2
     b7c:	d100      	bne.n	b80 <USB_Handler+0x388>
     b7e:	e0fb      	b.n	d78 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     b80:	001a      	movs	r2, r3
     b82:	3208      	adds	r2, #8
     b84:	0152      	lsls	r2, r2, #5
     b86:	18ba      	adds	r2, r7, r2
     b88:	79d2      	ldrb	r2, [r2, #7]
     b8a:	b2d2      	uxtb	r2, r2
     b8c:	7a21      	ldrb	r1, [r4, #8]
     b8e:	7825      	ldrb	r5, [r4, #0]
     b90:	4029      	ands	r1, r5
     b92:	4011      	ands	r1, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     b94:	464d      	mov	r5, r9
     b96:	4215      	tst	r5, r2
     b98:	d02a      	beq.n	bf0 <USB_Handler+0x3f8>
     b9a:	003d      	movs	r5, r7
     b9c:	4647      	mov	r7, r8
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     ba2:	2308      	movs	r3, #8
     ba4:	33ff      	adds	r3, #255	; 0xff
     ba6:	5ceb      	ldrb	r3, [r5, r3]
     ba8:	065b      	lsls	r3, r3, #25
     baa:	d509      	bpl.n	bc0 <USB_Handler+0x3c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     bac:	2240      	movs	r2, #64	; 0x40
     bae:	2308      	movs	r3, #8
     bb0:	33ff      	adds	r3, #255	; 0xff
     bb2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     bb4:	3b88      	subs	r3, #136	; 0x88
     bb6:	3bff      	subs	r3, #255	; 0xff
     bb8:	4303      	orrs	r3, r0
     bba:	4a75      	ldr	r2, [pc, #468]	; (d90 <USB_Handler+0x598>)
     bbc:	7193      	strb	r3, [r2, #6]
     bbe:	e00a      	b.n	bd6 <USB_Handler+0x3de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     bc0:	2308      	movs	r3, #8
     bc2:	33ff      	adds	r3, #255	; 0xff
     bc4:	5ceb      	ldrb	r3, [r5, r3]
     bc6:	069b      	lsls	r3, r3, #26
     bc8:	d505      	bpl.n	bd6 <USB_Handler+0x3de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     bca:	2220      	movs	r2, #32
     bcc:	2308      	movs	r3, #8
     bce:	33ff      	adds	r3, #255	; 0xff
     bd0:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     bd2:	4b6f      	ldr	r3, [pc, #444]	; (d90 <USB_Handler+0x598>)
     bd4:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     bd6:	2360      	movs	r3, #96	; 0x60
     bd8:	420b      	tst	r3, r1
     bda:	d100      	bne.n	bde <USB_Handler+0x3e6>
     bdc:	e0d1      	b.n	d82 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     bde:	9b01      	ldr	r3, [sp, #4]
     be0:	011b      	lsls	r3, r3, #4
     be2:	18fb      	adds	r3, r7, r3
     be4:	33e0      	adds	r3, #224	; 0xe0
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	4969      	ldr	r1, [pc, #420]	; (d90 <USB_Handler+0x598>)
     bea:	0038      	movs	r0, r7
     bec:	4798      	blx	r3
     bee:	e0c8      	b.n	d82 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     bf0:	4655      	mov	r5, sl
     bf2:	4215      	tst	r5, r2
     bf4:	d01f      	beq.n	c36 <USB_Handler+0x43e>
     bf6:	003d      	movs	r5, r7
     bf8:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     bfa:	9a01      	ldr	r2, [sp, #4]
     bfc:	0013      	movs	r3, r2
     bfe:	3308      	adds	r3, #8
     c00:	015b      	lsls	r3, r3, #5
     c02:	18ed      	adds	r5, r5, r3
     c04:	2310      	movs	r3, #16
     c06:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     c08:	18bb      	adds	r3, r7, r2
     c0a:	3361      	adds	r3, #97	; 0x61
     c0c:	33ff      	adds	r3, #255	; 0xff
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	06db      	lsls	r3, r3, #27
     c12:	d400      	bmi.n	c16 <USB_Handler+0x41e>
     c14:	e0b5      	b.n	d82 <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     c16:	0010      	movs	r0, r2
     c18:	0153      	lsls	r3, r2, #5
     c1a:	4a5e      	ldr	r2, [pc, #376]	; (d94 <USB_Handler+0x59c>)
     c1c:	18d3      	adds	r3, r2, r3
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	049b      	lsls	r3, r3, #18
     c22:	0c9b      	lsrs	r3, r3, #18
     c24:	495a      	ldr	r1, [pc, #360]	; (d90 <USB_Handler+0x598>)
     c26:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     c28:	0103      	lsls	r3, r0, #4
     c2a:	18fb      	adds	r3, r7, r3
     c2c:	33dc      	adds	r3, #220	; 0xdc
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	4640      	mov	r0, r8
     c32:	4798      	blx	r3
     c34:	e0a5      	b.n	d82 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     c36:	465d      	mov	r5, fp
     c38:	4215      	tst	r5, r2
     c3a:	d03f      	beq.n	cbc <USB_Handler+0x4c4>
     c3c:	003d      	movs	r5, r7
     c3e:	4647      	mov	r7, r8
     c40:	4680      	mov	r8, r0
     c42:	015b      	lsls	r3, r3, #5
     c44:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     c46:	2308      	movs	r3, #8
     c48:	33ff      	adds	r3, #255	; 0xff
     c4a:	5ceb      	ldrb	r3, [r5, r3]
     c4c:	079b      	lsls	r3, r3, #30
     c4e:	d512      	bpl.n	c76 <USB_Handler+0x47e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     c50:	2202      	movs	r2, #2
     c52:	2308      	movs	r3, #8
     c54:	33ff      	adds	r3, #255	; 0xff
     c56:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     c58:	4a4d      	ldr	r2, [pc, #308]	; (d90 <USB_Handler+0x598>)
     c5a:	3b88      	subs	r3, #136	; 0x88
     c5c:	3bff      	subs	r3, #255	; 0xff
     c5e:	4303      	orrs	r3, r0
     c60:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     c62:	9b01      	ldr	r3, [sp, #4]
     c64:	015b      	lsls	r3, r3, #5
     c66:	484b      	ldr	r0, [pc, #300]	; (d94 <USB_Handler+0x59c>)
     c68:	18c3      	adds	r3, r0, r3
     c6a:	3310      	adds	r3, #16
     c6c:	685b      	ldr	r3, [r3, #4]
     c6e:	049b      	lsls	r3, r3, #18
     c70:	0c9b      	lsrs	r3, r3, #18
     c72:	8053      	strh	r3, [r2, #2]
     c74:	e017      	b.n	ca6 <USB_Handler+0x4ae>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     c76:	2308      	movs	r3, #8
     c78:	33ff      	adds	r3, #255	; 0xff
     c7a:	5ceb      	ldrb	r3, [r5, r3]
     c7c:	07db      	lsls	r3, r3, #31
     c7e:	d512      	bpl.n	ca6 <USB_Handler+0x4ae>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     c80:	2201      	movs	r2, #1
     c82:	2308      	movs	r3, #8
     c84:	33ff      	adds	r3, #255	; 0xff
     c86:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     c88:	4841      	ldr	r0, [pc, #260]	; (d90 <USB_Handler+0x598>)
     c8a:	4643      	mov	r3, r8
     c8c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     c8e:	9b01      	ldr	r3, [sp, #4]
     c90:	015a      	lsls	r2, r3, #5
     c92:	4b40      	ldr	r3, [pc, #256]	; (d94 <USB_Handler+0x59c>)
     c94:	189b      	adds	r3, r3, r2
     c96:	685a      	ldr	r2, [r3, #4]
     c98:	0492      	lsls	r2, r2, #18
     c9a:	0c92      	lsrs	r2, r2, #18
     c9c:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     c9e:	685b      	ldr	r3, [r3, #4]
     ca0:	011b      	lsls	r3, r3, #4
     ca2:	0c9b      	lsrs	r3, r3, #18
     ca4:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     ca6:	078b      	lsls	r3, r1, #30
     ca8:	d06b      	beq.n	d82 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	330d      	adds	r3, #13
     cae:	011b      	lsls	r3, r3, #4
     cb0:	18fb      	adds	r3, r7, r3
     cb2:	685b      	ldr	r3, [r3, #4]
     cb4:	4936      	ldr	r1, [pc, #216]	; (d90 <USB_Handler+0x598>)
     cb6:	0038      	movs	r0, r7
     cb8:	4798      	blx	r3
     cba:	e062      	b.n	d82 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     cbc:	250c      	movs	r5, #12
     cbe:	4215      	tst	r5, r2
     cc0:	d05a      	beq.n	d78 <USB_Handler+0x580>
     cc2:	003d      	movs	r5, r7
     cc4:	4647      	mov	r7, r8
     cc6:	4680      	mov	r8, r0
     cc8:	015b      	lsls	r3, r3, #5
     cca:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     ccc:	2308      	movs	r3, #8
     cce:	33ff      	adds	r3, #255	; 0xff
     cd0:	5ceb      	ldrb	r3, [r5, r3]
     cd2:	071b      	lsls	r3, r3, #28
     cd4:	d521      	bpl.n	d1a <USB_Handler+0x522>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     cd6:	2208      	movs	r2, #8
     cd8:	2308      	movs	r3, #8
     cda:	33ff      	adds	r3, #255	; 0xff
     cdc:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     cde:	9801      	ldr	r0, [sp, #4]
     ce0:	0143      	lsls	r3, r0, #5
     ce2:	4a2c      	ldr	r2, [pc, #176]	; (d94 <USB_Handler+0x59c>)
     ce4:	18d3      	adds	r3, r2, r3
     ce6:	7e9b      	ldrb	r3, [r3, #26]
     ce8:	079b      	lsls	r3, r3, #30
     cea:	d506      	bpl.n	cfa <USB_Handler+0x502>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     cec:	0142      	lsls	r2, r0, #5
     cee:	4b29      	ldr	r3, [pc, #164]	; (d94 <USB_Handler+0x59c>)
     cf0:	189b      	adds	r3, r3, r2
     cf2:	7e9a      	ldrb	r2, [r3, #26]
     cf4:	2002      	movs	r0, #2
     cf6:	4382      	bics	r2, r0
     cf8:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     cfa:	2380      	movs	r3, #128	; 0x80
     cfc:	425b      	negs	r3, r3
     cfe:	4642      	mov	r2, r8
     d00:	4313      	orrs	r3, r2
     d02:	4a23      	ldr	r2, [pc, #140]	; (d90 <USB_Handler+0x598>)
     d04:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     d06:	9b01      	ldr	r3, [sp, #4]
     d08:	3308      	adds	r3, #8
     d0a:	015b      	lsls	r3, r3, #5
     d0c:	683a      	ldr	r2, [r7, #0]
     d0e:	4694      	mov	ip, r2
     d10:	4463      	add	r3, ip
     d12:	79db      	ldrb	r3, [r3, #7]
     d14:	079b      	lsls	r3, r3, #30
     d16:	d523      	bpl.n	d60 <USB_Handler+0x568>
     d18:	e033      	b.n	d82 <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     d1a:	2308      	movs	r3, #8
     d1c:	33ff      	adds	r3, #255	; 0xff
     d1e:	5ceb      	ldrb	r3, [r5, r3]
     d20:	075b      	lsls	r3, r3, #29
     d22:	d51d      	bpl.n	d60 <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     d24:	2204      	movs	r2, #4
     d26:	2308      	movs	r3, #8
     d28:	33ff      	adds	r3, #255	; 0xff
     d2a:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     d2c:	9801      	ldr	r0, [sp, #4]
     d2e:	0143      	lsls	r3, r0, #5
     d30:	4a18      	ldr	r2, [pc, #96]	; (d94 <USB_Handler+0x59c>)
     d32:	18d3      	adds	r3, r2, r3
     d34:	7a9b      	ldrb	r3, [r3, #10]
     d36:	079b      	lsls	r3, r3, #30
     d38:	d506      	bpl.n	d48 <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     d3a:	0142      	lsls	r2, r0, #5
     d3c:	4b15      	ldr	r3, [pc, #84]	; (d94 <USB_Handler+0x59c>)
     d3e:	189b      	adds	r3, r3, r2
     d40:	7a9a      	ldrb	r2, [r3, #10]
     d42:	2002      	movs	r0, #2
     d44:	4382      	bics	r2, r0
     d46:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     d48:	4b11      	ldr	r3, [pc, #68]	; (d90 <USB_Handler+0x598>)
     d4a:	4642      	mov	r2, r8
     d4c:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     d4e:	9b01      	ldr	r3, [sp, #4]
     d50:	3308      	adds	r3, #8
     d52:	015b      	lsls	r3, r3, #5
     d54:	683a      	ldr	r2, [r7, #0]
     d56:	4694      	mov	ip, r2
     d58:	4463      	add	r3, ip
     d5a:	79db      	ldrb	r3, [r3, #7]
     d5c:	07db      	lsls	r3, r3, #31
     d5e:	d410      	bmi.n	d82 <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     d60:	230c      	movs	r3, #12
     d62:	420b      	tst	r3, r1
     d64:	d00d      	beq.n	d82 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     d66:	9b01      	ldr	r3, [sp, #4]
     d68:	011b      	lsls	r3, r3, #4
     d6a:	18fb      	adds	r3, r7, r3
     d6c:	33d8      	adds	r3, #216	; 0xd8
     d6e:	681b      	ldr	r3, [r3, #0]
     d70:	4907      	ldr	r1, [pc, #28]	; (d90 <USB_Handler+0x598>)
     d72:	0038      	movs	r0, r7
     d74:	4798      	blx	r3
     d76:	e004      	b.n	d82 <USB_Handler+0x58a>
     d78:	3301      	adds	r3, #1
     d7a:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     d7c:	2b08      	cmp	r3, #8
     d7e:	d000      	beq.n	d82 <USB_Handler+0x58a>
     d80:	e6f6      	b.n	b70 <USB_Handler+0x378>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     d82:	b003      	add	sp, #12
     d84:	bc3c      	pop	{r2, r3, r4, r5}
     d86:	4690      	mov	r8, r2
     d88:	4699      	mov	r9, r3
     d8a:	46a2      	mov	sl, r4
     d8c:	46ab      	mov	fp, r5
     d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d90:	20000058 	.word	0x20000058
     d94:	200000a8 	.word	0x200000a8

00000d98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     d98:	e7fe      	b.n	d98 <Dummy_Handler>
     d9a:	46c0      	nop			; (mov r8, r8)

00000d9c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     d9c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     d9e:	4b1d      	ldr	r3, [pc, #116]	; (e14 <Reset_Handler+0x78>)
     da0:	4a1d      	ldr	r2, [pc, #116]	; (e18 <Reset_Handler+0x7c>)
     da2:	429a      	cmp	r2, r3
     da4:	d003      	beq.n	dae <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     da6:	4b1d      	ldr	r3, [pc, #116]	; (e1c <Reset_Handler+0x80>)
     da8:	4a1a      	ldr	r2, [pc, #104]	; (e14 <Reset_Handler+0x78>)
     daa:	429a      	cmp	r2, r3
     dac:	d304      	bcc.n	db8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     dae:	4b1c      	ldr	r3, [pc, #112]	; (e20 <Reset_Handler+0x84>)
     db0:	4a1c      	ldr	r2, [pc, #112]	; (e24 <Reset_Handler+0x88>)
     db2:	429a      	cmp	r2, r3
     db4:	d310      	bcc.n	dd8 <Reset_Handler+0x3c>
     db6:	e01e      	b.n	df6 <Reset_Handler+0x5a>
     db8:	4a1b      	ldr	r2, [pc, #108]	; (e28 <Reset_Handler+0x8c>)
     dba:	4b18      	ldr	r3, [pc, #96]	; (e1c <Reset_Handler+0x80>)
     dbc:	3303      	adds	r3, #3
     dbe:	1a9b      	subs	r3, r3, r2
     dc0:	089b      	lsrs	r3, r3, #2
     dc2:	3301      	adds	r3, #1
     dc4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     dc6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     dc8:	4812      	ldr	r0, [pc, #72]	; (e14 <Reset_Handler+0x78>)
     dca:	4913      	ldr	r1, [pc, #76]	; (e18 <Reset_Handler+0x7c>)
     dcc:	588c      	ldr	r4, [r1, r2]
     dce:	5084      	str	r4, [r0, r2]
     dd0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     dd2:	429a      	cmp	r2, r3
     dd4:	d1fa      	bne.n	dcc <Reset_Handler+0x30>
     dd6:	e7ea      	b.n	dae <Reset_Handler+0x12>
     dd8:	4a14      	ldr	r2, [pc, #80]	; (e2c <Reset_Handler+0x90>)
     dda:	4b11      	ldr	r3, [pc, #68]	; (e20 <Reset_Handler+0x84>)
     ddc:	3303      	adds	r3, #3
     dde:	1a9b      	subs	r3, r3, r2
     de0:	089b      	lsrs	r3, r3, #2
     de2:	3301      	adds	r3, #1
     de4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     de6:	2200      	movs	r2, #0
                *pDest++ = 0;
     de8:	480e      	ldr	r0, [pc, #56]	; (e24 <Reset_Handler+0x88>)
     dea:	2100      	movs	r1, #0
     dec:	1814      	adds	r4, r2, r0
     dee:	6021      	str	r1, [r4, #0]
     df0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     df2:	429a      	cmp	r2, r3
     df4:	d1fa      	bne.n	dec <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     df6:	4a0e      	ldr	r2, [pc, #56]	; (e30 <Reset_Handler+0x94>)
     df8:	21ff      	movs	r1, #255	; 0xff
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <Reset_Handler+0x98>)
     dfc:	438b      	bics	r3, r1
     dfe:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     e00:	4a0d      	ldr	r2, [pc, #52]	; (e38 <Reset_Handler+0x9c>)
     e02:	6851      	ldr	r1, [r2, #4]
     e04:	2380      	movs	r3, #128	; 0x80
     e06:	430b      	orrs	r3, r1
     e08:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     e0a:	4b0c      	ldr	r3, [pc, #48]	; (e3c <Reset_Handler+0xa0>)
     e0c:	4798      	blx	r3

        /* Branch to main function */
        main();
     e0e:	4b0c      	ldr	r3, [pc, #48]	; (e40 <Reset_Handler+0xa4>)
     e10:	4798      	blx	r3
     e12:	e7fe      	b.n	e12 <Reset_Handler+0x76>
     e14:	20000000 	.word	0x20000000
     e18:	0000116c 	.word	0x0000116c
     e1c:	2000000c 	.word	0x2000000c
     e20:	200001a8 	.word	0x200001a8
     e24:	2000000c 	.word	0x2000000c
     e28:	20000004 	.word	0x20000004
     e2c:	20000010 	.word	0x20000010
     e30:	e000ed00 	.word	0xe000ed00
     e34:	00000000 	.word	0x00000000
     e38:	41004000 	.word	0x41004000
     e3c:	000010cd 	.word	0x000010cd
     e40:	00000e45 	.word	0x00000e45

00000e44 <main>:
        udi_cdc_getc();
    }
}

int main (void)
{
     e44:	b5f0      	push	{r4, r5, r6, r7, lr}
     e46:	4657      	mov	r7, sl
     e48:	464e      	mov	r6, r9
     e4a:	4645      	mov	r5, r8
     e4c:	b4e0      	push	{r5, r6, r7}
     e4e:	b084      	sub	sp, #16
    // main startup stuff
	system_init();
     e50:	4b44      	ldr	r3, [pc, #272]	; (f64 <main+0x120>)
     e52:	4798      	blx	r3
    // gpio config struct declarations
    struct port_config led_pin_conf;
    struct port_config pb_pin_conf;
    
    // pushbutton related stuff
    volatile bool pb_state = false;
     e54:	2300      	movs	r3, #0
     e56:	466a      	mov	r2, sp
     e58:	71d3      	strb	r3, [r2, #7]
    volatile bool pb_state_1 = false;
     e5a:	466a      	mov	r2, sp
     e5c:	7193      	strb	r3, [r2, #6]
    
    // init structs
    led_pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     e5e:	ad03      	add	r5, sp, #12
     e60:	2201      	movs	r2, #1
     e62:	702a      	strb	r2, [r5, #0]
    pb_pin_conf.direction = PORT_PIN_DIR_INPUT;
     e64:	ae02      	add	r6, sp, #8
     e66:	7033      	strb	r3, [r6, #0]
    pb_pin_conf.input_pull = PORT_PIN_PULL_UP;
     e68:	7072      	strb	r2, [r6, #1]
    
    // output inits
    port_pin_set_config(LED_R1_PIN, &led_pin_conf);
     e6a:	0029      	movs	r1, r5
     e6c:	2007      	movs	r0, #7
     e6e:	4c3e      	ldr	r4, [pc, #248]	; (f68 <main+0x124>)
     e70:	47a0      	blx	r4
    port_pin_set_config(LED_G1_PIN, &led_pin_conf);        
     e72:	0029      	movs	r1, r5
     e74:	2006      	movs	r0, #6
     e76:	47a0      	blx	r4
    port_pin_set_config(LED_R2_PIN, &led_pin_conf);
     e78:	0029      	movs	r1, r5
     e7a:	2029      	movs	r0, #41	; 0x29
     e7c:	47a0      	blx	r4
    port_pin_set_config(LED_G2_PIN, &led_pin_conf);        
     e7e:	0029      	movs	r1, r5
     e80:	2028      	movs	r0, #40	; 0x28
     e82:	47a0      	blx	r4
    port_pin_set_config(LED_R3_PIN, &led_pin_conf);
     e84:	0029      	movs	r1, r5
     e86:	2009      	movs	r0, #9
     e88:	47a0      	blx	r4
    port_pin_set_config(LED_G3_PIN, &led_pin_conf);    
     e8a:	0029      	movs	r1, r5
     e8c:	2008      	movs	r0, #8
     e8e:	47a0      	blx	r4
    port_pin_set_config(LED_R4_PIN, &led_pin_conf);
     e90:	0029      	movs	r1, r5
     e92:	200b      	movs	r0, #11
     e94:	47a0      	blx	r4
    port_pin_set_config(LED_G4_PIN, &led_pin_conf);            
     e96:	0029      	movs	r1, r5
     e98:	200a      	movs	r0, #10
     e9a:	47a0      	blx	r4
    port_pin_set_config(LED_R5_PIN, &led_pin_conf);
     e9c:	0029      	movs	r1, r5
     e9e:	202d      	movs	r0, #45	; 0x2d
     ea0:	47a0      	blx	r4
    port_pin_set_config(LED_G5_PIN, &led_pin_conf);    
     ea2:	0029      	movs	r1, r5
     ea4:	202c      	movs	r0, #44	; 0x2c
     ea6:	47a0      	blx	r4
    port_pin_set_config(LED_R6_PIN, &led_pin_conf);
     ea8:	0029      	movs	r1, r5
     eaa:	202b      	movs	r0, #43	; 0x2b
     eac:	47a0      	blx	r4
    port_pin_set_config(LED_G6_PIN, &led_pin_conf);
     eae:	0029      	movs	r1, r5
     eb0:	202a      	movs	r0, #42	; 0x2a
     eb2:	47a0      	blx	r4
        
    // input inits
    port_pin_set_config(PB_PIN, &pb_pin_conf);  
     eb4:	0031      	movs	r1, r6
     eb6:	201b      	movs	r0, #27
     eb8:	47a0      	blx	r4
     eba:	4b2c      	ldr	r3, [pc, #176]	; (f6c <main+0x128>)
     ebc:	2280      	movs	r2, #128	; 0x80
     ebe:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     ec0:	3a40      	subs	r2, #64	; 0x40
     ec2:	615a      	str	r2, [r3, #20]
     ec4:	001a      	movs	r2, r3
     ec6:	3280      	adds	r2, #128	; 0x80
     ec8:	2080      	movs	r0, #128	; 0x80
     eca:	0080      	lsls	r0, r0, #2
     ecc:	6150      	str	r0, [r2, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ece:	2180      	movs	r1, #128	; 0x80
     ed0:	0049      	lsls	r1, r1, #1
     ed2:	6191      	str	r1, [r2, #24]
     ed4:	6198      	str	r0, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     ed6:	6159      	str	r1, [r3, #20]
     ed8:	2080      	movs	r0, #128	; 0x80
     eda:	0100      	lsls	r0, r0, #4
     edc:	6158      	str	r0, [r3, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ede:	2180      	movs	r1, #128	; 0x80
     ee0:	00c9      	lsls	r1, r1, #3
     ee2:	6199      	str	r1, [r3, #24]
     ee4:	2380      	movs	r3, #128	; 0x80
     ee6:	019b      	lsls	r3, r3, #6
     ee8:	6193      	str	r3, [r2, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     eea:	2380      	movs	r3, #128	; 0x80
     eec:	015b      	lsls	r3, r3, #5
     eee:	6153      	str	r3, [r2, #20]
     ef0:	6150      	str	r0, [r2, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ef2:	6191      	str	r1, [r2, #24]
    port_pin_set_output_level(LED_R5_PIN, true);
    port_pin_set_output_level(LED_G5_PIN, false);    		
    port_pin_set_output_level(LED_R6_PIN, false);
    port_pin_set_output_level(LED_G6_PIN, true);
    
    delay_init();
     ef4:	4b1e      	ldr	r3, [pc, #120]	; (f70 <main+0x12c>)
     ef6:	4798      	blx	r3
    
    //udc_start();
        
	while(1)
    {
        pb_state_1 = pb_state;
     ef8:	466b      	mov	r3, sp
     efa:	1dda      	adds	r2, r3, #7
     efc:	1d98      	adds	r0, r3, #6
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     efe:	491b      	ldr	r1, [pc, #108]	; (f6c <main+0x128>)
        pb_state = !port_pin_get_input_level(PB_PIN);
     f00:	2501      	movs	r5, #1
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     f02:	2380      	movs	r3, #128	; 0x80
     f04:	469c      	mov	ip, r3
     f06:	3b40      	subs	r3, #64	; 0x40
     f08:	4698      	mov	r8, r3
     f0a:	000c      	movs	r4, r1
     f0c:	3480      	adds	r4, #128	; 0x80
     f0e:	2680      	movs	r6, #128	; 0x80
     f10:	00b6      	lsls	r6, r6, #2
    
    //udc_start();
        
	while(1)
    {
        pb_state_1 = pb_state;
     f12:	7813      	ldrb	r3, [r2, #0]
     f14:	b2db      	uxtb	r3, r3
     f16:	7003      	strb	r3, [r0, #0]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     f18:	6a0b      	ldr	r3, [r1, #32]
        pb_state = !port_pin_get_input_level(PB_PIN);
     f1a:	0edb      	lsrs	r3, r3, #27
     f1c:	002f      	movs	r7, r5
     f1e:	439f      	bics	r7, r3
     f20:	7017      	strb	r7, [r2, #0]
        if((pb_state == true) && (pb_state_1 == false))
     f22:	7813      	ldrb	r3, [r2, #0]
     f24:	2b00      	cmp	r3, #0
     f26:	d0f4      	beq.n	f12 <main+0xce>
     f28:	7803      	ldrb	r3, [r0, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d1f1      	bne.n	f12 <main+0xce>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     f2e:	4663      	mov	r3, ip
     f30:	61cb      	str	r3, [r1, #28]
     f32:	4643      	mov	r3, r8
     f34:	61cb      	str	r3, [r1, #28]
     f36:	61e6      	str	r6, [r4, #28]
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	61e3      	str	r3, [r4, #28]
     f3e:	61ce      	str	r6, [r1, #28]
     f40:	61cb      	str	r3, [r1, #28]
     f42:	2780      	movs	r7, #128	; 0x80
     f44:	013f      	lsls	r7, r7, #4
     f46:	61cf      	str	r7, [r1, #28]
     f48:	2380      	movs	r3, #128	; 0x80
     f4a:	00db      	lsls	r3, r3, #3
     f4c:	469a      	mov	sl, r3
     f4e:	61cb      	str	r3, [r1, #28]
     f50:	2380      	movs	r3, #128	; 0x80
     f52:	019b      	lsls	r3, r3, #6
     f54:	61e3      	str	r3, [r4, #28]
     f56:	2380      	movs	r3, #128	; 0x80
     f58:	015b      	lsls	r3, r3, #5
     f5a:	61e3      	str	r3, [r4, #28]
     f5c:	61e7      	str	r7, [r4, #28]
     f5e:	4653      	mov	r3, sl
     f60:	61e3      	str	r3, [r4, #28]
     f62:	e7d6      	b.n	f12 <main+0xce>
     f64:	000007cd 	.word	0x000007cd
     f68:	00000309 	.word	0x00000309
     f6c:	40002800 	.word	0x40002800
     f70:	00000115 	.word	0x00000115

00000f74 <__aeabi_uidiv>:
     f74:	2200      	movs	r2, #0
     f76:	0843      	lsrs	r3, r0, #1
     f78:	428b      	cmp	r3, r1
     f7a:	d374      	bcc.n	1066 <__aeabi_uidiv+0xf2>
     f7c:	0903      	lsrs	r3, r0, #4
     f7e:	428b      	cmp	r3, r1
     f80:	d35f      	bcc.n	1042 <__aeabi_uidiv+0xce>
     f82:	0a03      	lsrs	r3, r0, #8
     f84:	428b      	cmp	r3, r1
     f86:	d344      	bcc.n	1012 <__aeabi_uidiv+0x9e>
     f88:	0b03      	lsrs	r3, r0, #12
     f8a:	428b      	cmp	r3, r1
     f8c:	d328      	bcc.n	fe0 <__aeabi_uidiv+0x6c>
     f8e:	0c03      	lsrs	r3, r0, #16
     f90:	428b      	cmp	r3, r1
     f92:	d30d      	bcc.n	fb0 <__aeabi_uidiv+0x3c>
     f94:	22ff      	movs	r2, #255	; 0xff
     f96:	0209      	lsls	r1, r1, #8
     f98:	ba12      	rev	r2, r2
     f9a:	0c03      	lsrs	r3, r0, #16
     f9c:	428b      	cmp	r3, r1
     f9e:	d302      	bcc.n	fa6 <__aeabi_uidiv+0x32>
     fa0:	1212      	asrs	r2, r2, #8
     fa2:	0209      	lsls	r1, r1, #8
     fa4:	d065      	beq.n	1072 <__aeabi_uidiv+0xfe>
     fa6:	0b03      	lsrs	r3, r0, #12
     fa8:	428b      	cmp	r3, r1
     faa:	d319      	bcc.n	fe0 <__aeabi_uidiv+0x6c>
     fac:	e000      	b.n	fb0 <__aeabi_uidiv+0x3c>
     fae:	0a09      	lsrs	r1, r1, #8
     fb0:	0bc3      	lsrs	r3, r0, #15
     fb2:	428b      	cmp	r3, r1
     fb4:	d301      	bcc.n	fba <__aeabi_uidiv+0x46>
     fb6:	03cb      	lsls	r3, r1, #15
     fb8:	1ac0      	subs	r0, r0, r3
     fba:	4152      	adcs	r2, r2
     fbc:	0b83      	lsrs	r3, r0, #14
     fbe:	428b      	cmp	r3, r1
     fc0:	d301      	bcc.n	fc6 <__aeabi_uidiv+0x52>
     fc2:	038b      	lsls	r3, r1, #14
     fc4:	1ac0      	subs	r0, r0, r3
     fc6:	4152      	adcs	r2, r2
     fc8:	0b43      	lsrs	r3, r0, #13
     fca:	428b      	cmp	r3, r1
     fcc:	d301      	bcc.n	fd2 <__aeabi_uidiv+0x5e>
     fce:	034b      	lsls	r3, r1, #13
     fd0:	1ac0      	subs	r0, r0, r3
     fd2:	4152      	adcs	r2, r2
     fd4:	0b03      	lsrs	r3, r0, #12
     fd6:	428b      	cmp	r3, r1
     fd8:	d301      	bcc.n	fde <__aeabi_uidiv+0x6a>
     fda:	030b      	lsls	r3, r1, #12
     fdc:	1ac0      	subs	r0, r0, r3
     fde:	4152      	adcs	r2, r2
     fe0:	0ac3      	lsrs	r3, r0, #11
     fe2:	428b      	cmp	r3, r1
     fe4:	d301      	bcc.n	fea <__aeabi_uidiv+0x76>
     fe6:	02cb      	lsls	r3, r1, #11
     fe8:	1ac0      	subs	r0, r0, r3
     fea:	4152      	adcs	r2, r2
     fec:	0a83      	lsrs	r3, r0, #10
     fee:	428b      	cmp	r3, r1
     ff0:	d301      	bcc.n	ff6 <__aeabi_uidiv+0x82>
     ff2:	028b      	lsls	r3, r1, #10
     ff4:	1ac0      	subs	r0, r0, r3
     ff6:	4152      	adcs	r2, r2
     ff8:	0a43      	lsrs	r3, r0, #9
     ffa:	428b      	cmp	r3, r1
     ffc:	d301      	bcc.n	1002 <__aeabi_uidiv+0x8e>
     ffe:	024b      	lsls	r3, r1, #9
    1000:	1ac0      	subs	r0, r0, r3
    1002:	4152      	adcs	r2, r2
    1004:	0a03      	lsrs	r3, r0, #8
    1006:	428b      	cmp	r3, r1
    1008:	d301      	bcc.n	100e <__aeabi_uidiv+0x9a>
    100a:	020b      	lsls	r3, r1, #8
    100c:	1ac0      	subs	r0, r0, r3
    100e:	4152      	adcs	r2, r2
    1010:	d2cd      	bcs.n	fae <__aeabi_uidiv+0x3a>
    1012:	09c3      	lsrs	r3, r0, #7
    1014:	428b      	cmp	r3, r1
    1016:	d301      	bcc.n	101c <__aeabi_uidiv+0xa8>
    1018:	01cb      	lsls	r3, r1, #7
    101a:	1ac0      	subs	r0, r0, r3
    101c:	4152      	adcs	r2, r2
    101e:	0983      	lsrs	r3, r0, #6
    1020:	428b      	cmp	r3, r1
    1022:	d301      	bcc.n	1028 <__aeabi_uidiv+0xb4>
    1024:	018b      	lsls	r3, r1, #6
    1026:	1ac0      	subs	r0, r0, r3
    1028:	4152      	adcs	r2, r2
    102a:	0943      	lsrs	r3, r0, #5
    102c:	428b      	cmp	r3, r1
    102e:	d301      	bcc.n	1034 <__aeabi_uidiv+0xc0>
    1030:	014b      	lsls	r3, r1, #5
    1032:	1ac0      	subs	r0, r0, r3
    1034:	4152      	adcs	r2, r2
    1036:	0903      	lsrs	r3, r0, #4
    1038:	428b      	cmp	r3, r1
    103a:	d301      	bcc.n	1040 <__aeabi_uidiv+0xcc>
    103c:	010b      	lsls	r3, r1, #4
    103e:	1ac0      	subs	r0, r0, r3
    1040:	4152      	adcs	r2, r2
    1042:	08c3      	lsrs	r3, r0, #3
    1044:	428b      	cmp	r3, r1
    1046:	d301      	bcc.n	104c <__aeabi_uidiv+0xd8>
    1048:	00cb      	lsls	r3, r1, #3
    104a:	1ac0      	subs	r0, r0, r3
    104c:	4152      	adcs	r2, r2
    104e:	0883      	lsrs	r3, r0, #2
    1050:	428b      	cmp	r3, r1
    1052:	d301      	bcc.n	1058 <__aeabi_uidiv+0xe4>
    1054:	008b      	lsls	r3, r1, #2
    1056:	1ac0      	subs	r0, r0, r3
    1058:	4152      	adcs	r2, r2
    105a:	0843      	lsrs	r3, r0, #1
    105c:	428b      	cmp	r3, r1
    105e:	d301      	bcc.n	1064 <__aeabi_uidiv+0xf0>
    1060:	004b      	lsls	r3, r1, #1
    1062:	1ac0      	subs	r0, r0, r3
    1064:	4152      	adcs	r2, r2
    1066:	1a41      	subs	r1, r0, r1
    1068:	d200      	bcs.n	106c <__aeabi_uidiv+0xf8>
    106a:	4601      	mov	r1, r0
    106c:	4152      	adcs	r2, r2
    106e:	4610      	mov	r0, r2
    1070:	4770      	bx	lr
    1072:	e7ff      	b.n	1074 <__aeabi_uidiv+0x100>
    1074:	b501      	push	{r0, lr}
    1076:	2000      	movs	r0, #0
    1078:	f000 f806 	bl	1088 <__aeabi_idiv0>
    107c:	bd02      	pop	{r1, pc}
    107e:	46c0      	nop			; (mov r8, r8)

00001080 <__aeabi_uidivmod>:
    1080:	2900      	cmp	r1, #0
    1082:	d0f7      	beq.n	1074 <__aeabi_uidiv+0x100>
    1084:	e776      	b.n	f74 <__aeabi_uidiv>
    1086:	4770      	bx	lr

00001088 <__aeabi_idiv0>:
    1088:	4770      	bx	lr
    108a:	46c0      	nop			; (mov r8, r8)

0000108c <__ctzsi2>:
    108c:	4241      	negs	r1, r0
    108e:	4008      	ands	r0, r1
    1090:	211c      	movs	r1, #28
    1092:	2301      	movs	r3, #1
    1094:	041b      	lsls	r3, r3, #16
    1096:	4298      	cmp	r0, r3
    1098:	d301      	bcc.n	109e <__ctzsi2+0x12>
    109a:	0c00      	lsrs	r0, r0, #16
    109c:	3910      	subs	r1, #16
    109e:	0a1b      	lsrs	r3, r3, #8
    10a0:	4298      	cmp	r0, r3
    10a2:	d301      	bcc.n	10a8 <__ctzsi2+0x1c>
    10a4:	0a00      	lsrs	r0, r0, #8
    10a6:	3908      	subs	r1, #8
    10a8:	091b      	lsrs	r3, r3, #4
    10aa:	4298      	cmp	r0, r3
    10ac:	d301      	bcc.n	10b2 <__ctzsi2+0x26>
    10ae:	0900      	lsrs	r0, r0, #4
    10b0:	3904      	subs	r1, #4
    10b2:	a202      	add	r2, pc, #8	; (adr r2, 10bc <__ctzsi2+0x30>)
    10b4:	5c10      	ldrb	r0, [r2, r0]
    10b6:	1a40      	subs	r0, r0, r1
    10b8:	4770      	bx	lr
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	1d1d1c1b 	.word	0x1d1d1c1b
    10c0:	1e1e1e1e 	.word	0x1e1e1e1e
    10c4:	1f1f1f1f 	.word	0x1f1f1f1f
    10c8:	1f1f1f1f 	.word	0x1f1f1f1f

000010cc <__libc_init_array>:
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <__libc_init_array+0x3c>)
    10ce:	b570      	push	{r4, r5, r6, lr}
    10d0:	2500      	movs	r5, #0
    10d2:	001e      	movs	r6, r3
    10d4:	4c0d      	ldr	r4, [pc, #52]	; (110c <__libc_init_array+0x40>)
    10d6:	1ae4      	subs	r4, r4, r3
    10d8:	10a4      	asrs	r4, r4, #2
    10da:	42a5      	cmp	r5, r4
    10dc:	d004      	beq.n	10e8 <__libc_init_array+0x1c>
    10de:	00ab      	lsls	r3, r5, #2
    10e0:	58f3      	ldr	r3, [r6, r3]
    10e2:	4798      	blx	r3
    10e4:	3501      	adds	r5, #1
    10e6:	e7f8      	b.n	10da <__libc_init_array+0xe>
    10e8:	f000 f830 	bl	114c <_init>
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <__libc_init_array+0x44>)
    10ee:	2500      	movs	r5, #0
    10f0:	001e      	movs	r6, r3
    10f2:	4c08      	ldr	r4, [pc, #32]	; (1114 <__libc_init_array+0x48>)
    10f4:	1ae4      	subs	r4, r4, r3
    10f6:	10a4      	asrs	r4, r4, #2
    10f8:	42a5      	cmp	r5, r4
    10fa:	d004      	beq.n	1106 <__libc_init_array+0x3a>
    10fc:	00ab      	lsls	r3, r5, #2
    10fe:	58f3      	ldr	r3, [r6, r3]
    1100:	4798      	blx	r3
    1102:	3501      	adds	r5, #1
    1104:	e7f8      	b.n	10f8 <__libc_init_array+0x2c>
    1106:	bd70      	pop	{r4, r5, r6, pc}
    1108:	00001158 	.word	0x00001158
    110c:	00001158 	.word	0x00001158
    1110:	00001158 	.word	0x00001158
    1114:	0000115c 	.word	0x0000115c
    1118:	0000033e 	.word	0x0000033e
    111c:	0000033a 	.word	0x0000033a
    1120:	0000033a 	.word	0x0000033a
    1124:	0000039c 	.word	0x0000039c
    1128:	0000039c 	.word	0x0000039c
    112c:	00000354 	.word	0x00000354
    1130:	00000344 	.word	0x00000344
    1134:	0000035a 	.word	0x0000035a
    1138:	0000038a 	.word	0x0000038a

0000113c <_usb_device_irq_bits>:
    113c:	00080004 00800070 01000001 00000200     ....p...........

0000114c <_init>:
    114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1152:	bc08      	pop	{r3}
    1154:	469e      	mov	lr, r3
    1156:	4770      	bx	lr

00001158 <__init_array_start>:
    1158:	000000dd 	.word	0x000000dd

0000115c <_fini>:
    115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1162:	bc08      	pop	{r3}
    1164:	469e      	mov	lr, r3
    1166:	4770      	bx	lr

00001168 <__fini_array_start>:
    1168:	000000b5 	.word	0x000000b5
