
Snowflake_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00000c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020008  2**0
                  CONTENTS
  3 .bss          00000040  20000008  00000c94  00020008  2**2
                  ALLOC
  4 .stack        00002000  20000048  00000cd4  00020008  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .debug_info   000086d3  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012d3  00000000  00000000  0002875c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001cbf  00000000  00000000  00029a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000268  00000000  00000000  0002b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0002b956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a842  00000000  00000000  0002bbae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000684a  00000000  00000000  000463f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00097515  00000000  00000000  0004cc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000057c  00000000  00000000  000e4150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002048 	.word	0x20002048
   4:	00000a05 	.word	0x00000a05
   8:	00000a01 	.word	0x00000a01
   c:	00000a01 	.word	0x00000a01
	...
  2c:	00000a01 	.word	0x00000a01
	...
  38:	00000a01 	.word	0x00000a01
  3c:	00000a01 	.word	0x00000a01
  40:	00000a01 	.word	0x00000a01
  44:	00000a01 	.word	0x00000a01
  48:	00000a01 	.word	0x00000a01
  4c:	00000a01 	.word	0x00000a01
  50:	00000a01 	.word	0x00000a01
  54:	00000a01 	.word	0x00000a01
  58:	00000a01 	.word	0x00000a01
  5c:	00000a01 	.word	0x00000a01
  60:	00000a01 	.word	0x00000a01
  64:	00000a01 	.word	0x00000a01
  68:	00000a01 	.word	0x00000a01
  6c:	00000a01 	.word	0x00000a01
  70:	00000a01 	.word	0x00000a01
  74:	00000a01 	.word	0x00000a01
  78:	00000a01 	.word	0x00000a01
  7c:	00000a01 	.word	0x00000a01
  80:	00000a01 	.word	0x00000a01
  84:	00000a01 	.word	0x00000a01
  88:	00000a01 	.word	0x00000a01
  8c:	00000a01 	.word	0x00000a01
  90:	00000a01 	.word	0x00000a01
  94:	00000a01 	.word	0x00000a01
  98:	00000a01 	.word	0x00000a01
  9c:	00000a01 	.word	0x00000a01
  a0:	00000a01 	.word	0x00000a01
  a4:	00000a01 	.word	0x00000a01
  a8:	00000a01 	.word	0x00000a01
  ac:	00000a01 	.word	0x00000a01
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000008 	.word	0x20000008
  d4:	00000000 	.word	0x00000000
  d8:	00000c8c 	.word	0x00000c8c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	2000000c 	.word	0x2000000c
 108:	00000c8c 	.word	0x00000c8c
 10c:	00000c8c 	.word	0x00000c8c
 110:	00000000 	.word	0x00000000

00000114 <snowflake_led_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_led_init()
{
 114:	b570      	push	{r4, r5, r6, lr}
    // Configure LEDs as outputs
    port_pin_set_config(LED_R1_PIN, &gpio_output);
 116:	4d22      	ldr	r5, [pc, #136]	; (1a0 <snowflake_led_init+0x8c>)
 118:	0029      	movs	r1, r5
 11a:	2007      	movs	r0, #7
 11c:	4c21      	ldr	r4, [pc, #132]	; (1a4 <snowflake_led_init+0x90>)
 11e:	47a0      	blx	r4
    port_pin_set_config(LED_G1_PIN, &gpio_output);
 120:	0029      	movs	r1, r5
 122:	2006      	movs	r0, #6
 124:	47a0      	blx	r4
    port_pin_set_config(LED_R2_PIN, &gpio_output);
 126:	0029      	movs	r1, r5
 128:	2029      	movs	r0, #41	; 0x29
 12a:	47a0      	blx	r4
    port_pin_set_config(LED_G2_PIN, &gpio_output);
 12c:	0029      	movs	r1, r5
 12e:	2028      	movs	r0, #40	; 0x28
 130:	47a0      	blx	r4
    port_pin_set_config(LED_R3_PIN, &gpio_output);
 132:	0029      	movs	r1, r5
 134:	2009      	movs	r0, #9
 136:	47a0      	blx	r4
    port_pin_set_config(LED_G3_PIN, &gpio_output);
 138:	0029      	movs	r1, r5
 13a:	2008      	movs	r0, #8
 13c:	47a0      	blx	r4
    port_pin_set_config(LED_R4_PIN, &gpio_output);
 13e:	0029      	movs	r1, r5
 140:	200b      	movs	r0, #11
 142:	47a0      	blx	r4
    port_pin_set_config(LED_G4_PIN, &gpio_output);
 144:	0029      	movs	r1, r5
 146:	200a      	movs	r0, #10
 148:	47a0      	blx	r4
    port_pin_set_config(LED_R5_PIN, &gpio_output);
 14a:	0029      	movs	r1, r5
 14c:	202d      	movs	r0, #45	; 0x2d
 14e:	47a0      	blx	r4
    port_pin_set_config(LED_G5_PIN, &gpio_output);
 150:	0029      	movs	r1, r5
 152:	202c      	movs	r0, #44	; 0x2c
 154:	47a0      	blx	r4
    port_pin_set_config(LED_R6_PIN, &gpio_output);
 156:	0029      	movs	r1, r5
 158:	202b      	movs	r0, #43	; 0x2b
 15a:	47a0      	blx	r4
    port_pin_set_config(LED_G6_PIN, &gpio_output);
 15c:	0029      	movs	r1, r5
 15e:	202a      	movs	r0, #42	; 0x2a
 160:	47a0      	blx	r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
 162:	4b11      	ldr	r3, [pc, #68]	; (1a8 <snowflake_led_init+0x94>)
 164:	2280      	movs	r2, #128	; 0x80
 166:	615a      	str	r2, [r3, #20]
 168:	3a40      	subs	r2, #64	; 0x40
 16a:	615a      	str	r2, [r3, #20]
 16c:	001a      	movs	r2, r3
 16e:	3280      	adds	r2, #128	; 0x80
 170:	2080      	movs	r0, #128	; 0x80
 172:	0080      	lsls	r0, r0, #2
 174:	6150      	str	r0, [r2, #20]
 176:	2180      	movs	r1, #128	; 0x80
 178:	0049      	lsls	r1, r1, #1
 17a:	6151      	str	r1, [r2, #20]
 17c:	6158      	str	r0, [r3, #20]
 17e:	6159      	str	r1, [r3, #20]
 180:	2080      	movs	r0, #128	; 0x80
 182:	0100      	lsls	r0, r0, #4
 184:	6158      	str	r0, [r3, #20]
 186:	2180      	movs	r1, #128	; 0x80
 188:	00c9      	lsls	r1, r1, #3
 18a:	6159      	str	r1, [r3, #20]
 18c:	2380      	movs	r3, #128	; 0x80
 18e:	019b      	lsls	r3, r3, #6
 190:	6153      	str	r3, [r2, #20]
 192:	2380      	movs	r3, #128	; 0x80
 194:	015b      	lsls	r3, r3, #5
 196:	6153      	str	r3, [r2, #20]
 198:	6150      	str	r0, [r2, #20]
 19a:	6151      	str	r1, [r2, #20]
    port_pin_set_output_level(LED_G4_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_R5_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_G5_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_R6_PIN, LED_INACTIVE);
    port_pin_set_output_level(LED_G6_PIN, LED_INACTIVE);
}
 19c:	bd70      	pop	{r4, r5, r6, pc}
 19e:	46c0      	nop			; (mov r8, r8)
 1a0:	20000004 	.word	0x20000004
 1a4:	000002dd 	.word	0x000002dd
 1a8:	40002800 	.word	0x40002800

000001ac <snowflake_pb_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_pb_init()
{
 1ac:	b510      	push	{r4, lr}
    // Configure pushbutton pin as input with pullup
    port_pin_set_config(PB_PIN, &gpio_input_up);
 1ae:	4902      	ldr	r1, [pc, #8]	; (1b8 <snowflake_pb_init+0xc>)
 1b0:	201b      	movs	r0, #27
 1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <snowflake_pb_init+0x10>)
 1b4:	4798      	blx	r3
}
 1b6:	bd10      	pop	{r4, pc}
 1b8:	20000000 	.word	0x20000000
 1bc:	000002dd 	.word	0x000002dd

000001c0 <snowflake_flash_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_flash_init()
{
 1c0:	b570      	push	{r4, r5, r6, lr}
    // Configure flash discretes as outputs
    port_pin_set_config(FLASH_CS_PIN, &gpio_output);
 1c2:	4d0a      	ldr	r5, [pc, #40]	; (1ec <snowflake_flash_init+0x2c>)
 1c4:	0029      	movs	r1, r5
 1c6:	2020      	movs	r0, #32
 1c8:	4c09      	ldr	r4, [pc, #36]	; (1f0 <snowflake_flash_init+0x30>)
 1ca:	47a0      	blx	r4
    port_pin_set_config(FLASH_HOLD_PIN, &gpio_output);
 1cc:	0029      	movs	r1, r5
 1ce:	203f      	movs	r0, #63	; 0x3f
 1d0:	47a0      	blx	r4
    port_pin_set_config(FLASH_WP_PIN, &gpio_output);
 1d2:	0029      	movs	r1, r5
 1d4:	203e      	movs	r0, #62	; 0x3e
 1d6:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1d8:	4b06      	ldr	r3, [pc, #24]	; (1f4 <snowflake_flash_init+0x34>)
 1da:	2201      	movs	r2, #1
 1dc:	619a      	str	r2, [r3, #24]
 1de:	2280      	movs	r2, #128	; 0x80
 1e0:	0612      	lsls	r2, r2, #24
 1e2:	619a      	str	r2, [r3, #24]
 1e4:	2280      	movs	r2, #128	; 0x80
 1e6:	05d2      	lsls	r2, r2, #23
 1e8:	619a      	str	r2, [r3, #24]
    
    // Set flash discretes to inactive states
    port_pin_set_output_level(FLASH_CS_PIN, FLASH_INACTIVE);
    port_pin_set_output_level(FLASH_HOLD_PIN, FLASH_INACTIVE);
    port_pin_set_output_level(FLASH_WP_PIN, FLASH_INACTIVE);
}
 1ea:	bd70      	pop	{r4, r5, r6, pc}
 1ec:	20000004 	.word	0x20000004
 1f0:	000002dd 	.word	0x000002dd
 1f4:	40002880 	.word	0x40002880

000001f8 <snowflake_usb_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_usb_init()
{
 1f8:	b510      	push	{r4, lr}
    // Configure USB Vbus monitor as input without pullup
    port_pin_set_config(USB_VBUS_DET_PIN, &gpio_input);
 1fa:	4902      	ldr	r1, [pc, #8]	; (204 <snowflake_usb_init+0xc>)
 1fc:	2016      	movs	r0, #22
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <snowflake_usb_init+0x10>)
 200:	4798      	blx	r3
}
 202:	bd10      	pop	{r4, pc}
 204:	20000024 	.word	0x20000024
 208:	000002dd 	.word	0x000002dd

0000020c <snowflake_amp_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_amp_init()
{
 20c:	b570      	push	{r4, r5, r6, lr}
    // Configure amplifier & audio related discretes as outputs
    port_pin_set_config(AMP_SHDN_PIN, &gpio_output);
 20e:	4d08      	ldr	r5, [pc, #32]	; (230 <snowflake_amp_init+0x24>)
 210:	0029      	movs	r1, r5
 212:	2024      	movs	r0, #36	; 0x24
 214:	4c07      	ldr	r4, [pc, #28]	; (234 <snowflake_amp_init+0x28>)
 216:	47a0      	blx	r4
    port_pin_set_config(VREF_PIN, &gpio_output);
 218:	0029      	movs	r1, r5
 21a:	2003      	movs	r0, #3
 21c:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
 21e:	4b06      	ldr	r3, [pc, #24]	; (238 <snowflake_amp_init+0x2c>)
 220:	001a      	movs	r2, r3
 222:	3280      	adds	r2, #128	; 0x80
 224:	2110      	movs	r1, #16
 226:	6151      	str	r1, [r2, #20]
 228:	2208      	movs	r2, #8
 22a:	615a      	str	r2, [r3, #20]
    
    // Turn off amplifier and Vref input
    port_pin_set_output_level(AMP_SHDN_PIN, AMP_SHDN_ACTIVE);
    port_pin_set_output_level(VREF_PIN, VREF_INACTIVE); 
 22c:	bd70      	pop	{r4, r5, r6, pc}
 22e:	46c0      	nop			; (mov r8, r8)
 230:	20000004 	.word	0x20000004
 234:	000002dd 	.word	0x000002dd
 238:	40002800 	.word	0x40002800

0000023c <snowflake_init>:
/*!
* @brief @todo
* @return void
*/
void snowflake_init()
{    
 23c:	b510      	push	{r4, lr}
    snowflake_led_init();
 23e:	4b05      	ldr	r3, [pc, #20]	; (254 <snowflake_init+0x18>)
 240:	4798      	blx	r3
    snowflake_pb_init();
 242:	4b05      	ldr	r3, [pc, #20]	; (258 <snowflake_init+0x1c>)
 244:	4798      	blx	r3
    snowflake_flash_init();
 246:	4b05      	ldr	r3, [pc, #20]	; (25c <snowflake_init+0x20>)
 248:	4798      	blx	r3
    snowflake_usb_init();
 24a:	4b05      	ldr	r3, [pc, #20]	; (260 <snowflake_init+0x24>)
 24c:	4798      	blx	r3
    snowflake_amp_init();
 24e:	4b05      	ldr	r3, [pc, #20]	; (264 <snowflake_init+0x28>)
 250:	4798      	blx	r3
}
 252:	bd10      	pop	{r4, pc}
 254:	00000115 	.word	0x00000115
 258:	000001ad 	.word	0x000001ad
 25c:	000001c1 	.word	0x000001c1
 260:	000001f9 	.word	0x000001f9
 264:	0000020d 	.word	0x0000020d

00000268 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 268:	4b0c      	ldr	r3, [pc, #48]	; (29c <cpu_irq_enter_critical+0x34>)
 26a:	681b      	ldr	r3, [r3, #0]
 26c:	2b00      	cmp	r3, #0
 26e:	d110      	bne.n	292 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 270:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 274:	2b00      	cmp	r3, #0
 276:	d109      	bne.n	28c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 278:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 27a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 27e:	2200      	movs	r2, #0
 280:	4b07      	ldr	r3, [pc, #28]	; (2a0 <cpu_irq_enter_critical+0x38>)
 282:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 284:	3201      	adds	r2, #1
 286:	4b07      	ldr	r3, [pc, #28]	; (2a4 <cpu_irq_enter_critical+0x3c>)
 288:	701a      	strb	r2, [r3, #0]
 28a:	e002      	b.n	292 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 28c:	2200      	movs	r2, #0
 28e:	4b05      	ldr	r3, [pc, #20]	; (2a4 <cpu_irq_enter_critical+0x3c>)
 290:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 292:	4a02      	ldr	r2, [pc, #8]	; (29c <cpu_irq_enter_critical+0x34>)
 294:	6813      	ldr	r3, [r2, #0]
 296:	3301      	adds	r3, #1
 298:	6013      	str	r3, [r2, #0]
}
 29a:	4770      	bx	lr
 29c:	20000028 	.word	0x20000028
 2a0:	20000007 	.word	0x20000007
 2a4:	2000002c 	.word	0x2000002c

000002a8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 2a8:	4b08      	ldr	r3, [pc, #32]	; (2cc <cpu_irq_leave_critical+0x24>)
 2aa:	681a      	ldr	r2, [r3, #0]
 2ac:	3a01      	subs	r2, #1
 2ae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 2b0:	681b      	ldr	r3, [r3, #0]
 2b2:	2b00      	cmp	r3, #0
 2b4:	d109      	bne.n	2ca <cpu_irq_leave_critical+0x22>
 2b6:	4b06      	ldr	r3, [pc, #24]	; (2d0 <cpu_irq_leave_critical+0x28>)
 2b8:	781b      	ldrb	r3, [r3, #0]
 2ba:	2b00      	cmp	r3, #0
 2bc:	d005      	beq.n	2ca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 2be:	2201      	movs	r2, #1
 2c0:	4b04      	ldr	r3, [pc, #16]	; (2d4 <cpu_irq_leave_critical+0x2c>)
 2c2:	701a      	strb	r2, [r3, #0]
 2c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 2c8:	b662      	cpsie	i
	}
}
 2ca:	4770      	bx	lr
 2cc:	20000028 	.word	0x20000028
 2d0:	2000002c 	.word	0x2000002c
 2d4:	20000007 	.word	0x20000007

000002d8 <system_board_init>:
// 	port_pin_set_output_level(AT86RFX_RST_PIN, true);
// 	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
// 	pin_conf.direction  = PORT_PIN_DIR_INPUT;
// 	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
// #endif	
}
 2d8:	4770      	bx	lr
 2da:	46c0      	nop			; (mov r8, r8)

000002dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 2dc:	b500      	push	{lr}
 2de:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 2e0:	ab01      	add	r3, sp, #4
 2e2:	2280      	movs	r2, #128	; 0x80
 2e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 2e6:	780a      	ldrb	r2, [r1, #0]
 2e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 2ea:	784a      	ldrb	r2, [r1, #1]
 2ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 2ee:	788a      	ldrb	r2, [r1, #2]
 2f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 2f2:	0019      	movs	r1, r3
 2f4:	4b01      	ldr	r3, [pc, #4]	; (2fc <port_pin_set_config+0x20>)
 2f6:	4798      	blx	r3
}
 2f8:	b003      	add	sp, #12
 2fa:	bd00      	pop	{pc}
 2fc:	000009a1 	.word	0x000009a1

00000300 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 300:	b510      	push	{r4, lr}
	switch (clock_source) {
 302:	2808      	cmp	r0, #8
 304:	d803      	bhi.n	30e <system_clock_source_get_hz+0xe>
 306:	0080      	lsls	r0, r0, #2
 308:	4b1c      	ldr	r3, [pc, #112]	; (37c <system_clock_source_get_hz+0x7c>)
 30a:	581b      	ldr	r3, [r3, r0]
 30c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
 30e:	2000      	movs	r0, #0
 310:	e032      	b.n	378 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
 312:	4b1b      	ldr	r3, [pc, #108]	; (380 <system_clock_source_get_hz+0x80>)
 314:	6918      	ldr	r0, [r3, #16]
 316:	e02f      	b.n	378 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
 318:	4b1a      	ldr	r3, [pc, #104]	; (384 <system_clock_source_get_hz+0x84>)
 31a:	7d18      	ldrb	r0, [r3, #20]
 31c:	0700      	lsls	r0, r0, #28
 31e:	0f80      	lsrs	r0, r0, #30
 320:	3001      	adds	r0, #1
 322:	4b19      	ldr	r3, [pc, #100]	; (388 <system_clock_source_get_hz+0x88>)
 324:	4358      	muls	r0, r3
 326:	e027      	b.n	378 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
 328:	4b15      	ldr	r3, [pc, #84]	; (380 <system_clock_source_get_hz+0x80>)
 32a:	6958      	ldr	r0, [r3, #20]
 32c:	e024      	b.n	378 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
 32e:	4b14      	ldr	r3, [pc, #80]	; (380 <system_clock_source_get_hz+0x80>)
 330:	681b      	ldr	r3, [r3, #0]
 332:	2002      	movs	r0, #2
 334:	4018      	ands	r0, r3
 336:	d01f      	beq.n	378 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
 338:	4912      	ldr	r1, [pc, #72]	; (384 <system_clock_source_get_hz+0x84>)
 33a:	2280      	movs	r2, #128	; 0x80
 33c:	0052      	lsls	r2, r2, #1
 33e:	68cb      	ldr	r3, [r1, #12]
 340:	4213      	tst	r3, r2
 342:	d0fc      	beq.n	33e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
 344:	4b0e      	ldr	r3, [pc, #56]	; (380 <system_clock_source_get_hz+0x80>)
 346:	681b      	ldr	r3, [r3, #0]
 348:	075b      	lsls	r3, r3, #29
 34a:	d514      	bpl.n	376 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
 34c:	2000      	movs	r0, #0
 34e:	4b0f      	ldr	r3, [pc, #60]	; (38c <system_clock_source_get_hz+0x8c>)
 350:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 352:	4b0b      	ldr	r3, [pc, #44]	; (380 <system_clock_source_get_hz+0x80>)
 354:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
 356:	041b      	lsls	r3, r3, #16
 358:	0c1b      	lsrs	r3, r3, #16
 35a:	4358      	muls	r0, r3
 35c:	e00c      	b.n	378 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 35e:	2328      	movs	r3, #40	; 0x28
 360:	4a08      	ldr	r2, [pc, #32]	; (384 <system_clock_source_get_hz+0x84>)
 362:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
 364:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
 366:	079b      	lsls	r3, r3, #30
 368:	d506      	bpl.n	378 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
 36a:	4b05      	ldr	r3, [pc, #20]	; (380 <system_clock_source_get_hz+0x80>)
 36c:	68d8      	ldr	r0, [r3, #12]
 36e:	e003      	b.n	378 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
 370:	2080      	movs	r0, #128	; 0x80
 372:	0200      	lsls	r0, r0, #8
 374:	e000      	b.n	378 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
 376:	4806      	ldr	r0, [pc, #24]	; (390 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
 378:	bd10      	pop	{r4, pc}
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	00000c24 	.word	0x00000c24
 380:	20000030 	.word	0x20000030
 384:	40000c00 	.word	0x40000c00
 388:	003d0900 	.word	0x003d0900
 38c:	000008c9 	.word	0x000008c9
 390:	02dc6c00 	.word	0x02dc6c00

00000394 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
 394:	b5f0      	push	{r4, r5, r6, r7, lr}
 396:	4647      	mov	r7, r8
 398:	b480      	push	{r7}
 39a:	0001      	movs	r1, r0
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
 39c:	4b28      	ldr	r3, [pc, #160]	; (440 <system_clock_source_xosc_set_config+0xac>)
 39e:	8a1b      	ldrh	r3, [r3, #16]
 3a0:	469c      	mov	ip, r3
 3a2:	055a      	lsls	r2, r3, #21
 3a4:	0f52      	lsrs	r2, r2, #29

	temp.bit.STARTUP = config->startup_time;
 3a6:	7843      	ldrb	r3, [r0, #1]
 3a8:	240f      	movs	r4, #15
 3aa:	401c      	ands	r4, r3

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
 3ac:	7806      	ldrb	r6, [r0, #0]
 3ae:	4273      	negs	r3, r6
 3b0:	415e      	adcs	r6, r3
 3b2:	b2f6      	uxtb	r6, r6
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
 3b4:	7883      	ldrb	r3, [r0, #2]
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
 3b6:	0015      	movs	r5, r2
	}

	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
 3b8:	2b00      	cmp	r3, #0
 3ba:	d115      	bne.n	3e8 <system_clock_source_xosc_set_config+0x54>
		if (config->frequency <= 2000000) {
 3bc:	6840      	ldr	r0, [r0, #4]
			temp.bit.GAIN = 0;
 3be:	2500      	movs	r5, #0

	temp.bit.AMPGC = config->auto_gain_control;

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
 3c0:	4f20      	ldr	r7, [pc, #128]	; (444 <system_clock_source_xosc_set_config+0xb0>)
 3c2:	42b8      	cmp	r0, r7
 3c4:	d910      	bls.n	3e8 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
 3c6:	3501      	adds	r5, #1

	/* Set gain if automatic gain control is not selected */
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
 3c8:	4f1f      	ldr	r7, [pc, #124]	; (448 <system_clock_source_xosc_set_config+0xb4>)
 3ca:	42b8      	cmp	r0, r7
 3cc:	d90c      	bls.n	3e8 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
 3ce:	3501      	adds	r5, #1
	if (!config->auto_gain_control) {
		if (config->frequency <= 2000000) {
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
 3d0:	4f1e      	ldr	r7, [pc, #120]	; (44c <system_clock_source_xosc_set_config+0xb8>)
 3d2:	42b8      	cmp	r0, r7
 3d4:	d908      	bls.n	3e8 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
 3d6:	3501      	adds	r5, #1
			temp.bit.GAIN = 0;
		} else if (config->frequency <= 4000000) {
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
 3d8:	4f1d      	ldr	r7, [pc, #116]	; (450 <system_clock_source_xosc_set_config+0xbc>)
 3da:	42b8      	cmp	r0, r7
 3dc:	d904      	bls.n	3e8 <system_clock_source_xosc_set_config+0x54>
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
 3de:	0015      	movs	r5, r2
			temp.bit.GAIN = 1;
		} else if (config->frequency <= 8000000) {
			temp.bit.GAIN = 2;
		} else if (config->frequency <= 16000000) {
			temp.bit.GAIN = 3;
		} else if (config->frequency <= 32000000) {
 3e0:	4a1c      	ldr	r2, [pc, #112]	; (454 <system_clock_source_xosc_set_config+0xc0>)
 3e2:	4290      	cmp	r0, r2
 3e4:	d800      	bhi.n	3e8 <system_clock_source_xosc_set_config+0x54>
			temp.bit.GAIN = 4;
 3e6:	2504      	movs	r5, #4
		}

	}

	temp.bit.ONDEMAND = config->on_demand;
 3e8:	7a4f      	ldrb	r7, [r1, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
 3ea:	7a0a      	ldrb	r2, [r1, #8]
 3ec:	4690      	mov	r8, r2

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
 3ee:	6849      	ldr	r1, [r1, #4]
 3f0:	4a19      	ldr	r2, [pc, #100]	; (458 <system_clock_source_xosc_set_config+0xc4>)
 3f2:	6111      	str	r1, [r2, #16]

	OSCCTRL->XOSCCTRL = temp;
 3f4:	2201      	movs	r2, #1
 3f6:	00b6      	lsls	r6, r6, #2
 3f8:	2104      	movs	r1, #4
 3fa:	4660      	mov	r0, ip
 3fc:	4388      	bics	r0, r1
 3fe:	0001      	movs	r1, r0
 400:	4331      	orrs	r1, r6
 402:	4640      	mov	r0, r8
 404:	4010      	ands	r0, r2
 406:	0180      	lsls	r0, r0, #6
 408:	2640      	movs	r6, #64	; 0x40
 40a:	43b1      	bics	r1, r6
 40c:	4301      	orrs	r1, r0
 40e:	0038      	movs	r0, r7
 410:	4010      	ands	r0, r2
 412:	01c0      	lsls	r0, r0, #7
 414:	3640      	adds	r6, #64	; 0x40
 416:	43b1      	bics	r1, r6
 418:	4301      	orrs	r1, r0
 41a:	022d      	lsls	r5, r5, #8
 41c:	480f      	ldr	r0, [pc, #60]	; (45c <system_clock_source_xosc_set_config+0xc8>)
 41e:	4001      	ands	r1, r0
 420:	4329      	orrs	r1, r5
 422:	4013      	ands	r3, r2
 424:	02da      	lsls	r2, r3, #11
 426:	4b0e      	ldr	r3, [pc, #56]	; (460 <system_clock_source_xosc_set_config+0xcc>)
 428:	400b      	ands	r3, r1
 42a:	4313      	orrs	r3, r2
 42c:	0324      	lsls	r4, r4, #12
 42e:	051b      	lsls	r3, r3, #20
 430:	0d1b      	lsrs	r3, r3, #20
 432:	4323      	orrs	r3, r4
 434:	4a02      	ldr	r2, [pc, #8]	; (440 <system_clock_source_xosc_set_config+0xac>)
 436:	8213      	strh	r3, [r2, #16]
}
 438:	bc04      	pop	{r2}
 43a:	4690      	mov	r8, r2
 43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 43e:	46c0      	nop			; (mov r8, r8)
 440:	40000c00 	.word	0x40000c00
 444:	001e8480 	.word	0x001e8480
 448:	003d0900 	.word	0x003d0900
 44c:	007a1200 	.word	0x007a1200
 450:	00f42400 	.word	0x00f42400
 454:	01e84800 	.word	0x01e84800
 458:	20000030 	.word	0x20000030
 45c:	fffff8ff 	.word	0xfffff8ff
 460:	fffff7ff 	.word	0xfffff7ff

00000464 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
 464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 466:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
 468:	68c6      	ldr	r6, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
 46a:	7d03      	ldrb	r3, [r0, #20]
 46c:	2b01      	cmp	r3, #1
 46e:	d106      	bne.n	47e <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
 470:	8a01      	ldrh	r1, [r0, #16]
 472:	3101      	adds	r1, #1
 474:	0049      	lsls	r1, r1, #1
 476:	0030      	movs	r0, r6
 478:	4b29      	ldr	r3, [pc, #164]	; (520 <system_clock_source_dpll_set_config+0xbc>)
 47a:	4798      	blx	r3
 47c:	0006      	movs	r6, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
 47e:	68a3      	ldr	r3, [r4, #8]
 480:	0118      	lsls	r0, r3, #4
 482:	0031      	movs	r1, r6
 484:	4b26      	ldr	r3, [pc, #152]	; (520 <system_clock_source_dpll_set_config+0xbc>)
 486:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
 488:	270f      	movs	r7, #15
 48a:	4007      	ands	r7, r0
	tmpldr = (tmpldr >> 4) - 1;
 48c:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
 48e:	7823      	ldrb	r3, [r4, #0]
 490:	01da      	lsls	r2, r3, #7
 492:	7863      	ldrb	r3, [r4, #1]
 494:	019b      	lsls	r3, r3, #6
 496:	4313      	orrs	r3, r2
 498:	b2db      	uxtb	r3, r3
 49a:	4a22      	ldr	r2, [pc, #136]	; (524 <system_clock_source_dpll_set_config+0xc0>)
 49c:	2128      	movs	r1, #40	; 0x28
 49e:	5453      	strb	r3, [r2, r1]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
 4a0:	0439      	lsls	r1, r7, #16
 4a2:	1e43      	subs	r3, r0, #1
 4a4:	051b      	lsls	r3, r3, #20
 4a6:	0d1b      	lsrs	r3, r3, #20
 4a8:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
 4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
 4ac:	0015      	movs	r5, r2
 4ae:	2138      	movs	r1, #56	; 0x38
 4b0:	2204      	movs	r2, #4
 4b2:	5c6b      	ldrb	r3, [r5, r1]
 4b4:	4213      	tst	r3, r2
 4b6:	d1fc      	bne.n	4b2 <system_clock_source_dpll_set_config+0x4e>
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
 4b8:	78a1      	ldrb	r1, [r4, #2]
 4ba:	0309      	lsls	r1, r1, #12
 4bc:	78e3      	ldrb	r3, [r4, #3]
 4be:	00db      	lsls	r3, r3, #3
 4c0:	4319      	orrs	r1, r3
 4c2:	7923      	ldrb	r3, [r4, #4]
 4c4:	009b      	lsls	r3, r3, #2
 4c6:	4319      	orrs	r1, r3
 4c8:	7ca3      	ldrb	r3, [r4, #18]
 4ca:	2203      	movs	r2, #3
 4cc:	4694      	mov	ip, r2
 4ce:	4013      	ands	r3, r2
 4d0:	4319      	orrs	r1, r3
 4d2:	8a25      	ldrh	r5, [r4, #16]
 4d4:	042d      	lsls	r5, r5, #16
 4d6:	4a14      	ldr	r2, [pc, #80]	; (528 <system_clock_source_dpll_set_config+0xc4>)
 4d8:	002b      	movs	r3, r5
 4da:	4013      	ands	r3, r2
 4dc:	4319      	orrs	r1, r3
 4de:	7ce3      	ldrb	r3, [r4, #19]
 4e0:	021b      	lsls	r3, r3, #8
 4e2:	22e0      	movs	r2, #224	; 0xe0
 4e4:	00d2      	lsls	r2, r2, #3
 4e6:	4013      	ands	r3, r2
 4e8:	4319      	orrs	r1, r3
 4ea:	7d22      	ldrb	r2, [r4, #20]
 4ec:	0112      	lsls	r2, r2, #4
 4ee:	2330      	movs	r3, #48	; 0x30
 4f0:	4013      	ands	r3, r2
 4f2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
 4f4:	4a0b      	ldr	r2, [pc, #44]	; (524 <system_clock_source_dpll_set_config+0xc0>)
 4f6:	6313      	str	r3, [r2, #48]	; 0x30
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
 4f8:	7d63      	ldrb	r3, [r4, #21]
 4fa:	4661      	mov	r1, ip
 4fc:	400b      	ands	r3, r1
 4fe:	3131      	adds	r1, #49	; 0x31
 500:	5453      	strb	r3, [r2, r1]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
 502:	0015      	movs	r5, r2
 504:	3104      	adds	r1, #4
 506:	2208      	movs	r2, #8
 508:	5c6b      	ldrb	r3, [r5, r1]
 50a:	4213      	tst	r3, r2
 50c:	d1fc      	bne.n	508 <system_clock_source_dpll_set_config+0xa4>
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
 50e:	0100      	lsls	r0, r0, #4
 510:	19c7      	adds	r7, r0, r7
 512:	437e      	muls	r6, r7
 514:	7d63      	ldrb	r3, [r4, #21]
 516:	3304      	adds	r3, #4
 518:	40de      	lsrs	r6, r3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
 51a:	4b04      	ldr	r3, [pc, #16]	; (52c <system_clock_source_dpll_set_config+0xc8>)
 51c:	60de      	str	r6, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> (4 + config->prescaler);
}
 51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 520:	00000ac1 	.word	0x00000ac1
 524:	40000c00 	.word	0x40000c00
 528:	07ff0000 	.word	0x07ff0000
 52c:	20000030 	.word	0x20000030

00000530 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 530:	2808      	cmp	r0, #8
 532:	d803      	bhi.n	53c <system_clock_source_enable+0xc>
 534:	0080      	lsls	r0, r0, #2
 536:	4b29      	ldr	r3, [pc, #164]	; (5dc <system_clock_source_enable+0xac>)
 538:	581b      	ldr	r3, [r3, r0]
 53a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 53c:	2017      	movs	r0, #23
 53e:	e04b      	b.n	5d8 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
 540:	4a27      	ldr	r2, [pc, #156]	; (5e0 <system_clock_source_enable+0xb0>)
 542:	7d11      	ldrb	r1, [r2, #20]
 544:	2302      	movs	r3, #2
 546:	430b      	orrs	r3, r1
 548:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
 54a:	2000      	movs	r0, #0
 54c:	e044      	b.n	5d8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
 54e:	4a25      	ldr	r2, [pc, #148]	; (5e4 <system_clock_source_enable+0xb4>)
 550:	6991      	ldr	r1, [r2, #24]
 552:	2302      	movs	r3, #2
 554:	430b      	orrs	r3, r1
 556:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 558:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
 55a:	e03d      	b.n	5d8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
 55c:	4a20      	ldr	r2, [pc, #128]	; (5e0 <system_clock_source_enable+0xb0>)
 55e:	8a11      	ldrh	r1, [r2, #16]
 560:	2302      	movs	r3, #2
 562:	430b      	orrs	r3, r1
 564:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 566:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
 568:	e036      	b.n	5d8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
 56a:	4a1e      	ldr	r2, [pc, #120]	; (5e4 <system_clock_source_enable+0xb4>)
 56c:	6951      	ldr	r1, [r2, #20]
 56e:	2302      	movs	r3, #2
 570:	430b      	orrs	r3, r1
 572:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 574:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
 576:	e02f      	b.n	5d8 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
 578:	491b      	ldr	r1, [pc, #108]	; (5e8 <system_clock_source_enable+0xb8>)
 57a:	680b      	ldr	r3, [r1, #0]
 57c:	2202      	movs	r2, #2
 57e:	4313      	orrs	r3, r2
 580:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
 582:	4b17      	ldr	r3, [pc, #92]	; (5e0 <system_clock_source_enable+0xb0>)
 584:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
 586:	0019      	movs	r1, r3
 588:	32fe      	adds	r2, #254	; 0xfe
 58a:	68cb      	ldr	r3, [r1, #12]
 58c:	4213      	tst	r3, r2
 58e:	d0fc      	beq.n	58a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 590:	4a15      	ldr	r2, [pc, #84]	; (5e8 <system_clock_source_enable+0xb8>)
 592:	6891      	ldr	r1, [r2, #8]
 594:	4b12      	ldr	r3, [pc, #72]	; (5e0 <system_clock_source_enable+0xb0>)
 596:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 598:	6852      	ldr	r2, [r2, #4]
 59a:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
 59c:	2200      	movs	r2, #0
 59e:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
 5a0:	0019      	movs	r1, r3
 5a2:	3201      	adds	r2, #1
 5a4:	32ff      	adds	r2, #255	; 0xff
 5a6:	68cb      	ldr	r3, [r1, #12]
 5a8:	4213      	tst	r3, r2
 5aa:	d0fc      	beq.n	5a6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <system_clock_source_enable+0xb8>)
 5ae:	681b      	ldr	r3, [r3, #0]
 5b0:	b29b      	uxth	r3, r3
 5b2:	4a0b      	ldr	r2, [pc, #44]	; (5e0 <system_clock_source_enable+0xb0>)
 5b4:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 5b6:	2000      	movs	r0, #0
 5b8:	e00e      	b.n	5d8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
 5ba:	4909      	ldr	r1, [pc, #36]	; (5e0 <system_clock_source_enable+0xb0>)
 5bc:	2228      	movs	r2, #40	; 0x28
 5be:	5c88      	ldrb	r0, [r1, r2]
 5c0:	2302      	movs	r3, #2
 5c2:	4303      	orrs	r3, r0
 5c4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
 5c6:	0008      	movs	r0, r1
 5c8:	2138      	movs	r1, #56	; 0x38
 5ca:	3a26      	subs	r2, #38	; 0x26
 5cc:	5c43      	ldrb	r3, [r0, r1]
 5ce:	4213      	tst	r3, r2
 5d0:	d1fc      	bne.n	5cc <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 5d2:	2000      	movs	r0, #0
 5d4:	e000      	b.n	5d8 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 5d6:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
 5d8:	4770      	bx	lr
 5da:	46c0      	nop			; (mov r8, r8)
 5dc:	00000c48 	.word	0x00000c48
 5e0:	40000c00 	.word	0x40000c00
 5e4:	40001000 	.word	0x40001000
 5e8:	20000030 	.word	0x20000030

000005ec <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 5ee:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
 5f0:	2280      	movs	r2, #128	; 0x80
 5f2:	0052      	lsls	r2, r2, #1
 5f4:	4b47      	ldr	r3, [pc, #284]	; (714 <system_clock_init+0x128>)
 5f6:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
 5f8:	3afd      	subs	r2, #253	; 0xfd
 5fa:	4b47      	ldr	r3, [pc, #284]	; (718 <system_clock_init+0x12c>)
 5fc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 5fe:	4a47      	ldr	r2, [pc, #284]	; (71c <system_clock_init+0x130>)
 600:	6853      	ldr	r3, [r2, #4]
 602:	211e      	movs	r1, #30
 604:	438b      	bics	r3, r1
 606:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
 608:	2380      	movs	r3, #128	; 0x80
 60a:	05db      	lsls	r3, r3, #23
 60c:	789b      	ldrb	r3, [r3, #2]
 60e:	2b02      	cmp	r3, #2
 610:	d00f      	beq.n	632 <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
 612:	2380      	movs	r3, #128	; 0x80
 614:	05db      	lsls	r3, r3, #23
 616:	789b      	ldrb	r3, [r3, #2]
 618:	b25b      	sxtb	r3, r3
 61a:	2b00      	cmp	r3, #0
 61c:	db09      	blt.n	632 <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
 61e:	2380      	movs	r3, #128	; 0x80
 620:	05db      	lsls	r3, r3, #23
 622:	2201      	movs	r2, #1
 624:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
 626:	3201      	adds	r2, #1
 628:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
 62a:	001a      	movs	r2, r3
 62c:	7993      	ldrb	r3, [r2, #6]
 62e:	2b00      	cmp	r3, #0
 630:	d0fc      	beq.n	62c <system_clock_init+0x40>
static inline void system_clock_source_xosc_get_config_defaults(
		struct system_clock_source_xosc_config *const config)
{
	Assert(config);

	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
 632:	a809      	add	r0, sp, #36	; 0x24
 634:	2400      	movs	r4, #0
 636:	7004      	strb	r4, [r0, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
	config->auto_gain_control = true;
 638:	2501      	movs	r5, #1
 63a:	7085      	strb	r5, [r0, #2]
	config->frequency         = 12000000UL;
 63c:	4e38      	ldr	r6, [pc, #224]	; (720 <system_clock_init+0x134>)
 63e:	6046      	str	r6, [r0, #4]
	config->run_in_standby    = false;
 640:	7204      	strb	r4, [r0, #8]
	config->on_demand         = true;
 642:	7245      	strb	r5, [r0, #9]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
 644:	230f      	movs	r3, #15
 646:	7043      	strb	r3, [r0, #1]
	xosc_conf.auto_gain_control = CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL;
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
	xosc_conf.on_demand         = CONF_CLOCK_XOSC_ON_DEMAND;
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;

	system_clock_source_xosc_set_config(&xosc_conf);
 648:	4b36      	ldr	r3, [pc, #216]	; (724 <system_clock_init+0x138>)
 64a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
 64c:	2000      	movs	r0, #0
 64e:	4f36      	ldr	r7, [pc, #216]	; (728 <system_clock_init+0x13c>)
 650:	47b8      	blx	r7
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
 652:	4b30      	ldr	r3, [pc, #192]	; (714 <system_clock_init+0x128>)
 654:	7d1a      	ldrb	r2, [r3, #20]
 656:	2180      	movs	r1, #128	; 0x80
 658:	4249      	negs	r1, r1
 65a:	430a      	orrs	r2, r1
 65c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
 65e:	7d1a      	ldrb	r2, [r3, #20]
 660:	31c0      	adds	r1, #192	; 0xc0
 662:	438a      	bics	r2, r1
 664:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 666:	4b31      	ldr	r3, [pc, #196]	; (72c <system_clock_init+0x140>)
 668:	4798      	blx	r3
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
	config->lock_bypass         = false;
 66a:	a803      	add	r0, sp, #12
 66c:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
 66e:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
 670:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
 672:	4b2f      	ldr	r3, [pc, #188]	; (730 <system_clock_init+0x144>)
 674:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
 676:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
 678:	7544      	strb	r4, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
 67a:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
 67c:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
 67e:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
 680:	2301      	movs	r3, #1
 682:	7043      	strb	r3, [r0, #1]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
 684:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
 686:	60c6      	str	r6, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
 688:	4b2a      	ldr	r3, [pc, #168]	; (734 <system_clock_init+0x148>)
 68a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
 68c:	2008      	movs	r0, #8
 68e:	47b8      	blx	r7
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
 690:	4820      	ldr	r0, [pc, #128]	; (714 <system_clock_init+0x128>)
 692:	213c      	movs	r1, #60	; 0x3c
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
 694:	2203      	movs	r2, #3
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
 696:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
 698:	4013      	ands	r3, r2
 69a:	2b03      	cmp	r3, #3
 69c:	d1fb      	bne.n	696 <system_clock_init+0xaa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
 69e:	491d      	ldr	r1, [pc, #116]	; (714 <system_clock_init+0x128>)
 6a0:	2228      	movs	r2, #40	; 0x28
 6a2:	5c8b      	ldrb	r3, [r1, r2]
 6a4:	2080      	movs	r0, #128	; 0x80
 6a6:	4240      	negs	r0, r0
 6a8:	4303      	orrs	r3, r0
 6aa:	548b      	strb	r3, [r1, r2]
 * \param[in] divider  CPU clock divider
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
 6ac:	4c22      	ldr	r4, [pc, #136]	; (738 <system_clock_init+0x14c>)
 6ae:	2301      	movs	r3, #1
 6b0:	71a3      	strb	r3, [r4, #6]
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
 6b2:	7163      	strb	r3, [r4, #5]
 * \param[in] divider  CPU clock divider
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
 6b4:	7123      	strb	r3, [r4, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 6b6:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
 6b8:	2300      	movs	r3, #0
 6ba:	466a      	mov	r2, sp
 6bc:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 6be:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
 6c0:	7253      	strb	r3, [r2, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 6c2:	7013      	strb	r3, [r2, #0]
 6c4:	4669      	mov	r1, sp
 6c6:	2000      	movs	r0, #0
 6c8:	4b1c      	ldr	r3, [pc, #112]	; (73c <system_clock_init+0x150>)
 6ca:	4798      	blx	r3
 6cc:	2000      	movs	r0, #0
 6ce:	4b1c      	ldr	r3, [pc, #112]	; (740 <system_clock_init+0x154>)
 6d0:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
 6d2:	2000      	movs	r0, #0
 6d4:	4b1b      	ldr	r3, [pc, #108]	; (744 <system_clock_init+0x158>)
 6d6:	4798      	blx	r3
 6d8:	7921      	ldrb	r1, [r4, #4]
 6da:	b2c9      	uxtb	r1, r1
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
 6dc:	4b1a      	ldr	r3, [pc, #104]	; (748 <system_clock_init+0x15c>)
 6de:	4798      	blx	r3
 6e0:	4b0f      	ldr	r3, [pc, #60]	; (720 <system_clock_init+0x134>)
 6e2:	4298      	cmp	r0, r3
 6e4:	d814      	bhi.n	710 <system_clock_init+0x124>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
 6e6:	2380      	movs	r3, #128	; 0x80
 6e8:	05db      	lsls	r3, r3, #23
 6ea:	789b      	ldrb	r3, [r3, #2]
 6ec:	2b00      	cmp	r3, #0
 6ee:	d00f      	beq.n	710 <system_clock_init+0x124>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
 6f0:	2380      	movs	r3, #128	; 0x80
 6f2:	05db      	lsls	r3, r3, #23
 6f4:	789b      	ldrb	r3, [r3, #2]
 6f6:	b25b      	sxtb	r3, r3
 6f8:	2b00      	cmp	r3, #0
 6fa:	db09      	blt.n	710 <system_clock_init+0x124>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
 6fc:	2380      	movs	r3, #128	; 0x80
 6fe:	05db      	lsls	r3, r3, #23
 700:	2201      	movs	r2, #1
 702:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
 704:	2200      	movs	r2, #0
 706:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
 708:	001a      	movs	r2, r3
 70a:	7993      	ldrb	r3, [r2, #6]
 70c:	2b00      	cmp	r3, #0
 70e:	d0fc      	beq.n	70a <system_clock_init+0x11e>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
 710:	b00d      	add	sp, #52	; 0x34
 712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 714:	40000c00 	.word	0x40000c00
 718:	40001400 	.word	0x40001400
 71c:	41004000 	.word	0x41004000
 720:	00b71b00 	.word	0x00b71b00
 724:	00000395 	.word	0x00000395
 728:	00000531 	.word	0x00000531
 72c:	0000074d 	.word	0x0000074d
 730:	02dc6c00 	.word	0x02dc6c00
 734:	00000465 	.word	0x00000465
 738:	40000400 	.word	0x40000400
 73c:	00000771 	.word	0x00000771
 740:	0000081d 	.word	0x0000081d
 744:	0000085d 	.word	0x0000085d
 748:	00000ac1 	.word	0x00000ac1

0000074c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
 74c:	4a06      	ldr	r2, [pc, #24]	; (768 <system_gclk_init+0x1c>)
 74e:	6951      	ldr	r1, [r2, #20]
 750:	2340      	movs	r3, #64	; 0x40
 752:	430b      	orrs	r3, r1
 754:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
 756:	2201      	movs	r2, #1
 758:	4b04      	ldr	r3, [pc, #16]	; (76c <system_gclk_init+0x20>)
 75a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
 75c:	0019      	movs	r1, r3
 75e:	780b      	ldrb	r3, [r1, #0]
 760:	4213      	tst	r3, r2
 762:	d1fc      	bne.n	75e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 764:	4770      	bx	lr
 766:	46c0      	nop			; (mov r8, r8)
 768:	40000400 	.word	0x40000400
 76c:	40001800 	.word	0x40001800

00000770 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 770:	b570      	push	{r4, r5, r6, lr}
 772:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
 774:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 776:	784b      	ldrb	r3, [r1, #1]
 778:	2b00      	cmp	r3, #0
 77a:	d002      	beq.n	782 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 77c:	2380      	movs	r3, #128	; 0x80
 77e:	00db      	lsls	r3, r3, #3
 780:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 782:	7a4b      	ldrb	r3, [r1, #9]
 784:	2b00      	cmp	r3, #0
 786:	d002      	beq.n	78e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 788:	2380      	movs	r3, #128	; 0x80
 78a:	011b      	lsls	r3, r3, #4
 78c:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 78e:	684a      	ldr	r2, [r1, #4]
 790:	2a01      	cmp	r2, #1
 792:	d917      	bls.n	7c4 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 794:	1e53      	subs	r3, r2, #1
 796:	421a      	tst	r2, r3
 798:	d10f      	bne.n	7ba <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 79a:	2a02      	cmp	r2, #2
 79c:	d906      	bls.n	7ac <system_gclk_gen_set_config+0x3c>
 79e:	2302      	movs	r3, #2
 7a0:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
 7a2:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 7a4:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 7a6:	429a      	cmp	r2, r3
 7a8:	d8fb      	bhi.n	7a2 <system_gclk_gen_set_config+0x32>
 7aa:	e000      	b.n	7ae <system_gclk_gen_set_config+0x3e>
 7ac:	2000      	movs	r0, #0
 7ae:	2380      	movs	r3, #128	; 0x80
 7b0:	015b      	lsls	r3, r3, #5
 7b2:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 7b4:	0400      	lsls	r0, r0, #16
 7b6:	4304      	orrs	r4, r0
 7b8:	e004      	b.n	7c4 <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 7ba:	0412      	lsls	r2, r2, #16
 7bc:	2380      	movs	r3, #128	; 0x80
 7be:	009b      	lsls	r3, r3, #2
 7c0:	431a      	orrs	r2, r3
 7c2:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 7c4:	7a0b      	ldrb	r3, [r1, #8]
 7c6:	2b00      	cmp	r3, #0
 7c8:	d002      	beq.n	7d0 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 7ca:	2380      	movs	r3, #128	; 0x80
 7cc:	019b      	lsls	r3, r3, #6
 7ce:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 7d0:	2604      	movs	r6, #4
 7d2:	40ae      	lsls	r6, r5
 7d4:	490d      	ldr	r1, [pc, #52]	; (80c <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 7d6:	4a0e      	ldr	r2, [pc, #56]	; (810 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 7d8:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
 7da:	4013      	ands	r3, r2
 7dc:	421e      	tst	r6, r3
 7de:	d1fb      	bne.n	7d8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 7e0:	4b0c      	ldr	r3, [pc, #48]	; (814 <system_gclk_gen_set_config+0xa4>)
 7e2:	4798      	blx	r3
 7e4:	00ad      	lsls	r5, r5, #2
 7e6:	4b09      	ldr	r3, [pc, #36]	; (80c <system_gclk_gen_set_config+0x9c>)
 7e8:	469c      	mov	ip, r3
 7ea:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
 7ec:	6a28      	ldr	r0, [r5, #32]
 7ee:	2380      	movs	r3, #128	; 0x80
 7f0:	005b      	lsls	r3, r3, #1
 7f2:	4018      	ands	r0, r3
 7f4:	4320      	orrs	r0, r4
 7f6:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 7f8:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 7fa:	4a05      	ldr	r2, [pc, #20]	; (810 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 7fc:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
 7fe:	4013      	ands	r3, r2
 800:	421e      	tst	r6, r3
 802:	d1fb      	bne.n	7fc <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 804:	4b04      	ldr	r3, [pc, #16]	; (818 <system_gclk_gen_set_config+0xa8>)
 806:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
 808:	bd70      	pop	{r4, r5, r6, pc}
 80a:	46c0      	nop			; (mov r8, r8)
 80c:	40001800 	.word	0x40001800
 810:	000007fc 	.word	0x000007fc
 814:	00000269 	.word	0x00000269
 818:	000002a9 	.word	0x000002a9

0000081c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 81c:	b510      	push	{r4, lr}
 81e:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 820:	2204      	movs	r2, #4
 822:	4082      	lsls	r2, r0
 824:	4809      	ldr	r0, [pc, #36]	; (84c <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 826:	490a      	ldr	r1, [pc, #40]	; (850 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 828:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 82a:	400b      	ands	r3, r1
 82c:	421a      	tst	r2, r3
 82e:	d1fb      	bne.n	828 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 830:	4b08      	ldr	r3, [pc, #32]	; (854 <system_gclk_gen_enable+0x38>)
 832:	4798      	blx	r3
 834:	00a4      	lsls	r4, r4, #2
 836:	4b05      	ldr	r3, [pc, #20]	; (84c <system_gclk_gen_enable+0x30>)
 838:	469c      	mov	ip, r3
 83a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
 83c:	6a23      	ldr	r3, [r4, #32]
 83e:	2280      	movs	r2, #128	; 0x80
 840:	0052      	lsls	r2, r2, #1
 842:	4313      	orrs	r3, r2
 844:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 846:	4b04      	ldr	r3, [pc, #16]	; (858 <system_gclk_gen_enable+0x3c>)
 848:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 84a:	bd10      	pop	{r4, pc}
 84c:	40001800 	.word	0x40001800
 850:	000007fc 	.word	0x000007fc
 854:	00000269 	.word	0x00000269
 858:	000002a9 	.word	0x000002a9

0000085c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 85e:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 860:	2204      	movs	r2, #4
 862:	4082      	lsls	r2, r0
 864:	4812      	ldr	r0, [pc, #72]	; (8b0 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 866:	4913      	ldr	r1, [pc, #76]	; (8b4 <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
 868:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
 86a:	400b      	ands	r3, r1
 86c:	421a      	tst	r2, r3
 86e:	d1fb      	bne.n	868 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 870:	4b11      	ldr	r3, [pc, #68]	; (8b8 <system_gclk_gen_get_hz+0x5c>)
 872:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
 874:	4f0e      	ldr	r7, [pc, #56]	; (8b0 <system_gclk_gen_get_hz+0x54>)
 876:	3408      	adds	r4, #8
 878:	00a4      	lsls	r4, r4, #2
 87a:	59e0      	ldr	r0, [r4, r7]
 87c:	0700      	lsls	r0, r0, #28
 87e:	0f00      	lsrs	r0, r0, #28
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
 880:	4b0e      	ldr	r3, [pc, #56]	; (8bc <system_gclk_gen_get_hz+0x60>)
 882:	4798      	blx	r3
 884:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
 886:	59e5      	ldr	r5, [r4, r7]
 888:	04ed      	lsls	r5, r5, #19
 88a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
 88c:	59e4      	ldr	r4, [r4, r7]
 88e:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 890:	4b0b      	ldr	r3, [pc, #44]	; (8c0 <system_gclk_gen_get_hz+0x64>)
 892:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 894:	2d00      	cmp	r5, #0
 896:	d107      	bne.n	8a8 <system_gclk_gen_get_hz+0x4c>
 898:	2c01      	cmp	r4, #1
 89a:	d907      	bls.n	8ac <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
 89c:	0021      	movs	r1, r4
 89e:	0030      	movs	r0, r6
 8a0:	4b08      	ldr	r3, [pc, #32]	; (8c4 <system_gclk_gen_get_hz+0x68>)
 8a2:	4798      	blx	r3
 8a4:	0006      	movs	r6, r0
 8a6:	e001      	b.n	8ac <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 8a8:	3401      	adds	r4, #1
 8aa:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
 8ac:	0030      	movs	r0, r6
 8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8b0:	40001800 	.word	0x40001800
 8b4:	000007fc 	.word	0x000007fc
 8b8:	00000269 	.word	0x00000269
 8bc:	00000301 	.word	0x00000301
 8c0:	000002a9 	.word	0x000002a9
 8c4:	00000ac1 	.word	0x00000ac1

000008c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 8c8:	b510      	push	{r4, lr}
 8ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 8cc:	4b06      	ldr	r3, [pc, #24]	; (8e8 <system_gclk_chan_get_hz+0x20>)
 8ce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
 8d0:	3420      	adds	r4, #32
 8d2:	00a4      	lsls	r4, r4, #2
 8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <system_gclk_chan_get_hz+0x24>)
 8d6:	58e4      	ldr	r4, [r4, r3]
 8d8:	0724      	lsls	r4, r4, #28
 8da:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 8dc:	4b04      	ldr	r3, [pc, #16]	; (8f0 <system_gclk_chan_get_hz+0x28>)
 8de:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 8e0:	0020      	movs	r0, r4
 8e2:	4b04      	ldr	r3, [pc, #16]	; (8f4 <system_gclk_chan_get_hz+0x2c>)
 8e4:	4798      	blx	r3
}
 8e6:	bd10      	pop	{r4, pc}
 8e8:	00000269 	.word	0x00000269
 8ec:	40001800 	.word	0x40001800
 8f0:	000002a9 	.word	0x000002a9
 8f4:	0000085d 	.word	0x0000085d

000008f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 8f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 8fa:	78d3      	ldrb	r3, [r2, #3]
 8fc:	2b00      	cmp	r3, #0
 8fe:	d11e      	bne.n	93e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 900:	7813      	ldrb	r3, [r2, #0]
 902:	2b80      	cmp	r3, #128	; 0x80
 904:	d004      	beq.n	910 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 906:	061b      	lsls	r3, r3, #24
 908:	2480      	movs	r4, #128	; 0x80
 90a:	0264      	lsls	r4, r4, #9
 90c:	4323      	orrs	r3, r4
 90e:	e000      	b.n	912 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 910:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 912:	7854      	ldrb	r4, [r2, #1]
 914:	2502      	movs	r5, #2
 916:	43ac      	bics	r4, r5
 918:	d10a      	bne.n	930 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 91a:	7894      	ldrb	r4, [r2, #2]
 91c:	2c00      	cmp	r4, #0
 91e:	d103      	bne.n	928 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 920:	2480      	movs	r4, #128	; 0x80
 922:	02a4      	lsls	r4, r4, #10
 924:	4323      	orrs	r3, r4
 926:	e002      	b.n	92e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 928:	24c0      	movs	r4, #192	; 0xc0
 92a:	02e4      	lsls	r4, r4, #11
 92c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 92e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 930:	7854      	ldrb	r4, [r2, #1]
 932:	3c01      	subs	r4, #1
 934:	2c01      	cmp	r4, #1
 936:	d812      	bhi.n	95e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 938:	4c18      	ldr	r4, [pc, #96]	; (99c <_system_pinmux_config+0xa4>)
 93a:	4023      	ands	r3, r4
 93c:	e00f      	b.n	95e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 93e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 940:	040b      	lsls	r3, r1, #16
 942:	0c1b      	lsrs	r3, r3, #16
 944:	24a0      	movs	r4, #160	; 0xa0
 946:	05e4      	lsls	r4, r4, #23
 948:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 94a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 94c:	0c0b      	lsrs	r3, r1, #16
 94e:	24d0      	movs	r4, #208	; 0xd0
 950:	0624      	lsls	r4, r4, #24
 952:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 954:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 956:	78d3      	ldrb	r3, [r2, #3]
 958:	2b00      	cmp	r3, #0
 95a:	d018      	beq.n	98e <_system_pinmux_config+0x96>
 95c:	e01c      	b.n	998 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 95e:	040c      	lsls	r4, r1, #16
 960:	0c24      	lsrs	r4, r4, #16
 962:	25a0      	movs	r5, #160	; 0xa0
 964:	05ed      	lsls	r5, r5, #23
 966:	432c      	orrs	r4, r5
 968:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 96a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 96c:	0c0c      	lsrs	r4, r1, #16
 96e:	25d0      	movs	r5, #208	; 0xd0
 970:	062d      	lsls	r5, r5, #24
 972:	432c      	orrs	r4, r5
 974:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 976:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 978:	78d4      	ldrb	r4, [r2, #3]
 97a:	2c00      	cmp	r4, #0
 97c:	d10c      	bne.n	998 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 97e:	035b      	lsls	r3, r3, #13
 980:	d505      	bpl.n	98e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 982:	7893      	ldrb	r3, [r2, #2]
 984:	2b01      	cmp	r3, #1
 986:	d101      	bne.n	98c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 988:	6181      	str	r1, [r0, #24]
 98a:	e000      	b.n	98e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 98c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 98e:	7853      	ldrb	r3, [r2, #1]
 990:	3b01      	subs	r3, #1
 992:	2b01      	cmp	r3, #1
 994:	d800      	bhi.n	998 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 996:	6081      	str	r1, [r0, #8]
		}
	}
}
 998:	bd30      	pop	{r4, r5, pc}
 99a:	46c0      	nop			; (mov r8, r8)
 99c:	fffbffff 	.word	0xfffbffff

000009a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 9a0:	b510      	push	{r4, lr}
 9a2:	0003      	movs	r3, r0
 9a4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 9a6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 9a8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 9aa:	2900      	cmp	r1, #0
 9ac:	d104      	bne.n	9b8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 9ae:	0958      	lsrs	r0, r3, #5
 9b0:	01c0      	lsls	r0, r0, #7
 9b2:	4905      	ldr	r1, [pc, #20]	; (9c8 <system_pinmux_pin_set_config+0x28>)
 9b4:	468c      	mov	ip, r1
 9b6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 9b8:	211f      	movs	r1, #31
 9ba:	400b      	ands	r3, r1
 9bc:	391e      	subs	r1, #30
 9be:	4099      	lsls	r1, r3
 9c0:	4b02      	ldr	r3, [pc, #8]	; (9cc <system_pinmux_pin_set_config+0x2c>)
 9c2:	4798      	blx	r3
}
 9c4:	bd10      	pop	{r4, pc}
 9c6:	46c0      	nop			; (mov r8, r8)
 9c8:	40002800 	.word	0x40002800
 9cc:	000008f9 	.word	0x000008f9

000009d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 9d0:	4770      	bx	lr
 9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 9d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <system_init+0x18>)
 9d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 9da:	4b05      	ldr	r3, [pc, #20]	; (9f0 <system_init+0x1c>)
 9dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <system_init+0x20>)
 9e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 9e2:	4b05      	ldr	r3, [pc, #20]	; (9f8 <system_init+0x24>)
 9e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 9e6:	4b05      	ldr	r3, [pc, #20]	; (9fc <system_init+0x28>)
 9e8:	4798      	blx	r3
}
 9ea:	bd10      	pop	{r4, pc}
 9ec:	000005ed 	.word	0x000005ed
 9f0:	000002d9 	.word	0x000002d9
 9f4:	000009d1 	.word	0x000009d1
 9f8:	000009d1 	.word	0x000009d1
 9fc:	000009d1 	.word	0x000009d1

00000a00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 a00:	e7fe      	b.n	a00 <Dummy_Handler>
 a02:	46c0      	nop			; (mov r8, r8)

00000a04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 a04:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 a06:	4b1d      	ldr	r3, [pc, #116]	; (a7c <Reset_Handler+0x78>)
 a08:	4a1d      	ldr	r2, [pc, #116]	; (a80 <Reset_Handler+0x7c>)
 a0a:	429a      	cmp	r2, r3
 a0c:	d003      	beq.n	a16 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 a0e:	4b1d      	ldr	r3, [pc, #116]	; (a84 <Reset_Handler+0x80>)
 a10:	4a1a      	ldr	r2, [pc, #104]	; (a7c <Reset_Handler+0x78>)
 a12:	429a      	cmp	r2, r3
 a14:	d304      	bcc.n	a20 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 a16:	4b1c      	ldr	r3, [pc, #112]	; (a88 <Reset_Handler+0x84>)
 a18:	4a1c      	ldr	r2, [pc, #112]	; (a8c <Reset_Handler+0x88>)
 a1a:	429a      	cmp	r2, r3
 a1c:	d310      	bcc.n	a40 <Reset_Handler+0x3c>
 a1e:	e01e      	b.n	a5e <Reset_Handler+0x5a>
 a20:	4a1b      	ldr	r2, [pc, #108]	; (a90 <Reset_Handler+0x8c>)
 a22:	4b18      	ldr	r3, [pc, #96]	; (a84 <Reset_Handler+0x80>)
 a24:	3303      	adds	r3, #3
 a26:	1a9b      	subs	r3, r3, r2
 a28:	089b      	lsrs	r3, r3, #2
 a2a:	3301      	adds	r3, #1
 a2c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 a2e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 a30:	4812      	ldr	r0, [pc, #72]	; (a7c <Reset_Handler+0x78>)
 a32:	4913      	ldr	r1, [pc, #76]	; (a80 <Reset_Handler+0x7c>)
 a34:	588c      	ldr	r4, [r1, r2]
 a36:	5084      	str	r4, [r0, r2]
 a38:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 a3a:	429a      	cmp	r2, r3
 a3c:	d1fa      	bne.n	a34 <Reset_Handler+0x30>
 a3e:	e7ea      	b.n	a16 <Reset_Handler+0x12>
 a40:	4a14      	ldr	r2, [pc, #80]	; (a94 <Reset_Handler+0x90>)
 a42:	4b11      	ldr	r3, [pc, #68]	; (a88 <Reset_Handler+0x84>)
 a44:	3303      	adds	r3, #3
 a46:	1a9b      	subs	r3, r3, r2
 a48:	089b      	lsrs	r3, r3, #2
 a4a:	3301      	adds	r3, #1
 a4c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 a4e:	2200      	movs	r2, #0
                *pDest++ = 0;
 a50:	480e      	ldr	r0, [pc, #56]	; (a8c <Reset_Handler+0x88>)
 a52:	2100      	movs	r1, #0
 a54:	1814      	adds	r4, r2, r0
 a56:	6021      	str	r1, [r4, #0]
 a58:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 a5a:	429a      	cmp	r2, r3
 a5c:	d1fa      	bne.n	a54 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 a5e:	4a0e      	ldr	r2, [pc, #56]	; (a98 <Reset_Handler+0x94>)
 a60:	21ff      	movs	r1, #255	; 0xff
 a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <Reset_Handler+0x98>)
 a64:	438b      	bics	r3, r1
 a66:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 a68:	4a0d      	ldr	r2, [pc, #52]	; (aa0 <Reset_Handler+0x9c>)
 a6a:	6851      	ldr	r1, [r2, #4]
 a6c:	2380      	movs	r3, #128	; 0x80
 a6e:	430b      	orrs	r3, r1
 a70:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 a72:	4b0c      	ldr	r3, [pc, #48]	; (aa4 <Reset_Handler+0xa0>)
 a74:	4798      	blx	r3

        /* Branch to main function */
        main();
 a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <Reset_Handler+0xa4>)
 a78:	4798      	blx	r3
 a7a:	e7fe      	b.n	a7a <Reset_Handler+0x76>
 a7c:	20000000 	.word	0x20000000
 a80:	00000c8c 	.word	0x00000c8c
 a84:	20000008 	.word	0x20000008
 a88:	20000048 	.word	0x20000048
 a8c:	20000008 	.word	0x20000008
 a90:	20000004 	.word	0x20000004
 a94:	2000000c 	.word	0x2000000c
 a98:	e000ed00 	.word	0xe000ed00
 a9c:	00000000 	.word	0x00000000
 aa0:	41004000 	.word	0x41004000
 aa4:	00000bd9 	.word	0x00000bd9
 aa8:	00000aad 	.word	0x00000aad

00000aac <main>:
// Function Prototypes
///////////////////////////////////////////////////////////////////////////////


int main(void)
{
 aac:	b510      	push	{r4, lr}
///////////////////////////////////////////////////////////////////////////////
// Initializations
///////////////////////////////////////////////////////////////////////////////
	system_init();      // Generic ASF initializations    
 aae:	4b02      	ldr	r3, [pc, #8]	; (ab8 <main+0xc>)
 ab0:	4798      	blx	r3
    snowflake_init();   // Project and board specific initializations
 ab2:	4b02      	ldr	r3, [pc, #8]	; (abc <main+0x10>)
 ab4:	4798      	blx	r3
 ab6:	e7fe      	b.n	ab6 <main+0xa>
 ab8:	000009d5 	.word	0x000009d5
 abc:	0000023d 	.word	0x0000023d

00000ac0 <__aeabi_uidiv>:
 ac0:	2200      	movs	r2, #0
 ac2:	0843      	lsrs	r3, r0, #1
 ac4:	428b      	cmp	r3, r1
 ac6:	d374      	bcc.n	bb2 <__aeabi_uidiv+0xf2>
 ac8:	0903      	lsrs	r3, r0, #4
 aca:	428b      	cmp	r3, r1
 acc:	d35f      	bcc.n	b8e <__aeabi_uidiv+0xce>
 ace:	0a03      	lsrs	r3, r0, #8
 ad0:	428b      	cmp	r3, r1
 ad2:	d344      	bcc.n	b5e <__aeabi_uidiv+0x9e>
 ad4:	0b03      	lsrs	r3, r0, #12
 ad6:	428b      	cmp	r3, r1
 ad8:	d328      	bcc.n	b2c <__aeabi_uidiv+0x6c>
 ada:	0c03      	lsrs	r3, r0, #16
 adc:	428b      	cmp	r3, r1
 ade:	d30d      	bcc.n	afc <__aeabi_uidiv+0x3c>
 ae0:	22ff      	movs	r2, #255	; 0xff
 ae2:	0209      	lsls	r1, r1, #8
 ae4:	ba12      	rev	r2, r2
 ae6:	0c03      	lsrs	r3, r0, #16
 ae8:	428b      	cmp	r3, r1
 aea:	d302      	bcc.n	af2 <__aeabi_uidiv+0x32>
 aec:	1212      	asrs	r2, r2, #8
 aee:	0209      	lsls	r1, r1, #8
 af0:	d065      	beq.n	bbe <__aeabi_uidiv+0xfe>
 af2:	0b03      	lsrs	r3, r0, #12
 af4:	428b      	cmp	r3, r1
 af6:	d319      	bcc.n	b2c <__aeabi_uidiv+0x6c>
 af8:	e000      	b.n	afc <__aeabi_uidiv+0x3c>
 afa:	0a09      	lsrs	r1, r1, #8
 afc:	0bc3      	lsrs	r3, r0, #15
 afe:	428b      	cmp	r3, r1
 b00:	d301      	bcc.n	b06 <__aeabi_uidiv+0x46>
 b02:	03cb      	lsls	r3, r1, #15
 b04:	1ac0      	subs	r0, r0, r3
 b06:	4152      	adcs	r2, r2
 b08:	0b83      	lsrs	r3, r0, #14
 b0a:	428b      	cmp	r3, r1
 b0c:	d301      	bcc.n	b12 <__aeabi_uidiv+0x52>
 b0e:	038b      	lsls	r3, r1, #14
 b10:	1ac0      	subs	r0, r0, r3
 b12:	4152      	adcs	r2, r2
 b14:	0b43      	lsrs	r3, r0, #13
 b16:	428b      	cmp	r3, r1
 b18:	d301      	bcc.n	b1e <__aeabi_uidiv+0x5e>
 b1a:	034b      	lsls	r3, r1, #13
 b1c:	1ac0      	subs	r0, r0, r3
 b1e:	4152      	adcs	r2, r2
 b20:	0b03      	lsrs	r3, r0, #12
 b22:	428b      	cmp	r3, r1
 b24:	d301      	bcc.n	b2a <__aeabi_uidiv+0x6a>
 b26:	030b      	lsls	r3, r1, #12
 b28:	1ac0      	subs	r0, r0, r3
 b2a:	4152      	adcs	r2, r2
 b2c:	0ac3      	lsrs	r3, r0, #11
 b2e:	428b      	cmp	r3, r1
 b30:	d301      	bcc.n	b36 <__aeabi_uidiv+0x76>
 b32:	02cb      	lsls	r3, r1, #11
 b34:	1ac0      	subs	r0, r0, r3
 b36:	4152      	adcs	r2, r2
 b38:	0a83      	lsrs	r3, r0, #10
 b3a:	428b      	cmp	r3, r1
 b3c:	d301      	bcc.n	b42 <__aeabi_uidiv+0x82>
 b3e:	028b      	lsls	r3, r1, #10
 b40:	1ac0      	subs	r0, r0, r3
 b42:	4152      	adcs	r2, r2
 b44:	0a43      	lsrs	r3, r0, #9
 b46:	428b      	cmp	r3, r1
 b48:	d301      	bcc.n	b4e <__aeabi_uidiv+0x8e>
 b4a:	024b      	lsls	r3, r1, #9
 b4c:	1ac0      	subs	r0, r0, r3
 b4e:	4152      	adcs	r2, r2
 b50:	0a03      	lsrs	r3, r0, #8
 b52:	428b      	cmp	r3, r1
 b54:	d301      	bcc.n	b5a <__aeabi_uidiv+0x9a>
 b56:	020b      	lsls	r3, r1, #8
 b58:	1ac0      	subs	r0, r0, r3
 b5a:	4152      	adcs	r2, r2
 b5c:	d2cd      	bcs.n	afa <__aeabi_uidiv+0x3a>
 b5e:	09c3      	lsrs	r3, r0, #7
 b60:	428b      	cmp	r3, r1
 b62:	d301      	bcc.n	b68 <__aeabi_uidiv+0xa8>
 b64:	01cb      	lsls	r3, r1, #7
 b66:	1ac0      	subs	r0, r0, r3
 b68:	4152      	adcs	r2, r2
 b6a:	0983      	lsrs	r3, r0, #6
 b6c:	428b      	cmp	r3, r1
 b6e:	d301      	bcc.n	b74 <__aeabi_uidiv+0xb4>
 b70:	018b      	lsls	r3, r1, #6
 b72:	1ac0      	subs	r0, r0, r3
 b74:	4152      	adcs	r2, r2
 b76:	0943      	lsrs	r3, r0, #5
 b78:	428b      	cmp	r3, r1
 b7a:	d301      	bcc.n	b80 <__aeabi_uidiv+0xc0>
 b7c:	014b      	lsls	r3, r1, #5
 b7e:	1ac0      	subs	r0, r0, r3
 b80:	4152      	adcs	r2, r2
 b82:	0903      	lsrs	r3, r0, #4
 b84:	428b      	cmp	r3, r1
 b86:	d301      	bcc.n	b8c <__aeabi_uidiv+0xcc>
 b88:	010b      	lsls	r3, r1, #4
 b8a:	1ac0      	subs	r0, r0, r3
 b8c:	4152      	adcs	r2, r2
 b8e:	08c3      	lsrs	r3, r0, #3
 b90:	428b      	cmp	r3, r1
 b92:	d301      	bcc.n	b98 <__aeabi_uidiv+0xd8>
 b94:	00cb      	lsls	r3, r1, #3
 b96:	1ac0      	subs	r0, r0, r3
 b98:	4152      	adcs	r2, r2
 b9a:	0883      	lsrs	r3, r0, #2
 b9c:	428b      	cmp	r3, r1
 b9e:	d301      	bcc.n	ba4 <__aeabi_uidiv+0xe4>
 ba0:	008b      	lsls	r3, r1, #2
 ba2:	1ac0      	subs	r0, r0, r3
 ba4:	4152      	adcs	r2, r2
 ba6:	0843      	lsrs	r3, r0, #1
 ba8:	428b      	cmp	r3, r1
 baa:	d301      	bcc.n	bb0 <__aeabi_uidiv+0xf0>
 bac:	004b      	lsls	r3, r1, #1
 bae:	1ac0      	subs	r0, r0, r3
 bb0:	4152      	adcs	r2, r2
 bb2:	1a41      	subs	r1, r0, r1
 bb4:	d200      	bcs.n	bb8 <__aeabi_uidiv+0xf8>
 bb6:	4601      	mov	r1, r0
 bb8:	4152      	adcs	r2, r2
 bba:	4610      	mov	r0, r2
 bbc:	4770      	bx	lr
 bbe:	e7ff      	b.n	bc0 <__aeabi_uidiv+0x100>
 bc0:	b501      	push	{r0, lr}
 bc2:	2000      	movs	r0, #0
 bc4:	f000 f806 	bl	bd4 <__aeabi_idiv0>
 bc8:	bd02      	pop	{r1, pc}
 bca:	46c0      	nop			; (mov r8, r8)

00000bcc <__aeabi_uidivmod>:
 bcc:	2900      	cmp	r1, #0
 bce:	d0f7      	beq.n	bc0 <__aeabi_uidiv+0x100>
 bd0:	e776      	b.n	ac0 <__aeabi_uidiv>
 bd2:	4770      	bx	lr

00000bd4 <__aeabi_idiv0>:
 bd4:	4770      	bx	lr
 bd6:	46c0      	nop			; (mov r8, r8)

00000bd8 <__libc_init_array>:
 bd8:	4b0e      	ldr	r3, [pc, #56]	; (c14 <__libc_init_array+0x3c>)
 bda:	b570      	push	{r4, r5, r6, lr}
 bdc:	2500      	movs	r5, #0
 bde:	001e      	movs	r6, r3
 be0:	4c0d      	ldr	r4, [pc, #52]	; (c18 <__libc_init_array+0x40>)
 be2:	1ae4      	subs	r4, r4, r3
 be4:	10a4      	asrs	r4, r4, #2
 be6:	42a5      	cmp	r5, r4
 be8:	d004      	beq.n	bf4 <__libc_init_array+0x1c>
 bea:	00ab      	lsls	r3, r5, #2
 bec:	58f3      	ldr	r3, [r6, r3]
 bee:	4798      	blx	r3
 bf0:	3501      	adds	r5, #1
 bf2:	e7f8      	b.n	be6 <__libc_init_array+0xe>
 bf4:	f000 f83a 	bl	c6c <_init>
 bf8:	4b08      	ldr	r3, [pc, #32]	; (c1c <__libc_init_array+0x44>)
 bfa:	2500      	movs	r5, #0
 bfc:	001e      	movs	r6, r3
 bfe:	4c08      	ldr	r4, [pc, #32]	; (c20 <__libc_init_array+0x48>)
 c00:	1ae4      	subs	r4, r4, r3
 c02:	10a4      	asrs	r4, r4, #2
 c04:	42a5      	cmp	r5, r4
 c06:	d004      	beq.n	c12 <__libc_init_array+0x3a>
 c08:	00ab      	lsls	r3, r5, #2
 c0a:	58f3      	ldr	r3, [r6, r3]
 c0c:	4798      	blx	r3
 c0e:	3501      	adds	r5, #1
 c10:	e7f8      	b.n	c04 <__libc_init_array+0x2c>
 c12:	bd70      	pop	{r4, r5, r6, pc}
 c14:	00000c78 	.word	0x00000c78
 c18:	00000c78 	.word	0x00000c78
 c1c:	00000c78 	.word	0x00000c78
 c20:	00000c7c 	.word	0x00000c7c
 c24:	00000312 	.word	0x00000312
 c28:	0000030e 	.word	0x0000030e
 c2c:	0000030e 	.word	0x0000030e
 c30:	00000370 	.word	0x00000370
 c34:	00000370 	.word	0x00000370
 c38:	00000328 	.word	0x00000328
 c3c:	00000318 	.word	0x00000318
 c40:	0000032e 	.word	0x0000032e
 c44:	0000035e 	.word	0x0000035e
 c48:	0000055c 	.word	0x0000055c
 c4c:	0000053c 	.word	0x0000053c
 c50:	0000053c 	.word	0x0000053c
 c54:	000005d6 	.word	0x000005d6
 c58:	0000054e 	.word	0x0000054e
 c5c:	0000056a 	.word	0x0000056a
 c60:	00000540 	.word	0x00000540
 c64:	00000578 	.word	0x00000578
 c68:	000005ba 	.word	0x000005ba

00000c6c <_init>:
 c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c6e:	46c0      	nop			; (mov r8, r8)
 c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c72:	bc08      	pop	{r3}
 c74:	469e      	mov	lr, r3
 c76:	4770      	bx	lr

00000c78 <__init_array_start>:
 c78:	000000dd 	.word	0x000000dd

00000c7c <_fini>:
 c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c7e:	46c0      	nop			; (mov r8, r8)
 c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c82:	bc08      	pop	{r3}
 c84:	469e      	mov	lr, r3
 c86:	4770      	bx	lr

00000c88 <__fini_array_start>:
 c88:	000000b5 	.word	0x000000b5
